<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Eigen库学习</title>
      <link href="/2022/11/21/Eigen%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/11/21/Eigen%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><p>Eigen 是 C++ 的一个开源模板库，支持线性代数运算、矩阵和矢量运算、数值分析及其相关的算法。在 Ubuntu 中安装 Eigen 有两种方法：</p><p>1、命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libeigen3-dev</span><br></pre></td></tr></table></figure><p>2、源码包安装</p><p>在 <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">官网</a> 下载指定版本的源码包，安装过程如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf eigen-3.4.0.tar.gz</span><br><span class="line">cd eigen-3.4.0</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>Eigen 只包含头文件，默认安装在 &#x2F;usr&#x2F;local&#x2F;include&#x2F; 下，include 引用此处即可，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://eigen.tuxfamily.org/dox/">Eigen官网文档</a> ， <a href="https://blog.csdn.net/hongge_smile/article/details/107296658">Eigen库学习教程</a> </p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Eigen 库包含 Core 模块和一些附加模块，每一个模块对应一个头文件，提供的 Dense 和 Eigen 模块用于同时访问多个模块，各模块的功能如下图：</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/eigen/modules.png"></p><h2 id="Matrix-类"><a href="#Matrix-类" class="headerlink" title="Matrix 类"></a>Matrix 类</h2><h3 id="类模板参数"><a href="#类模板参数" class="headerlink" title="类模板参数"></a>类模板参数</h3><p>class Eigen::Matrix&lt; Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_ &gt;</p><ul><li>Scalar_：矩阵元素类型，例如 float、double、int、std::complex<float>、用户自定义的标量类型；</li><li>Rows_：矩阵行数或 Dynamic；</li><li>Cols_：矩阵列数或 Dynamic；</li><li>Options_：控制存储顺序（RowMajor 或 ColMajor）和矢量化所需的对齐（AutoAlign 或 DontAlign）；</li><li>MaxRows_：最大行数，默认为 Rows_；</li><li>MaxCols_：最大列数，默认为 Cols_；</li></ul><p>主要关注前三个参数。</p><p>Eigen 提供了许多常用的类型，例如：</p><ul><li>typedef Matrix&lt;double, 2, 2&gt; Matrix2d</li><li>typedef Matrix&lt;float, 4, 1&gt; Vector4f</li><li>typedef Matrix&lt;int, 1, 3&gt; RowVector3i</li><li>typedef Matrix&lt;float, Dynamic, Dynamic&gt; MatrixXf</li><li>typedef Matrix&lt;float, Dynamic, 1&gt; VectorXf</li><li>typedef Matrix&lt;float, 2, Dynamic&gt; Matrix2Xf</li><li>typedef Matrix&lt;double, Dynamic, 3&gt; MatrixX3d</li></ul><p>从命名便可以发现规律，结尾字母表示矩阵元素类型，Matrix表示矩阵，Vector表示列向量，X表示Dynamic，数字代表具体的行数或列数。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>Vector：一种特殊的 Matrix，用于表示列向量。</p><p>Dense versus sparse（密集和稀疏矩阵）：Matrix 类主要用于处理密集矩阵（非0元素占所有元素比例较大的矩阵），所有数据都存储在一个普通的连续数组中。</p><p>Fixed-size versus dynamic-size：Fixed-size 在编译时就确定了矩阵的大小，在栈上申请内存，效率高，适合小矩阵，尤其是小于（大约）16的矩阵；dynamic-size 是运行时在堆上动态分配内存，矩阵大小可调，但效率低，适合大矩阵。</p><p>MaxRows_ and MaxCols_：在编译阶段表示的矩阵上限，通常使用默认值；在固定大小的矩阵中获取动态大小的块时，MaxRows_ 和 MaxCols_ 是原始矩阵的维度，而 Rows_ 和 Cols_ 是动态的。</p><h3 id="Matrix-操作"><a href="#Matrix-操作" class="headerlink" title="Matrix 操作"></a>Matrix 操作</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Matrix()</span></span><br><span class="line">Eigen::Matrix&lt;<span class="type">int</span>, <span class="number">3</span>, <span class="number">3</span>&gt; a; <span class="comment">//固定大小，分配大小为9的数组空间，但未初始化值，此时输出值是不确定的</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a = \n&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::Matrix&lt;<span class="type">int</span>, Eigen::Dynamic, Eigen::Dynamic&gt; b; <span class="comment">//动态大小，创建大小为0的空矩阵，此类构造函数是创建空矩阵的唯一方法：不支持将矩阵大小调整为0</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b size = &quot;</span> &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::Matrix2i c; <span class="comment">//使用内部定义的类型</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c = \n&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix(const ArgTypes &amp;... args)</span></span><br><span class="line"><span class="function">Eigen::Matrix&lt;<span class="type">int</span>, 1, 3&gt; <span class="title">d</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;d = \n&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">Eigen::Matrix&lt;<span class="type">int</span>, <span class="number">3</span>, <span class="number">1</span>&gt; e&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;e = \n&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;\n\n&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix(const std::initializer_list&lt; std::initializer_list&lt; Scalar &gt;&gt; &amp; list)</span></span><br><span class="line">Eigen::MatrixXi f&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                  &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;; <span class="comment">//每行的元素数量必须相同</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;f = \n&quot;</span> &lt;&lt; f &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::VectorXd f1&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;; <span class="comment">//列向量</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;f1 = \n&quot;</span> &lt;&lt; f1 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix(Index dim)</span></span><br><span class="line"><span class="comment">//构造具有给定维度的列向量或行向量</span></span><br><span class="line"><span class="function">Eigen::Matrix&lt;<span class="type">int</span>, 1, Eigen::Dynamic&gt; <span class="title">g</span><span class="params">(<span class="number">3</span>)</span></span>; <span class="comment">//默认元素值为0</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;g = \n&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix(Index rows, Index, cols)</span></span><br><span class="line"><span class="comment">//构造一个给定大小的矩阵</span></span><br><span class="line"><span class="function">Eigen::MatrixXi <span class="title">h</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>; <span class="comment">//默认元素值为0</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;h = \n&quot;</span> &lt;&lt; h &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//operator=Matrix(const EigenBase&lt; OtherDerived &gt; &amp; other)</span></span><br><span class="line">Eigen::MatrixXi i = h;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;i = \n&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::MatrixXd random = Eigen::MatrixXd::<span class="built_in">Random</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">//矩阵元素为[-1, 1]的随机值</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;random = \n&quot;</span> &lt;&lt; random &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::MatrixXd constant = Eigen::MatrixXd::<span class="built_in">Constant</span>(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1.2</span>); <span class="comment">//矩阵元素都为1.2</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;constant = \n&quot;</span> &lt;&lt; constant &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::Matrix3i zero = Eigen::Matrix3i::<span class="built_in">Zero</span>(); <span class="comment">//矩阵元素都为0</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;zero = \n&quot;</span> &lt;&lt; zero &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::Matrix3i ones = Eigen::Matrix3i::<span class="built_in">Ones</span>(); <span class="comment">//矩阵元素都为1</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ones = \n&quot;</span> &lt;&lt; ones &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Eigen::Matrix3i identity = Eigen::Matrix3i::<span class="built_in">Identity</span>(); <span class="comment">//单位矩阵</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;identity = \n&quot;</span> &lt;&lt; identity &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix(const Scalar &amp; a0, const Scalar &amp;a1)</span></span><br><span class="line"><span class="function">Eigen::Vector2f <span class="title">j</span><span class="params">(<span class="number">1.2</span>, <span class="number">2.3</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;j = \n&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//Matrix(const Scalar &amp; a0, const Scalar &amp;a1, const Scalar &amp;a2)</span></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">k</span><span class="params">(<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.4</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;k = \n&quot;</span> &lt;&lt; k &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//Matrix(const Scalar &amp; a0, const Scalar &amp;a1, const Scalar &amp;a2, const Scalar &amp;a3)</span></span><br><span class="line"><span class="function">Eigen::Vector4f <span class="title">l</span><span class="params">(<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.4</span>, <span class="number">4.5</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;l = \n&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">a = </span><br><span class="line">-1347137528       32711  -520115867</span><br><span class="line">      32711 -1347139456       32767</span><br><span class="line">-1347138104       32711   468865362</span><br><span class="line">b size = 0</span><br><span class="line">c = </span><br><span class="line">-1347129484 -1347746337</span><br><span class="line">      32711       32711</span><br><span class="line"></span><br><span class="line">d = </span><br><span class="line">1 2 3</span><br><span class="line">e = </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">f = </span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">f1 = </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">g = </span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">h = </span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">i = </span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">random = </span><br><span class="line"> 0.680375   0.59688 -0.329554</span><br><span class="line">-0.211234  0.823295  0.536459</span><br><span class="line"> 0.566198 -0.604897 -0.444451</span><br><span class="line">constant = </span><br><span class="line">1.2 1.2 1.2</span><br><span class="line">1.2 1.2 1.2</span><br><span class="line">1.2 1.2 1.2</span><br><span class="line">zero = </span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">ones = </span><br><span class="line">1 1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1</span><br><span class="line">identity = </span><br><span class="line">1 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 1</span><br><span class="line"></span><br><span class="line">j = </span><br><span class="line">1.2</span><br><span class="line">2.3</span><br><span class="line">k = </span><br><span class="line">1.2</span><br><span class="line">2.3</span><br><span class="line">3.4</span><br><span class="line">l = </span><br><span class="line">1.2</span><br><span class="line">2.3</span><br><span class="line">3.4</span><br><span class="line">4.5</span><br></pre></td></tr></table></figure><h4 id="赋值与访问"><a href="#赋值与访问" class="headerlink" title="赋值与访问"></a>赋值与访问</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//括号操作符</span></span><br><span class="line">Eigen::Matrix&lt;<span class="type">int</span>, <span class="number">2</span>, <span class="number">2</span>&gt; a;</span><br><span class="line"><span class="built_in">a</span>(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">1</span>; <span class="built_in">a</span>(<span class="number">0</span>, <span class="number">1</span>) = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">a</span>(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">3</span>; <span class="built_in">a</span>(<span class="number">1</span>, <span class="number">1</span>) = <span class="number">4</span>; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a = \n&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a(1, 1) = &quot;</span> &lt;&lt; <span class="built_in">a</span>(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逗号初始化器，元素数目必须正确</span></span><br><span class="line">Eigen::Matrix2f b;</span><br><span class="line">b &lt;&lt; <span class="number">1.2</span>, <span class="number">1.3</span>,</span><br><span class="line">     <span class="number">1.4</span>, <span class="number">2.1</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b = \n&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[]操作符</span></span><br><span class="line"><span class="comment">//只有Vector才能使用[]</span></span><br><span class="line">Eigen::Vector3f c;</span><br><span class="line">c &lt;&lt; <span class="number">2.1</span>, <span class="number">2.2</span>, <span class="number">2.3</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c = \n&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c[0, 1] = &quot;</span> &lt;&lt; c[<span class="number">0</span>, <span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = </span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">a(1, 1) = 4</span><br><span class="line"></span><br><span class="line">b = </span><br><span class="line">1.2 1.3</span><br><span class="line">1.4 2.1</span><br><span class="line">c = </span><br><span class="line">2.1</span><br><span class="line">2.2</span><br><span class="line">2.3</span><br><span class="line">c[0, 1] = 2.2</span><br></pre></td></tr></table></figure><h4 id="矩阵大小"><a href="#矩阵大小" class="headerlink" title="矩阵大小"></a>矩阵大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//固定大小</span></span><br><span class="line">Eigen::Matrix&lt;<span class="type">int</span>, <span class="number">2</span>, <span class="number">2</span>&gt; a;</span><br><span class="line"><span class="built_in">a</span>(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">1</span>; <span class="built_in">a</span>(<span class="number">0</span>, <span class="number">1</span>) = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">a</span>(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">3</span>; <span class="built_in">a</span>(<span class="number">1</span>, <span class="number">1</span>) = <span class="number">4</span>; </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a row size = &quot;</span> &lt;&lt; a.<span class="built_in">rows</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a column size = &quot;</span> &lt;&lt; a.<span class="built_in">cols</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a size = &quot;</span> &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态大小</span></span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">b</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">b &lt;&lt; <span class="number">1.2</span>, <span class="number">1.3</span>,</span><br><span class="line">     <span class="number">1.4</span>, <span class="number">2.1</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b row size = &quot;</span> &lt;&lt; b.<span class="built_in">rows</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b column size = &quot;</span> &lt;&lt; b.<span class="built_in">cols</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b size = &quot;</span> &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//只有动态矩阵才能使用resize</span></span><br><span class="line"><span class="comment">//resize会析构原始数据</span></span><br><span class="line">b.<span class="built_in">resize</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b = \n&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//动态矩阵赋值时，左边大小会改为与右边相同</span></span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">c</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">b = c;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b size = &quot;</span> &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a row size = 2</span><br><span class="line">a column size = 2</span><br><span class="line">a size = 4</span><br><span class="line">b row size = 2</span><br><span class="line">b column size = 2</span><br><span class="line">b size = 4</span><br><span class="line">b = </span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">b size = 4</span><br></pre></td></tr></table></figure><h4 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//+ - *</span></span><br><span class="line">Eigen::Matrix3f a = Eigen::Matrix3f::<span class="built_in">Random</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">Eigen::Matrix3f b = Eigen::Matrix3f::<span class="built_in">Random</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a = \n&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b = \n&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a + b = \n&quot;</span> &lt;&lt; a + b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a - b = \n&quot;</span> &lt;&lt; a - b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a * b = \n&quot;</span> &lt;&lt; a * b &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//+= -= *=</span></span><br><span class="line">a += b;</span><br><span class="line">b *= a;</span><br><span class="line">a -= b;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a = \n&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b = \n&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵转置</span></span><br><span class="line">Eigen::Matrix2cf c;</span><br><span class="line">std::complex&lt;<span class="type">float</span>&gt; cpx&#123;<span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line">c &lt;&lt; <span class="number">1</span>, cpx, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c = \n&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;转置:\n&quot;</span> &lt;&lt; c.<span class="built_in">transpose</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;共轨:\n&quot;</span> &lt;&lt; c.<span class="built_in">conjugate</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;共轨转置:\n&quot;</span> &lt;&lt; c.<span class="built_in">adjoint</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// c = c.transpose(); //错误</span></span><br><span class="line">c.<span class="built_in">transposeInPlace</span>(); <span class="comment">//正确</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c = \n&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向量点积和叉积</span></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">v1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">v2</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;dot product: \n&quot;</span> &lt;&lt; v1.<span class="built_in">dot</span>(v2) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// = v2.dot(v1) = v1.transpose() * v2</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;cross product: \n&quot;</span> &lt;&lt; v1.<span class="built_in">cross</span>(v2) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// = -v2.cross(v1)</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">a = </span><br><span class="line"> 0.680375   0.59688 -0.329554</span><br><span class="line">-0.211234  0.823295  0.536459</span><br><span class="line"> 0.566198 -0.604897 -0.444451</span><br><span class="line">b = </span><br><span class="line">   0.10794  -0.270431    0.83239</span><br><span class="line">-0.0452059  0.0268018   0.271423</span><br><span class="line">  0.257742   0.904459   0.434594</span><br><span class="line">a + b = </span><br><span class="line">   0.788315    0.326449    0.502836</span><br><span class="line">   -0.25644    0.850097    0.807883</span><br><span class="line">    0.82394    0.299562 -0.00985664</span><br><span class="line">a - b = </span><br><span class="line"> 0.572435  0.867311  -1.16194</span><br><span class="line">-0.166028  0.796493  0.265036</span><br><span class="line"> 0.308457  -1.50936 -0.879044</span><br><span class="line">a * b = </span><br><span class="line">-0.0384828  -0.466066   0.585123</span><br><span class="line"> 0.0782496   0.564396   0.280774</span><br><span class="line">-0.0260931  -0.571317   0.113959</span><br><span class="line"></span><br><span class="line">a = </span><br><span class="line">-0.0519645   0.271752   0.675241</span><br><span class="line"> -0.437567   0.760762   0.811636</span><br><span class="line">  0.494619  -0.683643  -0.865872</span><br><span class="line">b = </span><br><span class="line">    0.84028    0.054697   -0.172405</span><br><span class="line">   0.181127   0.0893349 -0.00375373</span><br><span class="line">   0.329322    0.983205    0.856015</span><br><span class="line"></span><br><span class="line">c = </span><br><span class="line">(1,0) (2,2)</span><br><span class="line">(3,0) (4,0)</span><br><span class="line">转置:</span><br><span class="line">(1,0) (3,0)</span><br><span class="line">(2,2) (4,0)</span><br><span class="line">共轨:</span><br><span class="line">(1,-0) (2,-2)</span><br><span class="line">(3,-0) (4,-0)</span><br><span class="line">共轨转置:</span><br><span class="line">(1,-0) (3,-0)</span><br><span class="line">(2,-2) (4,-0)</span><br><span class="line">c = </span><br><span class="line">(1,0) (3,0)</span><br><span class="line">(2,2) (4,0)</span><br><span class="line"></span><br><span class="line">dot product: </span><br><span class="line">32</span><br><span class="line">cross product: </span><br><span class="line">-3</span><br><span class="line"> 6</span><br><span class="line">-3</span><br></pre></td></tr></table></figure><h4 id="规约、范数计算"><a href="#规约、范数计算" class="headerlink" title="规约、范数计算"></a>规约、范数计算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Eigen::Matrix3f a;</span><br><span class="line">a &lt;&lt; <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.6</span>,</span><br><span class="line">     <span class="number">2.1</span>, <span class="number">2.6</span>, <span class="number">2.3</span>,</span><br><span class="line">     <span class="number">3.8</span>, <span class="number">3.4</span>, <span class="number">3.2</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a = \n&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a.sum() = \n&quot;</span> &lt;&lt; a.<span class="built_in">sum</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;  <span class="comment">//所有元素的和</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a.prod() = \n&quot;</span> &lt;&lt; a.<span class="built_in">prod</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//所有元素的乘积</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a.mean() = \n&quot;</span> &lt;&lt; a.<span class="built_in">mean</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//所有元素的平均</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a.minCoeff() = \n&quot;</span> &lt;&lt; a.<span class="built_in">minCoeff</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//元素最小值</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a.maxCoeff() = \n&quot;</span> &lt;&lt; a.<span class="built_in">maxCoeff</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//元素最大值</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a.trace() = \n&quot;</span> &lt;&lt; a.<span class="built_in">trace</span>() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>; <span class="comment">//对角线元素的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//范数计算</span></span><br><span class="line"><span class="function">Eigen::VectorXf <span class="title">b</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">c</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">b &lt;&lt; <span class="number">-1</span>, <span class="number">2</span>;</span><br><span class="line">c &lt;&lt; <span class="number">1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">4</span>;</span><br><span class="line"><span class="comment">//向量的范数计算</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b = \n&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b.squaredNorm() = &quot;</span> &lt;&lt; b.<span class="built_in">squaredNorm</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//向量的平方范数</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b.norm() = &quot;</span> &lt;&lt; b.<span class="built_in">norm</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//平方范数的开方</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b.lpNorm&lt;1&gt;() = &quot;</span> &lt;&lt; b.<span class="built_in">lpNorm</span>&lt;<span class="number">1</span>&gt;() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//向量的1范数</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;b.lpNorm&lt;Infinity&gt;() = &quot;</span> &lt;&lt; b.<span class="built_in">lpNorm</span>&lt;Eigen::Infinity&gt;() &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//向量的无穷范数</span></span><br><span class="line"><span class="comment">//矩阵的范数计算</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c = \n&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c.squaredNorm() = &quot;</span> &lt;&lt; c.<span class="built_in">squaredNorm</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c.norm() = &quot;</span> &lt;&lt; c.<span class="built_in">norm</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c.lpNorm&lt;1&gt;() = &quot;</span> &lt;&lt; c.<span class="built_in">lpNorm</span>&lt;<span class="number">1</span>&gt;() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;c.lpNorm&lt;Infinity&gt;() = &quot;</span> &lt;&lt; c.<span class="built_in">lpNorm</span>&lt;Eigen::Infinity&gt;() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部分规约</span></span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">d</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">d &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;d = \n&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Column&#x27;s maximum: \n&quot;</span> &lt;&lt; d.<span class="built_in">colwise</span>().<span class="built_in">maxCoeff</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Row&#x27;s minimum: \n&quot;</span> &lt;&lt; d.<span class="built_in">rowwise</span>().<span class="built_in">minCoeff</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// //布尔规约 矩阵不支持?</span></span><br><span class="line"><span class="comment">// Eigen::MatrixXf d(2, 2);</span></span><br><span class="line"><span class="comment">// d &lt;&lt; 1.2, -2, 3.2, -4.5;</span></span><br><span class="line"><span class="comment">// std::cout &lt;&lt; &quot;(d &gt; 0).all() = &quot; &lt;&lt; (d &gt; 0).all() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// std::cout &lt;&lt; &quot;(d &gt; 0).any() = &quot; &lt;&lt; (d &gt; 0).any() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// std::cout &lt;&lt; &quot;(d &gt; 0).count() = &quot; &lt;&lt; (d &gt; 0).count() &lt;&lt; &quot;\n&quot;;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">a = </span><br><span class="line">1.2 1.3 1.6</span><br><span class="line">2.1 2.6 2.3</span><br><span class="line">3.8 3.4 3.2</span><br><span class="line">a.sum() = </span><br><span class="line">21.5</span><br><span class="line">a.prod() = </span><br><span class="line">1295.92</span><br><span class="line">a.mean() = </span><br><span class="line">2.38889</span><br><span class="line">a.minCoeff() = </span><br><span class="line">1.2</span><br><span class="line">a.maxCoeff() = </span><br><span class="line">3.8</span><br><span class="line">a.trace() = </span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">b = </span><br><span class="line">-1</span><br><span class="line"> 2</span><br><span class="line">b.squaredNorm() = 5</span><br><span class="line">b.norm() = 2.23607</span><br><span class="line">b.lpNorm&lt;1&gt;() = 3</span><br><span class="line">b.lpNorm&lt;Infinity&gt;() = 2</span><br><span class="line">c = </span><br><span class="line"> 1 -2</span><br><span class="line">-3  4</span><br><span class="line">c.squaredNorm() = 30</span><br><span class="line">c.norm() = 5.47723</span><br><span class="line">c.lpNorm&lt;1&gt;() = 10</span><br><span class="line">c.lpNorm&lt;Infinity&gt;() = 4</span><br><span class="line"></span><br><span class="line">d = </span><br><span class="line">1 2 6 9</span><br><span class="line">3 1 7 2</span><br><span class="line">Column&#x27;s maximum: </span><br><span class="line">3 2 7 9</span><br><span class="line">Row&#x27;s minimum: </span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>获得元素在矩阵或数组中的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::MatrixXf <span class="title">m</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">m &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line"><span class="comment">//get location of maximum</span></span><br><span class="line">Eigen::MatrixXf::Index maxRow, maxCol;</span><br><span class="line"><span class="type">float</span> max = m.<span class="built_in">maxCoeff</span>(&amp;maxRow, &amp;maxCol);</span><br><span class="line"><span class="comment">//get location of minimum</span></span><br><span class="line">Eigen::MatrixXf::Index minRow, minCol;</span><br><span class="line"><span class="type">float</span> min = m.<span class="built_in">minCoeff</span>(&amp;minRow, &amp;minCol);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Max: &quot;</span> &lt;&lt; max &lt;&lt; <span class="string">&quot;, at: (&quot;</span> &lt;&lt; maxRow &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; maxCol &lt;&lt; <span class="string">&quot;)\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Min: &quot;</span> &lt;&lt; min &lt;&lt; <span class="string">&quot;, at: (&quot;</span> &lt;&lt; minRow &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; minCol &lt;&lt; <span class="string">&quot;)\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Max: 4, at: (1, 1)</span><br><span class="line">Min: 1, at: (0, 0)</span><br></pre></td></tr></table></figure><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><p>广播的概念类似于部分规约，不同之处在于广播通过对向量在一个方向上的复制，将向量解释成矩阵。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个列向量加到矩阵的每一列中</span></span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">mat</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">Eigen::VectorXf <span class="title">v</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">mat &lt;&lt; <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">        <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>;</span><br><span class="line">v &lt;&lt; <span class="number">-1</span>, <span class="number">1</span>;</span><br><span class="line">mat.<span class="built_in">colwise</span>() += v;  <span class="comment">//广播操作，将列向量加到矩阵的每一列中</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Broadcasting result: &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; mat &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在矩阵中找到与向量距离（欧式距离）最近的一列</span></span><br><span class="line">Eigen::MatrixXf::Index index;</span><br><span class="line">(mat.<span class="built_in">colwise</span>() - v).<span class="built_in">colwise</span>().<span class="built_in">squaredNorm</span>().<span class="built_in">minCoeff</span>(&amp;index);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Nearest neighbour is column &quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; mat.<span class="built_in">col</span>(index) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Broadcasting result: </span><br><span class="line">2 1 2 3</span><br><span class="line">9 5 8 6</span><br><span class="line">Nearest neighbour is column 1:</span><br><span class="line">1</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="块操作"><a href="#块操作" class="headerlink" title="块操作"></a>块操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//block()</span></span><br><span class="line"><span class="comment">//可用于固定/动态大小的矩阵或数组，具有以下两种形式：</span></span><br><span class="line"><span class="comment">//动态尺寸的block：block(i, j, p, q)</span></span><br><span class="line"><span class="comment">//固定尺寸的block：block&lt;p, q&gt;(i, j) </span></span><br><span class="line"><span class="comment">//两种方式都表示从(i,j)位置开始，向右下角取p行q列大小的子矩阵</span></span><br><span class="line"><span class="function">Eigen::MatrixXf <span class="title">mat</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">        <span class="built_in">mat</span>(i, j) = i * <span class="number">0.5</span> + j * <span class="number">0.6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat = \n&quot;</span> &lt;&lt; mat &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;block(1, 1, 2, 2) = \n&quot;</span> &lt;&lt; mat.<span class="built_in">block</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;block&lt;2, 2&gt;(1, 1) = \n&quot;</span> &lt;&lt; mat.<span class="built_in">block</span>&lt;<span class="number">2</span>, <span class="number">2</span>&gt;(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//block()还可以做左值，用于修改矩阵或数组</span></span><br><span class="line">mat.<span class="built_in">block</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) = Eigen::Matrix2f::<span class="built_in">Zero</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat = \n&quot;</span> &lt;&lt; mat &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//row() col() 一种特殊的块，用于获取一行或一列</span></span><br><span class="line"><span class="comment">//当操作的块是一行或一列时，使用row()和col()效率会更高</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat row 1: &quot;</span> &lt;&lt; mat.<span class="built_in">row</span>(<span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//右值</span></span><br><span class="line">mat.<span class="built_in">col</span>(<span class="number">1</span>) *= <span class="number">2</span>; <span class="comment">//左值</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat = \n&quot;</span> &lt;&lt; mat &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//边角操作</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;左上角的2*2块: \n&quot;</span> &lt;&lt; mat.<span class="built_in">topLeftCorner</span>(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;右下角的2*2块: \n&quot;</span> &lt;&lt; mat.<span class="built_in">bottomRightCorner</span>&lt;<span class="number">2</span>, <span class="number">2</span>&gt;() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;上两行: \n&quot;</span> &lt;&lt; mat.<span class="built_in">topRows</span>(<span class="number">2</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;右两列: \n&quot;</span> &lt;&lt; mat.<span class="built_in">rightCols</span>(<span class="number">2</span>) &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向量或一维数组的块操作</span></span><br><span class="line"><span class="function">Eigen::VectorXf <span class="title">v</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">    v[i] = <span class="number">0.2</span> * i;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;v = \n&quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;first n elements: \n&quot;</span> &lt;&lt; v.<span class="built_in">head</span>(<span class="number">2</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;last n elements: \n&quot;</span> &lt;&lt; v.<span class="built_in">tail</span>&lt;<span class="number">2</span>&gt;() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//vector.segment(i, n) vector.segment&lt;n&gt;(i)</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;starting at position i, containing n elements: \n&quot;</span> &lt;&lt; v.<span class="built_in">segment</span>(<span class="number">1</span>, <span class="number">4</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;starting at position i, containing n elements: \n&quot;</span> &lt;&lt; v.<span class="built_in">segment</span>&lt;<span class="number">4</span>&gt;(<span class="number">3</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">mat = </span><br><span class="line">  0 0.6 1.2 1.8</span><br><span class="line">0.5 1.1 1.7 2.3</span><br><span class="line">  1 1.6 2.2 2.8</span><br><span class="line">1.5 2.1 2.7 3.3</span><br><span class="line">block(1, 1, 2, 2) = </span><br><span class="line">1.1 1.7</span><br><span class="line">1.6 2.2</span><br><span class="line">block&lt;2, 2&gt;(1, 1) = </span><br><span class="line">1.1 1.7</span><br><span class="line">1.6 2.2</span><br><span class="line">mat = </span><br><span class="line">  0 0.6 1.2 1.8</span><br><span class="line">0.5   0   0 2.3</span><br><span class="line">  1   0   0 2.8</span><br><span class="line">1.5 2.1 2.7 3.3</span><br><span class="line"></span><br><span class="line">mat row 1: 0.5   0   0 2.3</span><br><span class="line">mat = </span><br><span class="line">  0 1.2 1.2 1.8</span><br><span class="line">0.5   0   0 2.3</span><br><span class="line">  1   0   0 2.8</span><br><span class="line">1.5 4.2 2.7 3.3</span><br><span class="line"></span><br><span class="line">左上角的2*2块: </span><br><span class="line">  0 1.2</span><br><span class="line">0.5   0</span><br><span class="line">右下角的2*2块: </span><br><span class="line">  0 2.8</span><br><span class="line">2.7 3.3</span><br><span class="line">上两行: </span><br><span class="line">  0 1.2 1.2 1.8</span><br><span class="line">0.5   0   0 2.3</span><br><span class="line">右两列: </span><br><span class="line">1.2 1.8</span><br><span class="line">  0 2.3</span><br><span class="line">  0 2.8</span><br><span class="line">2.7 3.3</span><br><span class="line"></span><br><span class="line">v = </span><br><span class="line">  0</span><br><span class="line">0.2</span><br><span class="line">0.4</span><br><span class="line">0.6</span><br><span class="line">0.8</span><br><span class="line">  1</span><br><span class="line">1.2</span><br><span class="line">1.4</span><br><span class="line">first n elements: </span><br><span class="line">  0</span><br><span class="line">0.2</span><br><span class="line">last n elements: </span><br><span class="line">1.2</span><br><span class="line">1.4</span><br><span class="line">starting at position i, containing n elements: </span><br><span class="line">0.2</span><br><span class="line">0.4</span><br><span class="line">0.6</span><br><span class="line">0.8</span><br><span class="line">starting at position i, containing n elements: </span><br><span class="line">0.6</span><br><span class="line">0.8</span><br><span class="line">  1</span><br><span class="line">1.2</span><br></pre></td></tr></table></figure><h2 id="Array-类"><a href="#Array-类" class="headerlink" title="Array 类"></a>Array 类</h2><p>Matrix 和 Vector 定义了线性代数中的数学运算，但数学上的定义不能完全满足现实需求，例如，数学上没有定义一个矩阵和一个标量的加法运算。因此，Eigen 定义 Array 类来提供矩阵没能定义的操作，且 Array 和 Matrix 之间可以相互转换，所以相当于给矩阵提供了更多的方法。</p><p>Array 具有与 Matrix 相同的类模板参数：<code>Eigen::Array&lt; Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_ &gt;</code></p><p>Array 定义的一些常用的类型：</p><ul><li>typedef Array&lt;float, Dynamic, 1&gt; ArrayXf</li><li>typedef Array&lt;float, 3, 1&gt; Array3f</li><li>typedef Array&lt;double, Dynamic, Dynamic&gt; ArrayXXd</li><li>typedef Array&lt;double, 3, 3&gt; Array33d</li></ul><h3 id="Array-运算"><a href="#Array-运算" class="headerlink" title="Array 运算"></a>Array 运算</h3><p>Array 很多运算和矩阵类似，这里主要列举与 Matrix 不同的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Eigen::Matrix2f mat1, mat2;</span><br><span class="line">mat1 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line">mat2 &lt;&lt; <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>;</span><br><span class="line">Eigen::Array22f arr1, arr2;</span><br><span class="line">arr1 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line">arr2 &lt;&lt; <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Array +-/ scalar ==&gt; 所有元素都 +-/ scalar</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;arr1 - 1.5 = \n&quot;</span> &lt;&lt; arr1 - <span class="number">1.5</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix * Matrix 前矩阵列数=后矩阵行数 数学意义上的相乘</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat1 * mat2 \n&quot;</span> &lt;&lt; mat1 * mat2 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//Array * Array 前矩阵行列数=后矩阵行列数 对应位置相乘</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;arr1 * arr2 \n&quot;</span> &lt;&lt; arr1 * arr2 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//Matrix.cwiseProduct()实现了Matrix的点乘</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat1.cwiseProduct(mat2) \n&quot;</span> &lt;&lt; mat1.<span class="built_in">cwiseProduct</span>(mat2) &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素级操作</span></span><br><span class="line">Eigen::ArrayXf arr3 = Eigen::ArrayXf::<span class="built_in">Random</span>(<span class="number">3</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;arr3 = \n&quot;</span> &lt;&lt; arr3 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;arr3.abs() = \n&quot;</span> &lt;&lt; arr3.<span class="built_in">abs</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;arr3.abs().sqrt() = \n&quot;</span> &lt;&lt; arr3.<span class="built_in">abs</span>().<span class="built_in">sqrt</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//两个Array对应位置最小值组成的Array</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;arr3.min(arr3.abs().sqrt()) = \n&quot;</span> &lt;&lt; arr3.<span class="built_in">min</span>(arr3.<span class="built_in">abs</span>().<span class="built_in">sqrt</span>()) &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔规约</span></span><br><span class="line"><span class="function">Eigen::ArrayXXf <span class="title">d</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">d &lt;&lt; <span class="number">1.2</span>, <span class="number">-2</span>, <span class="number">3.2</span>, <span class="number">-4.5</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;(d &gt; 0).all() = &quot;</span> &lt;&lt; (d &gt; <span class="number">0</span>).<span class="built_in">all</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;(d &gt; 0).any() = &quot;</span> &lt;&lt; (d &gt; <span class="number">0</span>).<span class="built_in">any</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;(d &gt; 0).count() = &quot;</span> &lt;&lt; (d &gt; <span class="number">0</span>).<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">arr1 - 1.5 = </span><br><span class="line">-0.5  0.5</span><br><span class="line"> 1.5  2.5</span><br><span class="line"></span><br><span class="line">mat1 * mat2 </span><br><span class="line">11  8</span><br><span class="line">27 20</span><br><span class="line">arr1 * arr2 </span><br><span class="line">5 8</span><br><span class="line">9 8</span><br><span class="line">mat1.cwiseProduct(mat2) </span><br><span class="line">5 8</span><br><span class="line">9 8</span><br><span class="line"></span><br><span class="line">arr3 = </span><br><span class="line"> 0.680375</span><br><span class="line">-0.211234</span><br><span class="line"> 0.566198</span><br><span class="line">arr3.abs() = </span><br><span class="line">0.680375</span><br><span class="line">0.211234</span><br><span class="line">0.566198</span><br><span class="line">arr3.abs().sqrt() = </span><br><span class="line">0.824849</span><br><span class="line">0.459602</span><br><span class="line">0.752462</span><br><span class="line">arr3.min(arr3.abs().sqrt()) = </span><br><span class="line"> 0.680375</span><br><span class="line">-0.211234</span><br><span class="line"> 0.566198</span><br><span class="line"></span><br><span class="line">(d &gt; 0).all() = 0</span><br><span class="line">(d &gt; 0).any() = 1</span><br><span class="line">(d &gt; 0).count() = 2</span><br></pre></td></tr></table></figure><h3 id="Array-和-Matrix-转换"><a href="#Array-和-Matrix-转换" class="headerlink" title="Array 和 Matrix 转换"></a>Array 和 Matrix 转换</h3><p>Array.matrix() 用于将Array转换为Matrix；Matrix.array() 用于将Matrix转换为Array；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Eigen::Matrix3f mat1;</span><br><span class="line">Eigen::Matrix3f mat2;</span><br><span class="line">Eigen::Array33f arr1 = Eigen::Array33f::<span class="built_in">Random</span>();</span><br><span class="line">Eigen::Array33f arr2 = Eigen::Array33f::<span class="built_in">Random</span>();</span><br><span class="line"></span><br><span class="line">mat1 = arr1 + arr2; <span class="comment">//隐式类型转换</span></span><br><span class="line"><span class="comment">// mat1 = arr1 + mat1; //禁止Array和Matrix混用</span></span><br><span class="line">mat2 = mat1 - arr1.<span class="built_in">matrix</span>(); <span class="comment">//显示类型转换</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat1 = \n&quot;</span> &lt;&lt; mat1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat2 = \n&quot;</span> &lt;&lt; mat2 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//令mat1所有元素加1</span></span><br><span class="line">mat1 = mat1.<span class="built_in">array</span>() + <span class="number">1</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;mat1 = \n&quot;</span> &lt;&lt; mat1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mat1 = </span><br><span class="line">   0.788315    0.326449    0.502836</span><br><span class="line">   -0.25644    0.850097    0.807883</span><br><span class="line">    0.82394    0.299562 -0.00985664</span><br><span class="line">mat2 = </span><br><span class="line">   0.10794  -0.270431    0.83239</span><br><span class="line">-0.0452059  0.0268018   0.271423</span><br><span class="line">  0.257742   0.904459   0.434594</span><br><span class="line"></span><br><span class="line">mat1 = </span><br><span class="line"> 1.78832  1.32645  1.50284</span><br><span class="line"> 0.74356   1.8501  1.80788</span><br><span class="line"> 1.82394  1.29956 0.990143</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业8</title>
      <link href="/2022/11/19/GAMES101-%E4%BD%9C%E4%B8%9A8/"/>
      <url>/2022/11/19/GAMES101-%E4%BD%9C%E4%B8%9A8/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>实现一个简单的质点弹簧系统。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">sudo apt install libglu1-mesa-dev freeglut3-dev mesa-common-dev</span><br><span class="line">sudo apt install xorg-dev</span><br></pre></td></tr></table></figure><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>参考 <a href="https://blog.csdn.net/weixin_44491423/article/details/127522750">games101 作业8</a> </p><p>1、实现 Rope 类的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Rope::<span class="built_in">Rope</span>(Vector2D start, Vector2D end, <span class="type">int</span> num_nodes, <span class="type">float</span> node_mass, <span class="type">float</span> k, vector&lt;<span class="type">int</span>&gt; pinned_nodes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// TODO (Part 1): Create a rope starting at `start`, ending at `end`, and containing `num_nodes` nodes.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_nodes; ++i) &#123;</span><br><span class="line">        Vector2D pos = start + (end - start) * <span class="built_in">float</span>(i) / (num_nodes - <span class="number">1</span>);</span><br><span class="line">        masses.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Mass</span>(pos, node_mass, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_nodes - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        springs.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Spring</span>(masses[i], masses[i + <span class="number">1</span>], k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Comment-in this part when you implement the constructor</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : pinned_nodes) &#123;</span><br><span class="line">        masses[i]-&gt;pinned = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行可以看到屏幕上画出绳子，但它不发生运动：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work8_rope.png"></p><p>2、显式&#x2F;半隐式欧拉法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Application::init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Enable anti-aliasing and circular points.</span></span><br><span class="line">  <span class="built_in">glEnable</span>(GL_LINE_SMOOTH);</span><br><span class="line">  <span class="built_in">glEnable</span>(GL_POLYGON_SMOOTH);</span><br><span class="line">  <span class="built_in">glEnable</span>(GL_POINT_SMOOTH);</span><br><span class="line">  <span class="built_in">glHint</span>(GL_LINE_SMOOTH_HINT, GL_NICEST);</span><br><span class="line">  <span class="built_in">glHint</span>(GL_POLYGON_SMOOTH_HINT, GL_NICEST);</span><br><span class="line">  <span class="built_in">glHint</span>(GL_POINT_SMOOTH_HINT, GL_NICEST);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">glPointSize</span>(<span class="number">8</span>);</span><br><span class="line">  <span class="built_in">glLineWidth</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">glColor3f</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">  <span class="comment">// Create two ropes </span></span><br><span class="line">  <span class="comment">// 使用16个结点</span></span><br><span class="line">  ropeEuler = <span class="keyword">new</span> <span class="built_in">Rope</span>(<span class="built_in">Vector2D</span>(<span class="number">0</span>, <span class="number">200</span>), <span class="built_in">Vector2D</span>(<span class="number">-400</span>, <span class="number">200</span>), <span class="number">16</span>, config.mass,</span><br><span class="line">                       config.ks, &#123;<span class="number">0</span>&#125;);</span><br><span class="line">  ropeVerlet = <span class="keyword">new</span> <span class="built_in">Rope</span>(<span class="built_in">Vector2D</span>(<span class="number">0</span>, <span class="number">200</span>), <span class="built_in">Vector2D</span>(<span class="number">-400</span>, <span class="number">200</span>), <span class="number">16</span>, config.mass,</span><br><span class="line">                        config.ks, &#123;<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rope::simulateEuler</span><span class="params">(<span class="type">float</span> <span class="type">delta_t</span>, Vector2D gravity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : springs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO (Part 2): Use Hooke&#x27;s law to calculate the force on a node</span></span><br><span class="line">        <span class="keyword">auto</span> len = (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position).<span class="built_in">norm</span>();</span><br><span class="line">        <span class="keyword">auto</span> add_len = len - s-&gt;rest_length;</span><br><span class="line">        s-&gt;m1-&gt;forces += -s-&gt;k * (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position) / len * add_len;</span><br><span class="line">        s-&gt;m2-&gt;forces += -s-&gt;k * (s-&gt;m2-&gt;position - s-&gt;m1-&gt;position) / len * add_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;m : masses)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m-&gt;pinned)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO (Part 2): Add the force due to gravity, then compute the new velocity and position</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">auto</span> a = m-&gt;forces / m-&gt;mass + gravity; <span class="comment">//加速度</span></span><br><span class="line">            <span class="comment">//显式欧拉法 使用当前帧的速度和位置计算下一帧的位置和速度</span></span><br><span class="line">            <span class="comment">// m-&gt;position += m-&gt;velocity * delta_t;</span></span><br><span class="line">            <span class="comment">// m-&gt;velocity += a * delta_t;</span></span><br><span class="line">            <span class="comment">//半隐式欧拉法 使用当前帧的速度计算下一帧的速度，使用下一帧的速度计算下一帧的位置</span></span><br><span class="line">            m-&gt;velocity += a * <span class="type">delta_t</span>;</span><br><span class="line">            m-&gt;position += m-&gt;velocity * <span class="type">delta_t</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO (Part 2): Add global damping</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset all forces on each mass</span></span><br><span class="line">        m-&gt;forces = <span class="built_in">Vector2D</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行显示欧拉，蓝色绳子会飞出去；执行半隐式欧拉的结果如下图，蓝色绳子在一直跳跃；使用 .&#x2F;ropesim -s 32 来设置仿真中每帧的仿真步数，可以发现使用更大的步数，绳子更容易趋于稳定。</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work8_euler.png"></p><p>3、显式 Verlet，添加阻尼</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rope::simulateVerlet</span><span class="params">(<span class="type">float</span> <span class="type">delta_t</span>, Vector2D gravity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : springs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO (Part 3): Simulate one timestep of the rope using explicit Verlet （solving constraints)</span></span><br><span class="line">        <span class="keyword">auto</span> len = (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position).<span class="built_in">norm</span>();</span><br><span class="line">        <span class="keyword">auto</span> add_len = len - s-&gt;rest_length;</span><br><span class="line">        s-&gt;m1-&gt;forces += -s-&gt;k * (s-&gt;m1-&gt;position - s-&gt;m2-&gt;position) / len * add_len;</span><br><span class="line">        s-&gt;m2-&gt;forces += -s-&gt;k * (s-&gt;m2-&gt;position - s-&gt;m1-&gt;position) / len * add_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;m : masses)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m-&gt;pinned)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector2D temp_position = m-&gt;position;</span><br><span class="line">            <span class="comment">// TODO (Part 3.1): Set the new position of the rope mass</span></span><br><span class="line">            <span class="keyword">auto</span> a = m-&gt;forces / m-&gt;mass + gravity;</span><br><span class="line">            m-&gt;position = temp_position + (<span class="number">1</span> - <span class="number">0.00005</span>) * (temp_position - m-&gt;last_position) + a * <span class="type">delta_t</span> * <span class="type">delta_t</span>;</span><br><span class="line">            m-&gt;last_position = temp_position;</span><br><span class="line">            <span class="comment">// TODO (Part 4): Add global Verlet damping</span></span><br><span class="line">        &#125;</span><br><span class="line">        m-&gt;forces = <span class="built_in">Vector2D</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于能量守恒，添加阻尼后绿色绳子会逐渐静止：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work8_verlet.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业7</title>
      <link href="/2022/11/14/GAMES101-%E4%BD%9C%E4%B8%9A7/"/>
      <url>/2022/11/14/GAMES101-%E4%BD%9C%E4%B8%9A7/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>在本次实验中，你只需要修改这一个函数：</p><ul><li>castRay(const Ray ray, int depth) in Scene.cpp: 在其中实现 Path Tracing 算法</li></ul><p>可能用到的函数有：</p><ul><li>intersect(const Ray ray) in Scene.cpp: 求一条光线与场景的交点</li><li>sampleLight(Intersection pos, float pdf) in Scene.cpp: 在场景的所有光源上按面积 uniform 地 sample 一个点，并计算该 sample 的概率密度</li><li>sample(const Vector3f wi, const Vector3f N) in Material.cpp: 按照该材质的性质，给定入射方向与法向量，用某种分布采样一个出射方向</li><li>pdf(const Vector3f wi, const Vector3f wo, const Vector3f N) in Material.cpp: 给定一对入射、出射方向与法向量，计算 sample 方法得到该出射方向的概率密度</li><li>eval(const Vector3f wi, const Vector3f wo, const Vector3f N) in Material.cpp: 给定一对入射、出射方向与法向量，计算这种情况下的 f_r 值</li></ul><p>可能用到的变量有：</p><ul><li>RussianRoulette in Scene.cpp: P_RR, Russian Roulette 的概率</li></ul><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>参考 <a href="https://blog.csdn.net/Q_pril/article/details/124206795?spm=1001.2014.3001.5502">Games101：作业7（含提高部分）</a>  <a href="https://blog.csdn.net/weixin_44518102/article/details/122698851?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9.pc_relevant_default&utm_relevant_index=12">Games101,作业7（微表面模型）</a> </p><p>1、Scene::castRay() in Scene.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implementation of Path Tracing</span></span><br><span class="line"><span class="function">Vector3f <span class="title">Scene::castRay</span><span class="params">(<span class="type">const</span> Ray &amp;ray, <span class="type">int</span> depth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TO DO Implement Path Tracing Algorithm here</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从像素打出的光与物体求交</span></span><br><span class="line">    Intersection inter = <span class="built_in">intersect</span>(ray);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没有交点</span></span><br><span class="line">    <span class="keyword">if</span> (!inter.happened)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector3f</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打到光源</span></span><br><span class="line">    <span class="keyword">if</span> (inter.m-&gt;<span class="built_in">hasEmission</span>())</span><br><span class="line">        <span class="keyword">return</span> inter.m-&gt;<span class="built_in">getEmission</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打到物体</span></span><br><span class="line">    Vector3f p = inter.coords;</span><br><span class="line">    Material* m = inter.m;</span><br><span class="line">    Vector3f N = inter.normal;</span><br><span class="line">    Vector3f wo = ray.direction;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.光源采样</span></span><br><span class="line">    Vector3f L_dir;</span><br><span class="line">    Intersection inter_l;</span><br><span class="line">    <span class="type">float</span> pdf_l;</span><br><span class="line">    <span class="comment">//获取光源位置和对光源采样的pdf</span></span><br><span class="line">    <span class="built_in">sampleLight</span>(inter_l, pdf_l);</span><br><span class="line"></span><br><span class="line">    Vector3f x = inter_l.coords;</span><br><span class="line">    Vector3f ws = (x - p).<span class="built_in">normalized</span>();</span><br><span class="line">    Vector3f NN = inter_l.normal.<span class="built_in">normalized</span>();</span><br><span class="line">    Vector3f emit = inter_l.emit;</span><br><span class="line">    <span class="type">float</span> dis = (x - p).<span class="built_in">norm</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断光源与物体间是否有遮挡</span></span><br><span class="line">    <span class="function">Ray <span class="title">obj2Light</span><span class="params">(p, ws)</span></span>;</span><br><span class="line">    <span class="type">float</span> dis2 = <span class="built_in">intersect</span>(obj2Light).distance;</span><br><span class="line">    <span class="keyword">if</span> (dis - dis2 &lt; EPSILON) &#123;</span><br><span class="line">        L_dir = emit * m-&gt;<span class="built_in">eval</span>(wo, ws, N) * <span class="built_in">dotProduct</span>(N, ws) * <span class="built_in">dotProduct</span>(NN, -ws) / <span class="built_in">pow</span>(dis, <span class="number">2</span>) / pdf_l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.环境光采样</span></span><br><span class="line">    Vector3f L_indir;</span><br><span class="line">    <span class="comment">//俄罗斯轮盘赌</span></span><br><span class="line">    <span class="type">float</span> P_RR = <span class="built_in">get_random_float</span>();</span><br><span class="line">    <span class="keyword">if</span> (P_RR &lt; RussianRoulette) &#123;</span><br><span class="line">        Vector3f wi = m-&gt;<span class="built_in">sample</span>(wo, N).<span class="built_in">normalized</span>();</span><br><span class="line">        <span class="function">Ray <span class="title">r</span><span class="params">(p, wi)</span></span>;</span><br><span class="line">        Intersection inter_r = <span class="built_in">intersect</span>(r);</span><br><span class="line">        <span class="comment">//打到非光源物体</span></span><br><span class="line">        <span class="keyword">if</span> (inter.happened &amp;&amp; !inter.m-&gt;<span class="built_in">hasEmission</span>()) &#123;</span><br><span class="line">            L_indir = <span class="built_in">castRay</span>(r, depth + <span class="number">1</span>) * m-&gt;<span class="built_in">eval</span>(wo, wi, N) * <span class="built_in">dotProduct</span>(N, wi) / m-&gt;<span class="built_in">pdf</span>(wo, wi, N) / RussianRoulette;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L_dir + L_indir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work7_res.png"></p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work7_thread_1.png"></p><p>2、多线程加速</p><p>Renderer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Scene.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Renderer.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">float</span> <span class="title">deg2rad</span><span class="params">(<span class="type">const</span> <span class="type">float</span>&amp; deg)</span> </span>&#123; <span class="keyword">return</span> deg * M_PI / <span class="number">180.0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> EPSILON = <span class="number">0.0001</span>;</span><br><span class="line">std::atomic_int progress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The main render function. This where we iterate over all pixels in the image,</span></span><br><span class="line"><span class="comment">// generate primary rays and cast these rays into the scene. The content of the</span></span><br><span class="line"><span class="comment">// framebuffer is saved to a file.</span></span><br><span class="line"><span class="comment">// void Renderer::Render(const Scene&amp; scene)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     std::vector&lt;Vector3f&gt; framebuffer(scene.width * scene.height);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     float scale = tan(deg2rad(scene.fov * 0.5));</span></span><br><span class="line"><span class="comment">//     float imageAspectRatio = scene.width / (float)scene.height;</span></span><br><span class="line"><span class="comment">//     Vector3f eye_pos(278, 273, -800);</span></span><br><span class="line"><span class="comment">//     int m = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // change the spp value to change sample ammount</span></span><br><span class="line"><span class="comment">//     int spp = 16;</span></span><br><span class="line"><span class="comment">//     std::cout &lt;&lt; &quot;scene width: &quot; &lt;&lt; scene.width &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//     std::cout &lt;&lt; &quot;scene height: &quot; &lt;&lt; scene.height &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//     std::cout &lt;&lt; &quot;SPP: &quot; &lt;&lt; spp &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//     for (uint32_t j = 0; j &lt; scene.height; ++j) &#123;</span></span><br><span class="line"><span class="comment">//         for (uint32_t i = 0; i &lt; scene.width; ++i) &#123;</span></span><br><span class="line"><span class="comment">//             // generate primary ray direction</span></span><br><span class="line"><span class="comment">//             float x = (2 * (i + 0.5) / (float)scene.width - 1) *</span></span><br><span class="line"><span class="comment">//                       imageAspectRatio * scale;</span></span><br><span class="line"><span class="comment">//             float y = (1 - 2 * (j + 0.5) / (float)scene.height) * scale;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             Vector3f dir = normalize(Vector3f(-x, y, 1));</span></span><br><span class="line"><span class="comment">//             for (int k = 0; k &lt; spp; k++)&#123;</span></span><br><span class="line"><span class="comment">//                 framebuffer[m] += scene.castRay(Ray(eye_pos, dir), 0) / spp;  </span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             m++;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         UpdateProgress(j / (float)scene.height);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     UpdateProgress(1.f);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // save framebuffer to file</span></span><br><span class="line"><span class="comment">//     FILE* fp = fopen(&quot;binary.ppm&quot;, &quot;wb&quot;);</span></span><br><span class="line"><span class="comment">//     (void)fprintf(fp, &quot;P6\n%d %d\n255\n&quot;, scene.width, scene.height);</span></span><br><span class="line"><span class="comment">//     for (auto i = 0; i &lt; scene.height * scene.width; ++i) &#123;</span></span><br><span class="line"><span class="comment">//         static unsigned char color[3];</span></span><br><span class="line"><span class="comment">//         color[0] = (unsigned char)(255 * std::pow(clamp(0, 1, framebuffer[i].x), 0.6f));</span></span><br><span class="line"><span class="comment">//         color[1] = (unsigned char)(255 * std::pow(clamp(0, 1, framebuffer[i].y), 0.6f));</span></span><br><span class="line"><span class="comment">//         color[2] = (unsigned char)(255 * std::pow(clamp(0, 1, framebuffer[i].z), 0.6f));</span></span><br><span class="line"><span class="comment">//         fwrite(color, 1, 3, fp);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     fclose(fp);  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多线程版本</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Renderer::Render</span><span class="params">(<span class="type">const</span> Scene&amp; scene)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;Vector3f&gt; <span class="title">framebuffer</span><span class="params">(scene.width * scene.height)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> scale = <span class="built_in">tan</span>(<span class="built_in">deg2rad</span>(scene.fov * <span class="number">0.5</span>));</span><br><span class="line">    <span class="type">float</span> imageAspectRatio = scene.width / (<span class="type">float</span>)scene.height;</span><br><span class="line">    <span class="function">Vector3f <span class="title">eye_pos</span><span class="params">(<span class="number">278</span>, <span class="number">273</span>, <span class="number">-800</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change the spp value to change sample ammount</span></span><br><span class="line">    <span class="type">int</span> spp = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> threadNum = <span class="number">6</span>; <span class="comment">//线程数</span></span><br><span class="line">    <span class="type">int</span> per = scene.height / threadNum; <span class="comment">//按行分配线程</span></span><br><span class="line">    std::thread td[threadNum];</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;scene width: &quot;</span> &lt;&lt; scene.width &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;scene height: &quot;</span> &lt;&lt; scene.height &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;SPP: &quot;</span> &lt;&lt; spp &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;thread number: &quot;</span> &lt;&lt; threadNum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> threadFuc = [&amp;](<span class="type">uint32_t</span> row1, <span class="type">uint32_t</span> row2)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint32_t</span> j = row1; j &lt; row2; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; scene.width; ++i) &#123;</span><br><span class="line">                <span class="comment">// generate primary ray direction</span></span><br><span class="line">                <span class="type">float</span> x = (<span class="number">2</span> * (i + <span class="number">0.5</span>) / (<span class="type">float</span>)scene.width - <span class="number">1</span>) *</span><br><span class="line">                        imageAspectRatio * scale;</span><br><span class="line">                <span class="type">float</span> y = (<span class="number">1</span> - <span class="number">2</span> * (j + <span class="number">0.5</span>) / (<span class="type">float</span>)scene.height) * scale;</span><br><span class="line"></span><br><span class="line">                Vector3f dir = <span class="built_in">normalize</span>(<span class="built_in">Vector3f</span>(-x, y, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; spp; k++)&#123;</span><br><span class="line">                    framebuffer[i + j * scene.width] += scene.<span class="built_in">castRay</span>(<span class="built_in">Ray</span>(eye_pos, dir), <span class="number">0</span>) / spp;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            progress += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">UpdateProgress</span>(progress / (<span class="type">float</span>)scene.height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadNum; ++i) &#123;</span><br><span class="line">        td[i] = std::<span class="built_in">thread</span>(threadFuc, per * i, per * (i + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadNum; ++i) &#123;</span><br><span class="line">        td[i].<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UpdateProgress</span>(<span class="number">1.f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save framebuffer to file</span></span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;binary.ppm&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    (<span class="type">void</span>)<span class="built_in">fprintf</span>(fp, <span class="string">&quot;P6\n%d %d\n255\n&quot;</span>, scene.width, scene.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; scene.height * scene.width; ++i) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> color[<span class="number">3</span>];</span><br><span class="line">        color[<span class="number">0</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">255</span> * std::<span class="built_in">pow</span>(<span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].x), <span class="number">0.6f</span>));</span><br><span class="line">        color[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">255</span> * std::<span class="built_in">pow</span>(<span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].y), <span class="number">0.6f</span>));</span><br><span class="line">        color[<span class="number">2</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">255</span> * std::<span class="built_in">pow</span>(<span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].z), <span class="number">0.6f</span>));</span><br><span class="line">        <span class="built_in">fwrite</span>(color, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(RayTracing)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Threads) <span class="comment"># 引入外部依赖包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(RayTracing main.cpp Object.hpp Vector.cpp Vector.hpp Sphere.hpp global.hpp Triangle.hpp Scene.cpp</span><br><span class="line">        Scene.hpp Light.hpp AreaLight.hpp BVH.cpp BVH.hpp Bounds3.hpp Ray.hpp Material.hpp Intersection.hpp</span><br><span class="line">        Renderer.cpp Renderer.hpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;CMAKE_THREAD_LIBS_INIT&#125;</span>) <span class="comment"># 链接 Thread 库</span></span><br></pre></td></tr></table></figure><p>因为我的虚拟机处理器设置的是6核，这里使用6线程测试，渲染时间明显缩短</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work7_thread_6.png"></p><p>3、Microfacet 材质</p><p>Material.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RAYTRACING_MATERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RAYTRACING_MATERIAL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Vector.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MaterialType</span> &#123; DIFFUSE, Microfacet &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Material</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//法线分布函数 D</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">DistributionGGX</span><span class="params">(Vector3f N, Vector3f H, <span class="type">float</span> roughness)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> a = roughness * roughness;</span><br><span class="line">        <span class="type">float</span> a2 = a * a;</span><br><span class="line">        <span class="type">float</span> NdotH = std::<span class="built_in">max</span>(<span class="built_in">dotProduct</span>(N, H), <span class="number">0.0f</span>);</span><br><span class="line">        <span class="type">float</span> NdotH2 = NdotH * NdotH;</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> nom = a2;</span><br><span class="line">        <span class="type">float</span> denom = (NdotH2 * (a2 - <span class="number">1.0</span>) + <span class="number">1.0</span>);</span><br><span class="line">        denom = M_PI * denom * denom;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nom / std::<span class="built_in">max</span>(denom, <span class="number">0.0000001f</span>); <span class="comment">// prevent divide by zero for roughness=0.0 and NdotH=1.0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">GeometrySchlickGGX</span><span class="params">(<span class="type">float</span> NdotV, <span class="type">float</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> nom = NdotV;</span><br><span class="line">        <span class="type">float</span> denom = NdotV * (<span class="number">1.0</span> - k) + k;</span><br><span class="line">        <span class="keyword">return</span> nom / denom;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//几何函数 G</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">GeometrySmith</span><span class="params">(Vector3f N, Vector3f V, Vector3f L, <span class="type">float</span> roughness)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> r = (roughness + <span class="number">1.0</span>);</span><br><span class="line">        <span class="type">float</span> k = (r * r) / <span class="number">8.0</span>;</span><br><span class="line">        <span class="type">float</span> NdotV = std::<span class="built_in">max</span>(<span class="built_in">dotProduct</span>(N, V), <span class="number">0.0f</span>);</span><br><span class="line">        <span class="type">float</span> NdotL = std::<span class="built_in">max</span>(<span class="built_in">dotProduct</span>(N, L), <span class="number">0.0f</span>);</span><br><span class="line">        <span class="type">float</span> ggx2 = <span class="built_in">GeometrySchlickGGX</span>(NdotV, k);</span><br><span class="line">        <span class="type">float</span> ggx1 = <span class="built_in">GeometrySchlickGGX</span>(NdotL, k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ggx1 * ggx2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute reflection direction</span></span><br><span class="line">    <span class="function">Vector3f <span class="title">reflect</span><span class="params">(<span class="type">const</span> Vector3f &amp;I, <span class="type">const</span> Vector3f &amp;N)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> I - <span class="number">2</span> * <span class="built_in">dotProduct</span>(I, N) * N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute refraction direction using Snell&#x27;s law</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// We need to handle with care the two possible situations:</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    - When the ray is inside the object</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    - When the ray is outside.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the ray is outside, you need to make cosi positive cosi = -N.I</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the ray is inside, you need to invert the refractive indices and negate the normal N</span></span><br><span class="line">    <span class="function">Vector3f <span class="title">refract</span><span class="params">(<span class="type">const</span> Vector3f &amp;I, <span class="type">const</span> Vector3f &amp;N, <span class="type">const</span> <span class="type">float</span> &amp;ior)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> cosi = <span class="built_in">clamp</span>(<span class="number">-1</span>, <span class="number">1</span>, <span class="built_in">dotProduct</span>(I, N));</span><br><span class="line">        <span class="type">float</span> etai = <span class="number">1</span>, etat = ior;</span><br><span class="line">        Vector3f n = N;</span><br><span class="line">        <span class="keyword">if</span> (cosi &lt; <span class="number">0</span>) &#123; cosi = -cosi; &#125; <span class="keyword">else</span> &#123; std::<span class="built_in">swap</span>(etai, etat); n= -N; &#125;</span><br><span class="line">        <span class="type">float</span> eta = etai / etat;</span><br><span class="line">        <span class="type">float</span> k = <span class="number">1</span> - eta * eta * (<span class="number">1</span> - cosi * cosi);</span><br><span class="line">        <span class="keyword">return</span> k &lt; <span class="number">0</span> ? <span class="number">0</span> : eta * I + (eta * cosi - <span class="built_in">sqrtf</span>(k)) * n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute Fresnel equation</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// \param I is the incident view direction</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// \param N is the normal at the intersection point</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// \param ior is the material refractive index</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// \param[out] kr is the amount of light reflected</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fresnel</span><span class="params">(<span class="type">const</span> Vector3f &amp;I, <span class="type">const</span> Vector3f &amp;N, <span class="type">const</span> <span class="type">float</span> &amp;ior, <span class="type">float</span> &amp;kr)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> cosi = <span class="built_in">clamp</span>(<span class="number">-1</span>, <span class="number">1</span>, <span class="built_in">dotProduct</span>(I, N));</span><br><span class="line">        <span class="type">float</span> etai = <span class="number">1</span>, etat = ior;</span><br><span class="line">        <span class="keyword">if</span> (cosi &gt; <span class="number">0</span>) &#123;  std::<span class="built_in">swap</span>(etai, etat); &#125;</span><br><span class="line">        <span class="comment">// Compute sini using Snell&#x27;s law</span></span><br><span class="line">        <span class="type">float</span> sint = etai / etat * <span class="built_in">sqrtf</span>(std::<span class="built_in">max</span>(<span class="number">0.f</span>, <span class="number">1</span> - cosi * cosi));</span><br><span class="line">        <span class="comment">// Total internal reflection</span></span><br><span class="line">        <span class="keyword">if</span> (sint &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            kr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">float</span> cost = <span class="built_in">sqrtf</span>(std::<span class="built_in">max</span>(<span class="number">0.f</span>, <span class="number">1</span> - sint * sint));</span><br><span class="line">            cosi = <span class="built_in">fabsf</span>(cosi);</span><br><span class="line">            <span class="type">float</span> Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));</span><br><span class="line">            <span class="type">float</span> Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));</span><br><span class="line">            kr = (Rs * Rs + Rp * Rp) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// As a consequence of the conservation of energy, transmittance is given by:</span></span><br><span class="line">        <span class="comment">// kt = 1 - kr;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Vector3f <span class="title">toWorld</span><span class="params">(<span class="type">const</span> Vector3f &amp;a, <span class="type">const</span> Vector3f &amp;N)</span></span>&#123;</span><br><span class="line">        Vector3f B, C;</span><br><span class="line">        <span class="keyword">if</span> (std::<span class="built_in">fabs</span>(N.x) &gt; std::<span class="built_in">fabs</span>(N.y))&#123;</span><br><span class="line">            <span class="type">float</span> invLen = <span class="number">1.0f</span> / std::<span class="built_in">sqrt</span>(N.x * N.x + N.z * N.z);</span><br><span class="line">            C = <span class="built_in">Vector3f</span>(N.z * invLen, <span class="number">0.0f</span>, -N.x *invLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">float</span> invLen = <span class="number">1.0f</span> / std::<span class="built_in">sqrt</span>(N.y * N.y + N.z * N.z);</span><br><span class="line">            C = <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>, N.z * invLen, -N.y *invLen);</span><br><span class="line">        &#125;</span><br><span class="line">        B = <span class="built_in">crossProduct</span>(C, N);</span><br><span class="line">        <span class="keyword">return</span> a.x * B + a.y * C + a.z * N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MaterialType m_type;</span><br><span class="line">    <span class="comment">//Vector3f m_color;</span></span><br><span class="line">    Vector3f m_emission;</span><br><span class="line">    <span class="type">float</span> ior;</span><br><span class="line">    Vector3f Kd, Ks;</span><br><span class="line">    <span class="type">float</span> specularExponent;</span><br><span class="line">    <span class="comment">//Texture tex;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">Material</span><span class="params">(MaterialType t=DIFFUSE, Vector3f e=Vector3f(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> MaterialType <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//inline Vector3f getColor();</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Vector3f <span class="title">getColorAt</span><span class="params">(<span class="type">double</span> u, <span class="type">double</span> v)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Vector3f <span class="title">getEmission</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">hasEmission</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample a ray by Material properties</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Vector3f <span class="title">sample</span><span class="params">(<span class="type">const</span> Vector3f &amp;wi, <span class="type">const</span> Vector3f &amp;N)</span></span>;</span><br><span class="line">    <span class="comment">// given a ray, calculate the PdF of this ray</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">float</span> <span class="title">pdf</span><span class="params">(<span class="type">const</span> Vector3f &amp;wi, <span class="type">const</span> Vector3f &amp;wo, <span class="type">const</span> Vector3f &amp;N)</span></span>;</span><br><span class="line">    <span class="comment">// given a ray, calculate the contribution of this ray</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Vector3f <span class="title">eval</span><span class="params">(<span class="type">const</span> Vector3f &amp;wi, <span class="type">const</span> Vector3f &amp;wo, <span class="type">const</span> Vector3f &amp;N)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Material::<span class="built_in">Material</span>(MaterialType t, Vector3f e)&#123;</span><br><span class="line">    m_type = t;</span><br><span class="line">    <span class="comment">//m_color = c;</span></span><br><span class="line">    m_emission = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MaterialType <span class="title">Material::getType</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> m_type;&#125;</span><br><span class="line"><span class="comment">///Vector3f Material::getColor()&#123;return m_color;&#125;</span></span><br><span class="line"><span class="function">Vector3f <span class="title">Material::getEmission</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> m_emission;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Material::hasEmission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_emission.<span class="built_in">norm</span>() &gt; EPSILON) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector3f <span class="title">Material::getColorAt</span><span class="params">(<span class="type">double</span> u, <span class="type">double</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Vector3f</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Vector3f <span class="title">Material::sample</span><span class="params">(<span class="type">const</span> Vector3f &amp;wi, <span class="type">const</span> Vector3f &amp;N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(m_type)&#123;</span><br><span class="line">        <span class="keyword">case</span> DIFFUSE:</span><br><span class="line">        <span class="keyword">case</span> Microfacet:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// uniform sample on the hemisphere</span></span><br><span class="line">            <span class="type">float</span> x_1 = <span class="built_in">get_random_float</span>(), x_2 = <span class="built_in">get_random_float</span>();</span><br><span class="line">            <span class="type">float</span> z = std::<span class="built_in">fabs</span>(<span class="number">1.0f</span> - <span class="number">2.0f</span> * x_1);</span><br><span class="line">            <span class="type">float</span> r = std::<span class="built_in">sqrt</span>(<span class="number">1.0f</span> - z * z), phi = <span class="number">2</span> * M_PI * x_2;</span><br><span class="line">            <span class="function">Vector3f <span class="title">localRay</span><span class="params">(r*std::cos(phi), r*std::sin(phi), z)</span></span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">toWorld</span>(localRay, N);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Material::pdf</span><span class="params">(<span class="type">const</span> Vector3f &amp;wi, <span class="type">const</span> Vector3f &amp;wo, <span class="type">const</span> Vector3f &amp;N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(m_type)&#123;</span><br><span class="line">        <span class="keyword">case</span> DIFFUSE:</span><br><span class="line">        <span class="keyword">case</span> Microfacet:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// uniform sample probability 1 / (2 * PI)</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dotProduct</span>(wo, N) &gt; <span class="number">0.0f</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.5f</span> / M_PI;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector3f <span class="title">Material::eval</span><span class="params">(<span class="type">const</span> Vector3f &amp;wi, <span class="type">const</span> Vector3f &amp;wo, <span class="type">const</span> Vector3f &amp;N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(m_type)&#123;</span><br><span class="line">        <span class="keyword">case</span> DIFFUSE:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// calculate the contribution of diffuse   model</span></span><br><span class="line">            <span class="type">float</span> cosalpha = <span class="built_in">dotProduct</span>(N, wo);</span><br><span class="line">            <span class="keyword">if</span> (cosalpha &gt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">                Vector3f diffuse = Kd / M_PI;</span><br><span class="line">                <span class="keyword">return</span> diffuse;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Microfacet:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 微表面材质的BRDF</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Disney PBR 方案</span></span><br><span class="line">            <span class="type">float</span> cosalpha = <span class="built_in">dotProduct</span>(N, wo);</span><br><span class="line">            <span class="keyword">if</span> (cosalpha &gt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">                <span class="type">float</span> roughness = <span class="number">0.40</span>;</span><br><span class="line"></span><br><span class="line">                Vector3f V = -wi;</span><br><span class="line">                Vector3f L = wo;</span><br><span class="line">                Vector3f H = <span class="built_in">normalize</span>(V + L);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算 distribution of normals: D</span></span><br><span class="line">                <span class="type">float</span> D = <span class="built_in">DistributionGGX</span>(N, H, roughness);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算 shadowing masking term: G</span></span><br><span class="line">                <span class="type">float</span> G = <span class="built_in">GeometrySmith</span>(N, V, L, roughness);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算 fresnel 系数: F</span></span><br><span class="line">                <span class="type">float</span> F;</span><br><span class="line">                <span class="type">float</span> etat = <span class="number">1.85</span>;</span><br><span class="line">                <span class="built_in">fresnel</span>(wi, N, etat, F);</span><br><span class="line"></span><br><span class="line">                Vector3f nominator = D * G * F;</span><br><span class="line">                <span class="type">float</span> denominator = <span class="number">4</span> * std::<span class="built_in">max</span>(<span class="built_in">dotProduct</span>(N, V), <span class="number">0.0f</span>) * std::<span class="built_in">max</span>(<span class="built_in">dotProduct</span>(N, L), <span class="number">0.0f</span>);</span><br><span class="line">                Vector3f specular = nominator / std::<span class="built_in">max</span>(denominator, <span class="number">0.001f</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 能量守恒</span></span><br><span class="line">                <span class="type">float</span> ks_ = F;<span class="comment">//反射比率</span></span><br><span class="line">                <span class="type">float</span> kd_ = <span class="number">1.0f</span> - ks_;<span class="comment">//折射比率</span></span><br><span class="line"></span><br><span class="line">                Vector3f diffuse = <span class="number">1.0f</span> / M_PI;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 因为在 specular 项里已经考虑了反射部分的比例：F。所以反射部分不需要再乘以 ks_ </span></span><br><span class="line">                <span class="comment">//Ks为镜面反射项，Kd为漫反射项。</span></span><br><span class="line">                <span class="keyword">return</span> Ks * specular + kd_ * Kd * diffuse;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//RAYTRACING_MATERIAL_H</span></span></span><br></pre></td></tr></table></figure><p>getIntersection() in Sphere.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Intersection <span class="title">getIntersection</span><span class="params">(Ray ray)</span></span>&#123;</span><br><span class="line">    Intersection result;</span><br><span class="line">    result.happened = <span class="literal">false</span>;</span><br><span class="line">    Vector3f L = ray.origin - center;</span><br><span class="line">    <span class="type">float</span> a = <span class="built_in">dotProduct</span>(ray.direction, ray.direction);</span><br><span class="line">    <span class="type">float</span> b = <span class="number">2</span> * <span class="built_in">dotProduct</span>(ray.direction, L);</span><br><span class="line">    <span class="type">float</span> c = <span class="built_in">dotProduct</span>(L, L) - radius2;</span><br><span class="line">    <span class="type">float</span> t0, t1;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">solveQuadratic</span>(a, b, c, t0, t1)) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> (t0 &lt; <span class="number">0</span>) t0 = t1;</span><br><span class="line">    <span class="keyword">if</span> (t0 &lt; <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t0 &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        result.happened=<span class="literal">true</span>;</span><br><span class="line">        result.coords = <span class="built_in">Vector3f</span>(ray.origin + ray.direction * t0);</span><br><span class="line">        result.normal = <span class="built_in">normalize</span>(<span class="built_in">Vector3f</span>(result.coords - center));</span><br><span class="line">        result.m = <span class="keyword">this</span>-&gt;m;</span><br><span class="line">        result.obj = <span class="keyword">this</span>;</span><br><span class="line">        result.distance = t0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main() in main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change the definition here to change resolution</span></span><br><span class="line">    <span class="function">Scene <span class="title">scene</span><span class="params">(<span class="number">600</span>, <span class="number">600</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Material* red = <span class="keyword">new</span> <span class="built_in">Material</span>(DIFFUSE, <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>));</span><br><span class="line">    red-&gt;Kd = <span class="built_in">Vector3f</span>(<span class="number">0.63f</span>, <span class="number">0.065f</span>, <span class="number">0.05f</span>);</span><br><span class="line">    Material* green = <span class="keyword">new</span> <span class="built_in">Material</span>(DIFFUSE, <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>));</span><br><span class="line">    green-&gt;Kd = <span class="built_in">Vector3f</span>(<span class="number">0.14f</span>, <span class="number">0.45f</span>, <span class="number">0.091f</span>);</span><br><span class="line">    Material* white = <span class="keyword">new</span> <span class="built_in">Material</span>(DIFFUSE, <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>));</span><br><span class="line">    white-&gt;Kd = <span class="built_in">Vector3f</span>(<span class="number">0.725f</span>, <span class="number">0.71f</span>, <span class="number">0.68f</span>);</span><br><span class="line">    Material* light = <span class="keyword">new</span> <span class="built_in">Material</span>(DIFFUSE, (<span class="number">8.0f</span> * <span class="built_in">Vector3f</span>(<span class="number">0.747f</span>+<span class="number">0.058f</span>, <span class="number">0.747f</span>+<span class="number">0.258f</span>, <span class="number">0.747f</span>) + <span class="number">15.6f</span> * <span class="built_in">Vector3f</span>(<span class="number">0.740f</span>+<span class="number">0.287f</span>,<span class="number">0.740f</span>+<span class="number">0.160f</span>,<span class="number">0.740f</span>) + <span class="number">18.4f</span> *<span class="built_in">Vector3f</span>(<span class="number">0.737f</span>+<span class="number">0.642f</span>,<span class="number">0.737f</span>+<span class="number">0.159f</span>,<span class="number">0.737f</span>)));</span><br><span class="line">    light-&gt;Kd = <span class="built_in">Vector3f</span>(<span class="number">0.65f</span>);</span><br><span class="line"></span><br><span class="line">    Material* m = <span class="keyword">new</span> <span class="built_in">Material</span>(Microfacet, <span class="built_in">Vector3f</span>(<span class="number">0.0f</span>));</span><br><span class="line">m-&gt;Ks = <span class="built_in">Vector3f</span>(<span class="number">0.45</span>, <span class="number">0.45</span>, <span class="number">0.45</span>);</span><br><span class="line">m-&gt;Kd = <span class="built_in">Vector3f</span>(<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">0.25</span>);</span><br><span class="line"><span class="function">Sphere <span class="title">sphere</span><span class="params">(Vector3f(<span class="number">150</span>, <span class="number">100</span>, <span class="number">300</span>), <span class="number">100</span>, m)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MeshTriangle <span class="title">floor</span><span class="params">(<span class="string">&quot;../models/cornellbox/floor.obj&quot;</span>, white)</span></span>;</span><br><span class="line">    <span class="comment">// MeshTriangle shortbox(&quot;../models/cornellbox/shortbox.obj&quot;, white);</span></span><br><span class="line">    <span class="comment">// MeshTriangle tallbox(&quot;../models/cornellbox/tallbox.obj&quot;, white);</span></span><br><span class="line">    <span class="function">MeshTriangle <span class="title">left</span><span class="params">(<span class="string">&quot;../models/cornellbox/left.obj&quot;</span>, red)</span></span>;</span><br><span class="line">    <span class="function">MeshTriangle <span class="title">right</span><span class="params">(<span class="string">&quot;../models/cornellbox/right.obj&quot;</span>, green)</span></span>;</span><br><span class="line">    <span class="function">MeshTriangle <span class="title">light_</span><span class="params">(<span class="string">&quot;../models/cornellbox/light.obj&quot;</span>, light)</span></span>;</span><br><span class="line"></span><br><span class="line">    scene.<span class="built_in">Add</span>(&amp;sphere);</span><br><span class="line">    scene.<span class="built_in">Add</span>(&amp;floor);</span><br><span class="line">    <span class="comment">// scene.Add(&amp;shortbox);</span></span><br><span class="line">    <span class="comment">// scene.Add(&amp;tallbox);</span></span><br><span class="line">    scene.<span class="built_in">Add</span>(&amp;left);</span><br><span class="line">    scene.<span class="built_in">Add</span>(&amp;right);</span><br><span class="line">    scene.<span class="built_in">Add</span>(&amp;light_);</span><br><span class="line"></span><br><span class="line">    scene.<span class="built_in">buildBVH</span>();</span><br><span class="line"></span><br><span class="line">    Renderer r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> start = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    r.<span class="built_in">Render</span>(scene);</span><br><span class="line">    <span class="keyword">auto</span> stop = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Render complete: \n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Time taken: &quot;</span> &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::hours&gt;(stop - start).<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; hours\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;          : &quot;</span> &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::minutes&gt;(stop - start).<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; minutes\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;          : &quot;</span> &lt;&lt; std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::seconds&gt;(stop - start).<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; seconds\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work7_microfacet.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业6</title>
      <link href="/2022/11/13/GAMES101-%E4%BD%9C%E4%B8%9A6/"/>
      <url>/2022/11/13/GAMES101-%E4%BD%9C%E4%B8%9A6/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>在之前的编程练习中，我们实现了基础的光线追踪算法，具体而言是光线传输、光线与三角形求交。我们采用了这样的方法寻找光线与场景的交点：遍历场景中的所有物体，判断光线是否与它相交。在场景中的物体数量不大时，该做法可以取得良好的结果，但当物体数量增多、模型变得更加复杂，该做法将会变得非常低效。因此，我们需要加速结构来加速求交过程。在本次练习中，我们重点关注物体划分算法 Bounding Volume Hierarchy (BVH) 。本练习要求你实现 Ray-Bounding Volume 求交与 BVH 查找。</p><p>首先，你需要从上一次编程练习中引用以下函数：</p><ul><li>Render() in Renderer.cpp: 将你的光线生成过程粘贴到此处，并且按照新框架更新相应调用的格式。</li><li>Triangle::getIntersection() in Triangle.hpp: 将你的光线 -三角形相交函数粘贴到此处，并且按照新框架更新相应相交信息的格式。</li></ul><p>在本次编程练习中，你需要实现以下函数：</p><ul><li>IntersectP(const Ray&amp; ray, const Vector3f&amp; invDir, const std::array&lt;int, 3&gt;&amp; dirIsNeg) in the Bounds3.hpp: 这个函数的作用是判断包围盒 BoundingBox 与光线是否相交，你需要按照课程介绍的算法实现求交过程。</li><li>getIntersection(BVHBuildNode* node, const Ray ray) in BVH.cpp: 建立 BVH 之后，我们可以用它加速求交过程。该过程递归进行，你将在其中调用你实现的 Bounds3::IntersectP。</li></ul><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>参考 <a href="https://blog.csdn.net/Q_pril/article/details/124054123?spm=1001.2014.3001.5502">Games101：作业6解析（含提高部分SAH）</a> </p><p>1、Render() in Renderer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Renderer::Render</span><span class="params">(<span class="type">const</span> Scene&amp; scene)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;Vector3f&gt; <span class="title">framebuffer</span><span class="params">(scene.width * scene.height)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> scale = <span class="built_in">tan</span>(<span class="built_in">deg2rad</span>(scene.fov * <span class="number">0.5</span>));</span><br><span class="line">    <span class="type">float</span> imageAspectRatio = scene.width / (<span class="type">float</span>)scene.height;</span><br><span class="line">    <span class="function">Vector3f <span class="title">eye_pos</span><span class="params">(<span class="number">-1</span>, <span class="number">5</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> j = <span class="number">0</span>; j &lt; scene.height; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; scene.width; ++i) &#123;</span><br><span class="line">            <span class="comment">// generate primary ray direction</span></span><br><span class="line">            <span class="type">float</span> x = (<span class="number">2</span> * (i + <span class="number">0.5</span>) / (<span class="type">float</span>)scene.width - <span class="number">1</span>) *</span><br><span class="line">                      imageAspectRatio * scale;</span><br><span class="line">            <span class="type">float</span> y = (<span class="number">1</span> - <span class="number">2</span> * (j + <span class="number">0.5</span>) / (<span class="type">float</span>)scene.height) * scale;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Find the x and y positions of the current pixel to get the</span></span><br><span class="line">            <span class="comment">// direction</span></span><br><span class="line">            <span class="comment">//  vector that passes through it.</span></span><br><span class="line">            <span class="comment">// Also, don&#x27;t forget to multiply both of them with the variable</span></span><br><span class="line">            <span class="comment">// *scale*, and x (horizontal) variable with the *imageAspectRatio*</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Don&#x27;t forget to normalize this direction!</span></span><br><span class="line">            Vector3f dir = <span class="built_in">normalize</span>(<span class="built_in">Vector3f</span>(x, y, <span class="number">-1</span>));</span><br><span class="line">            framebuffer[m++] = scene.<span class="built_in">castRay</span>(<span class="built_in">Ray</span>(eye_pos, dir, <span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">UpdateProgress</span>(j / (<span class="type">float</span>)scene.height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">UpdateProgress</span>(<span class="number">1.f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save framebuffer to file</span></span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;binary.ppm&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    (<span class="type">void</span>)<span class="built_in">fprintf</span>(fp, <span class="string">&quot;P6\n%d %d\n255\n&quot;</span>, scene.width, scene.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; scene.height * scene.width; ++i) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> color[<span class="number">3</span>];</span><br><span class="line">        color[<span class="number">0</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">255</span> * <span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].x));</span><br><span class="line">        color[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">255</span> * <span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].y));</span><br><span class="line">        color[<span class="number">2</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="number">255</span> * <span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].z));</span><br><span class="line">        <span class="built_in">fwrite</span>(color, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Triangle::getIntersection() in Triangle.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> Intersection <span class="title">Triangle::getIntersection</span><span class="params">(Ray ray)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Intersection inter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dotProduct</span>(ray.direction, normal) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    <span class="type">double</span> u, v, t_tmp = <span class="number">0</span>;</span><br><span class="line">    Vector3f pvec = <span class="built_in">crossProduct</span>(ray.direction, e2);</span><br><span class="line">    <span class="type">double</span> det = <span class="built_in">dotProduct</span>(e1, pvec);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(det) &lt; EPSILON)</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> det_inv = <span class="number">1.</span> / det;</span><br><span class="line">    Vector3f tvec = ray.origin - v0;</span><br><span class="line">    u = <span class="built_in">dotProduct</span>(tvec, pvec) * det_inv;</span><br><span class="line">    <span class="keyword">if</span> (u &lt; <span class="number">0</span> || u &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    Vector3f qvec = <span class="built_in">crossProduct</span>(tvec, e1);</span><br><span class="line">    v = <span class="built_in">dotProduct</span>(ray.direction, qvec) * det_inv;</span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span> || u + v &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    t_tmp = <span class="built_in">dotProduct</span>(e2, qvec) * det_inv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO find ray triangle intersection</span></span><br><span class="line">    <span class="keyword">if</span> (t_tmp &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    inter.happened = <span class="literal">true</span>;</span><br><span class="line">    inter.coords = <span class="built_in">ray</span>(t_tmp);</span><br><span class="line">    inter.normal = normal;</span><br><span class="line">    inter.distance = t_tmp;</span><br><span class="line">    inter.obj = <span class="keyword">this</span>;</span><br><span class="line">    inter.m = m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、IntersectP() in the Bounds3.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bounds3::IntersectP</span><span class="params">(<span class="type">const</span> Ray&amp; ray, <span class="type">const</span> Vector3f&amp; invDir,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">const</span> std::array&lt;<span class="type">int</span>, <span class="number">3</span>&gt;&amp; dirIsNeg)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// invDir: ray direction(x,y,z), invDir=(1.0/x,1.0/y,1.0/z), use this because Multiply is faster that Division</span></span><br><span class="line">    <span class="comment">// dirIsNeg: ray direction(x,y,z), dirIsNeg=[int(x&gt;0),int(y&gt;0),int(z&gt;0)], use this to simplify your logic</span></span><br><span class="line">    <span class="comment">// TODO test if ray bound intersects</span></span><br><span class="line">    <span class="type">float</span> t_x_min = (pMin.x - ray.origin.x) * invDir[<span class="number">0</span>];</span><br><span class="line">    <span class="type">float</span> t_x_max = (pMax.x - ray.origin.x) * invDir[<span class="number">0</span>];</span><br><span class="line">    <span class="type">float</span> t_y_min = (pMin.y - ray.origin.y) * invDir[<span class="number">1</span>];</span><br><span class="line">    <span class="type">float</span> t_y_max = (pMax.y - ray.origin.y) * invDir[<span class="number">1</span>];</span><br><span class="line">    <span class="type">float</span> t_z_min = (pMin.z - ray.origin.z) * invDir[<span class="number">2</span>];</span><br><span class="line">    <span class="type">float</span> t_z_max = (pMax.z - ray.origin.z) * invDir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dirIsNeg[<span class="number">0</span>]) std::<span class="built_in">swap</span>(t_x_min, t_x_max);</span><br><span class="line">    <span class="keyword">if</span> (dirIsNeg[<span class="number">1</span>]) std::<span class="built_in">swap</span>(t_y_min, t_y_max);</span><br><span class="line">    <span class="keyword">if</span> (dirIsNeg[<span class="number">2</span>]) std::<span class="built_in">swap</span>(t_z_min, t_z_max);</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> t_enter = std::<span class="built_in">max</span>(t_x_min, std::<span class="built_in">max</span>(t_y_min, t_z_min));</span><br><span class="line">    <span class="type">float</span> t_exit = std::<span class="built_in">min</span>(t_x_max, std::<span class="built_in">min</span>(t_y_max, t_z_max));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t_exit &gt;= t_enter &amp;&amp; t_exit &gt; <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、getIntersection() in BVH.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Intersection <span class="title">BVHAccel::getIntersection</span><span class="params">(BVHBuildNode* node, <span class="type">const</span> Ray&amp; ray)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO Traverse the BVH to find intersection</span></span><br><span class="line">    Intersection inter;</span><br><span class="line"></span><br><span class="line">    std::array&lt;<span class="type">int</span>, 3&gt; dirIsNeg;</span><br><span class="line">    dirIsNeg[<span class="number">0</span>] = ray.direction.x &lt; <span class="number">0</span>;</span><br><span class="line">    dirIsNeg[<span class="number">1</span>] = ray.direction.y &lt; <span class="number">0</span>;</span><br><span class="line">    dirIsNeg[<span class="number">2</span>] = ray.direction.z &lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有交点</span></span><br><span class="line">    <span class="keyword">if</span> (!node-&gt;bounds.<span class="built_in">IntersectP</span>(ray, ray.direction_inv, dirIsNeg))</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若是叶子节点，则求交</span></span><br><span class="line">    <span class="keyword">if</span> (!node-&gt;left &amp;&amp; !node-&gt;right)</span><br><span class="line">        <span class="keyword">return</span> node-&gt;object-&gt;<span class="built_in">getIntersection</span>(ray);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//否则，递归判断子节点</span></span><br><span class="line">    Intersection left = <span class="built_in">getIntersection</span>(node-&gt;left, ray);</span><br><span class="line">    Intersection right = <span class="built_in">getIntersection</span>(node-&gt;right, ray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left.distance &lt; right.distance ? left : right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、提高部分，实现 SAH 加速。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BVHBuildNode* <span class="title">BVHAccel::recursiveBuild</span><span class="params">(std::vector&lt;Object*&gt; objects)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BVHBuildNode* node = <span class="keyword">new</span> <span class="built_in">BVHBuildNode</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute bounds of all primitives in BVH node</span></span><br><span class="line">    Bounds3 bounds;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; objects.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        bounds = <span class="built_in">Union</span>(bounds, objects[i]-&gt;<span class="built_in">getBounds</span>());</span><br><span class="line">    <span class="keyword">if</span> (objects.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//物体数量为1，创建叶子节点</span></span><br><span class="line">        node-&gt;bounds = objects[<span class="number">0</span>]-&gt;<span class="built_in">getBounds</span>();</span><br><span class="line">        node-&gt;object = objects[<span class="number">0</span>];</span><br><span class="line">        node-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        node-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (objects.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//物体数量为2，将其分别存放在左右叶子节点中</span></span><br><span class="line">        node-&gt;left = <span class="built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="number">0</span>]&#125;);</span><br><span class="line">        node-&gt;right = <span class="built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="number">1</span>]&#125;);</span><br><span class="line"></span><br><span class="line">        node-&gt;bounds = <span class="built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Bounds3 centroidBounds; <span class="comment">//由所有物体包围盒的中心构建的包围盒</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; objects.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            centroidBounds =</span><br><span class="line">                <span class="built_in">Union</span>(centroidBounds, objects[i]-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>());</span><br><span class="line">        <span class="type">int</span> dim = centroidBounds.<span class="built_in">maxExtent</span>(); <span class="comment">//根据centroidBounds的最大维度对物体排序</span></span><br><span class="line">        <span class="keyword">switch</span> (dim) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            std::<span class="built_in">sort</span>(objects.<span class="built_in">begin</span>(), objects.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> f1, <span class="keyword">auto</span> f2) &#123;</span><br><span class="line">                <span class="keyword">return</span> f1-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().x &lt;</span><br><span class="line">                       f2-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().x;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            std::<span class="built_in">sort</span>(objects.<span class="built_in">begin</span>(), objects.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> f1, <span class="keyword">auto</span> f2) &#123;</span><br><span class="line">                <span class="keyword">return</span> f1-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().y &lt;</span><br><span class="line">                       f2-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().y;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            std::<span class="built_in">sort</span>(objects.<span class="built_in">begin</span>(), objects.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> f1, <span class="keyword">auto</span> f2) &#123;</span><br><span class="line">                <span class="keyword">return</span> f1-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().z &lt;</span><br><span class="line">                       f2-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>().z;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> beginning = objects.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="comment">//中点划分</span></span><br><span class="line">        <span class="comment">//包围盒之间可能有很多重叠，会造成后续求交冗余</span></span><br><span class="line">        <span class="keyword">auto</span> middling = objects.<span class="built_in">begin</span>() + (objects.<span class="built_in">size</span>() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">auto</span> ending = objects.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> SAH = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (SAH) &#123;</span><br><span class="line">            <span class="comment">//沿最大维度将空间均等的划分为若干个桶（Buckets）</span></span><br><span class="line">            <span class="comment">//寻找使求交代价最小的划分方法</span></span><br><span class="line">            <span class="comment">//此处为近似，并没有真正的将空间均等划分</span></span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> t_min = DBL_MAX;</span><br><span class="line">            <span class="type">int</span> bucketNum = <span class="number">10</span>; </span><br><span class="line">            <span class="type">int</span> cutIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bucketNum; ++i) &#123;</span><br><span class="line">                middling = objects.<span class="built_in">begin</span>() + objects.<span class="built_in">size</span>() * i / bucketNum;</span><br><span class="line">                <span class="keyword">auto</span> leftshapes = std::<span class="built_in">vector</span>&lt;Object*&gt;(beginning, middling);</span><br><span class="line">                <span class="keyword">auto</span> rightshapes = std::<span class="built_in">vector</span>&lt;Object*&gt;(middling, ending);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">assert</span>(objects.<span class="built_in">size</span>() == (leftshapes.<span class="built_in">size</span>() + rightshapes.<span class="built_in">size</span>()));</span><br><span class="line"></span><br><span class="line">                Bounds3 leftBounds, rightBounds;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; leftshapes.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                    leftBounds = <span class="built_in">Union</span>(leftBounds, leftshapes[j]-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; rightshapes.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                    rightBounds = <span class="built_in">Union</span>(rightBounds, rightshapes[j]-&gt;<span class="built_in">getBounds</span>().<span class="built_in">Centroid</span>());</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">double</span> leftS = leftBounds.<span class="built_in">SurfaceArea</span>();</span><br><span class="line">                <span class="type">double</span> rightS = rightBounds.<span class="built_in">SurfaceArea</span>();</span><br><span class="line">                <span class="type">double</span> S = centroidBounds.<span class="built_in">SurfaceArea</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">double</span> t = leftS / S * leftshapes.<span class="built_in">size</span>() + rightS / S * rightshapes.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t &lt; t_min) &#123;</span><br><span class="line">                    t_min = t;</span><br><span class="line">                    cutIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            middling = objects.<span class="built_in">begin</span>() + objects.<span class="built_in">size</span>() * cutIndex / bucketNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> leftshapes = std::<span class="built_in">vector</span>&lt;Object*&gt;(beginning, middling);</span><br><span class="line">        <span class="keyword">auto</span> rightshapes = std::<span class="built_in">vector</span>&lt;Object*&gt;(middling, ending);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">assert</span>(objects.<span class="built_in">size</span>() == (leftshapes.<span class="built_in">size</span>() + rightshapes.<span class="built_in">size</span>()));</span><br><span class="line"></span><br><span class="line">        node-&gt;left = <span class="built_in">recursiveBuild</span>(leftshapes);</span><br><span class="line">        node-&gt;right = <span class="built_in">recursiveBuild</span>(rightshapes);</span><br><span class="line"></span><br><span class="line">        node-&gt;bounds = <span class="built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终二叉树的每个叶子节点只存放一个物体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work6_res.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业5</title>
      <link href="/2022/11/12/GAMES101-%E4%BD%9C%E4%B8%9A5/"/>
      <url>/2022/11/12/GAMES101-%E4%BD%9C%E4%B8%9A5/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>在这部分的课程中，我们将专注于使用光线追踪来渲染图像。在光线追踪中最重要的操作之一就是找到光线与物体的交点。一旦找到光线与物体的交点，就可以执行着色并返回像素颜色。在这次作业中，我们需要实现两个部分：光线的生成和光线与三角的相交。本次代码框架的工作流程为：</p><ol><li>从 main 函数开始。我们定义场景的参数，添加物体（球体或三角形）到场景中，并设置其材质，然后将光源添加到场景中。</li><li>调用 Render(scene) 函数。在遍历所有像素的循环里，生成对应的光线并将返回的颜色保存在帧缓冲区（framebuffer）中。在渲染过程结束后，帧缓冲区中的信息将被保存为图像。</li><li>在生成像素对应的光线后，我们调用 CastRay 函数，该函数调用 trace 来查询光线与场景中最近的对象的交点。</li><li>然后，我们在此交点执行着色。我们设置了三种不同的着色情况，并且已经为你提供了代码。</li></ol><p>你需要修改的函数是：</p><ul><li>Renderer.cpp 中的 Render()：这里你需要为每个像素生成一条对应的光线，然后调用函数 castRay() 来得到颜色，最后将颜色存储在帧缓冲区的相应像素中。</li><li>Triangle.hpp 中的 rayTriangleIntersect() : v0, v1, v2 是三角形的三个顶点， orig 是光线的起点， dir 是光线单位化的方向向量。 tnear, u, v 是你需要使用我们课上推导的 Moller-Trumbore 算法来更新的参数。</li></ul><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>Renderer::Render() in Renderer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Renderer::Render</span><span class="params">(<span class="type">const</span> Scene&amp; scene)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;Vector3f&gt; <span class="title">framebuffer</span><span class="params">(scene.width * scene.height)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> scale = std::<span class="built_in">tan</span>(<span class="built_in">deg2rad</span>(scene.fov * <span class="number">0.5f</span>));</span><br><span class="line">    <span class="type">float</span> imageAspectRatio = scene.width / (<span class="type">float</span>)scene.height;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this variable as the eye position to start your rays.</span></span><br><span class="line">    <span class="function">Vector3f <span class="title">eye_pos</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; scene.height; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; scene.width; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// generate primary ray direction</span></span><br><span class="line">            <span class="type">float</span> x = (<span class="number">2</span> * (i + <span class="number">0.5f</span>) / scene.width - <span class="number">1</span>) * imageAspectRatio * scale;</span><br><span class="line">            <span class="type">float</span> y = (<span class="number">1</span> - <span class="number">2</span> * (j + <span class="number">0.5f</span>) / scene.height) * scale;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Find the x and y positions of the current pixel to get the direction</span></span><br><span class="line">            <span class="comment">// vector that passes through it.</span></span><br><span class="line">            <span class="comment">// Also, don&#x27;t forget to multiply both of them with the variable *scale*, and</span></span><br><span class="line">            <span class="comment">// x (horizontal) variable with the *imageAspectRatio*            </span></span><br><span class="line"></span><br><span class="line">            Vector3f dir = <span class="built_in">normalize</span>(<span class="built_in">Vector3f</span>(x, y, <span class="number">-1</span>)); <span class="comment">// Don&#x27;t forget to normalize this direction!</span></span><br><span class="line">            framebuffer[m++] = <span class="built_in">castRay</span>(eye_pos, dir, scene, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">UpdateProgress</span>(j / (<span class="type">float</span>)scene.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save framebuffer to file</span></span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;binary.ppm&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    (<span class="type">void</span>)<span class="built_in">fprintf</span>(fp, <span class="string">&quot;P6\n%d %d\n255\n&quot;</span>, scene.width, scene.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; scene.height * scene.width; ++i) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> color[<span class="number">3</span>];</span><br><span class="line">        color[<span class="number">0</span>] = (<span class="type">char</span>)(<span class="number">255</span> * <span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].x));</span><br><span class="line">        color[<span class="number">1</span>] = (<span class="type">char</span>)(<span class="number">255</span> * <span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].y));</span><br><span class="line">        color[<span class="number">2</span>] = (<span class="type">char</span>)(<span class="number">255</span> * <span class="built_in">clamp</span>(<span class="number">0</span>, <span class="number">1</span>, framebuffer[i].z));</span><br><span class="line">        <span class="built_in">fwrite</span>(color, <span class="number">1</span>, <span class="number">3</span>, fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rayTriangleIntersect() in Triangle.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rayTriangleIntersect</span><span class="params">(<span class="type">const</span> Vector3f&amp; v0, <span class="type">const</span> Vector3f&amp; v1, <span class="type">const</span> Vector3f&amp; v2, <span class="type">const</span> Vector3f&amp; orig,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="type">const</span> Vector3f&amp; dir, <span class="type">float</span>&amp; tnear, <span class="type">float</span>&amp; u, <span class="type">float</span>&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement this function that tests whether the triangle</span></span><br><span class="line">    <span class="comment">// that&#x27;s specified bt v0, v1 and v2 intersects with the ray (whose</span></span><br><span class="line">    <span class="comment">// origin is *orig* and direction is *dir*)</span></span><br><span class="line">    <span class="comment">// Also don&#x27;t forget to update tnear, u and v.</span></span><br><span class="line">    Vector3f E1 = v1 - v0, E2 = v2 - v0;</span><br><span class="line">    Vector3f S = orig - v0, S1 = <span class="built_in">crossProduct</span>(dir, E2), S2 = <span class="built_in">crossProduct</span>(S, E1);</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> SE = <span class="built_in">dotProduct</span>(S1, E1);</span><br><span class="line">    <span class="type">float</span> t = <span class="built_in">dotProduct</span>(S2, E2) / SE;</span><br><span class="line">    <span class="type">float</span> b1 = <span class="built_in">dotProduct</span>(S1, S) / SE;</span><br><span class="line">    <span class="type">float</span> b2 = <span class="built_in">dotProduct</span>(S2, dir) / SE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t &gt;= <span class="number">0</span> &amp;&amp; b1 &gt;= <span class="number">0</span> &amp;&amp; b2 &gt;= <span class="number">0</span> &amp;&amp; (<span class="number">1</span> - b1 - b2) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        tnear = t;</span><br><span class="line">        u = b1;</span><br><span class="line">        v = b2;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work5_res.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业4</title>
      <link href="/2022/11/02/GAMES101-%E4%BD%9C%E4%B8%9A4/"/>
      <url>/2022/11/02/GAMES101-%E4%BD%9C%E4%B8%9A4/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work4_require.png"></p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录控制点</span></span><br><span class="line">std::vector&lt;cv::Point2f&gt; control_points;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mouse_handler</span><span class="params">(<span class="type">int</span> event, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> flags, <span class="type">void</span> *userdata)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event == cv::EVENT_LBUTTONDOWN &amp;&amp; control_points.<span class="built_in">size</span>() &lt; <span class="number">10</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Left button of the mouse is clicked - position (&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        control_points.<span class="built_in">emplace_back</span>(x, y);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递推公式求四个控制点的贝塞尔曲线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">naive_bezier</span><span class="params">(<span class="type">const</span> std::vector&lt;cv::Point2f&gt; &amp;points, cv::Mat &amp;window)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;p_0 = points[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">auto</span> &amp;p_1 = points[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">auto</span> &amp;p_2 = points[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">auto</span> &amp;p_3 = points[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> t = <span class="number">0.0</span>; t &lt;= <span class="number">1.0</span>; t += <span class="number">0.001</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> point = std::<span class="built_in">pow</span>(<span class="number">1</span> - t, <span class="number">3</span>) * p_0 + <span class="number">3</span> * t * std::<span class="built_in">pow</span>(<span class="number">1</span> - t, <span class="number">2</span>) * p_1 +</span><br><span class="line">                 <span class="number">3</span> * std::<span class="built_in">pow</span>(t, <span class="number">2</span>) * (<span class="number">1</span> - t) * p_2 + std::<span class="built_in">pow</span>(t, <span class="number">3</span>) * p_3;</span><br><span class="line"></span><br><span class="line">        window.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(point.y, point.x)[<span class="number">2</span>] = <span class="number">255</span>; <span class="comment">//红色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Point2f <span class="title">recursive_bezier</span><span class="params">(<span class="type">const</span> std::vector&lt;cv::Point2f&gt; &amp;control_points, <span class="type">float</span> t)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement de Casteljau&#x27;s algorithm</span></span><br><span class="line">    <span class="keyword">if</span> (control_points.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> - t) * control_points[<span class="number">0</span>] + t * control_points[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::vector&lt;cv::Point2f&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; control_points.<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            cv::Point2f p = (<span class="number">1</span> - t) * control_points[i] + t * control_points[i + <span class="number">1</span>];</span><br><span class="line">            vec.<span class="built_in">push_back</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recursive_bezier</span>(vec, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归实现贝塞尔曲线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bezier</span><span class="params">(<span class="type">const</span> std::vector&lt;cv::Point2f&gt; &amp;control_points, cv::Mat &amp;window)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Iterate through all t = 0 to t = 1 with small steps, and call de Casteljau&#x27;s </span></span><br><span class="line">    <span class="comment">// recursive Bezier algorithm.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> t = <span class="number">0.0</span>; t &lt;= <span class="number">1.0</span>; t += <span class="number">0.001</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> point = <span class="built_in">recursive_bezier</span>(control_points, t);</span><br><span class="line">        window.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(point.y, point.x)[<span class="number">1</span>] = <span class="number">255</span>; <span class="comment">//绿色</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//反走样</span></span><br><span class="line">        <span class="type">int</span> x_tag = (point.x - <span class="built_in">floor</span>(point.x)) &gt; <span class="number">0.5</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> y_tag = (point.y - <span class="built_in">floor</span>(point.y)) &gt; <span class="number">0.5</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//距离最近的四个点</span></span><br><span class="line">        <span class="function">cv::Point2f <span class="title">p00</span><span class="params">(floor(point.x) + <span class="number">0.5f</span>, floor(point.y) + <span class="number">0.5f</span>)</span></span>;</span><br><span class="line">        <span class="function">cv::Point2f <span class="title">p01</span><span class="params">(floor(point.x) + <span class="number">0.5f</span> + x_tag, floor(point.y) + <span class="number">0.5f</span>)</span></span>;</span><br><span class="line">        <span class="function">cv::Point2f <span class="title">p10</span><span class="params">(floor(point.x) + <span class="number">0.5f</span>, floor(point.y) + <span class="number">0.5f</span> + y_tag)</span></span>;</span><br><span class="line">        <span class="function">cv::Point2f <span class="title">p11</span><span class="params">(floor(point.x) + <span class="number">0.5f</span> + x_tag, floor(point.y) + <span class="number">0.5f</span> + y_tag)</span></span>;</span><br><span class="line">        std::vector&lt;cv::Point2f&gt; vec&#123;p01, p10, p11&#125;;</span><br><span class="line">        <span class="type">float</span> dis = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(point.x - p00.x, <span class="number">2</span>) + <span class="built_in">pow</span>(point.y - p00.y, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : vec) &#123;</span><br><span class="line">            <span class="type">float</span> d = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(point.x - p.x, <span class="number">2</span>) + <span class="built_in">pow</span>(point.y - p.y, <span class="number">2</span>));</span><br><span class="line">            <span class="type">float</span> c = std::<span class="built_in">max</span>((<span class="type">float</span>)window.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(p.y, p.x)[<span class="number">1</span>], dis / d * <span class="number">255.0f</span>); <span class="comment">//计算颜色</span></span><br><span class="line">            window.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(p.y, p.x)[<span class="number">1</span>] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat window = cv::<span class="built_in">Mat</span>(<span class="number">700</span>, <span class="number">700</span>, CV_8UC3, cv::<span class="built_in">Scalar</span>(<span class="number">0</span>));</span><br><span class="line">    cv::<span class="built_in">cvtColor</span>(window, window, cv::COLOR_BGR2RGB);</span><br><span class="line">    cv::<span class="built_in">namedWindow</span>(<span class="string">&quot;Bezier Curve&quot;</span>, cv::WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">    cv::<span class="built_in">setMouseCallback</span>(<span class="string">&quot;Bezier Curve&quot;</span>, mouse_handler, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> key = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (key != <span class="number">27</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;point : control_points) </span><br><span class="line">        &#123;</span><br><span class="line">            cv::<span class="built_in">circle</span>(window, point, <span class="number">3</span>, &#123;<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>&#125;, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (control_points.size() == 4)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     naive_bezier(control_points, window);</span></span><br><span class="line">        <span class="comment">//     bezier(control_points, window);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//     cv::imshow(&quot;Bezier Curve&quot;, window);</span></span><br><span class="line">        <span class="comment">//     cv::imwrite(&quot;bezier_curve_4.png&quot;, window);</span></span><br><span class="line">        <span class="comment">//     key = cv::waitKey(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//     return 0;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (control_points.<span class="built_in">size</span>() == <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">bezier</span>(control_points, window);</span><br><span class="line"></span><br><span class="line">            cv::<span class="built_in">imshow</span>(<span class="string">&quot;Bezier Curve&quot;</span>, window);</span><br><span class="line">            cv::<span class="built_in">imwrite</span>(<span class="string">&quot;bezier_curve_6.png&quot;</span>, window);</span><br><span class="line">            key = cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cv::<span class="built_in">imshow</span>(<span class="string">&quot;Bezier Curve&quot;</span>, window);</span><br><span class="line">        key = cv::<span class="built_in">waitKey</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work4_bezier_curve_4.png"></p><center>四个控制点</center>![](https://lunanhua.gitee.io/images/blog/graphics/games101/work4_bezier_curve_6.png)<center>六个控制点</center>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业3</title>
      <link href="/2022/10/24/GAMES101-%E4%BD%9C%E4%B8%9A3/"/>
      <url>/2022/10/24/GAMES101-%E4%BD%9C%E4%B8%9A3/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work3_require.png"></p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>参考 <a href="https://blog.csdn.net/Q_pril/article/details/123598746">Games101：作业3</a> 、 <a href="https://www.cnblogs.com/levelly/p/14156058.html">GAMES101作业解答-作业03</a> </p><p>1、rasterize_triangle() in rasterizer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> rst::rasterizer::<span class="built_in">rasterize_triangle</span>(<span class="type">const</span> Triangle&amp; t, <span class="type">const</span> std::array&lt;Eigen::Vector3f, <span class="number">3</span>&gt;&amp; view_pos) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> v = t.<span class="built_in">toVector4</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建三角形的二维bounding box</span></span><br><span class="line">    <span class="type">int</span> x_min = std::<span class="built_in">floor</span>(std::<span class="built_in">min</span>(std::<span class="built_in">min</span>(t.v[<span class="number">0</span>][<span class="number">0</span>], t.v[<span class="number">1</span>][<span class="number">0</span>]), t.v[<span class="number">2</span>][<span class="number">0</span>])); <span class="comment">//向下取整</span></span><br><span class="line">    <span class="type">int</span> y_min = std::<span class="built_in">floor</span>(std::<span class="built_in">min</span>(std::<span class="built_in">min</span>(t.v[<span class="number">0</span>][<span class="number">1</span>], t.v[<span class="number">1</span>][<span class="number">1</span>]), t.v[<span class="number">2</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="type">int</span> x_max = std::<span class="built_in">ceil</span>(std::<span class="built_in">max</span>(std::<span class="built_in">max</span>(t.v[<span class="number">0</span>][<span class="number">0</span>], t.v[<span class="number">1</span>][<span class="number">0</span>]), t.v[<span class="number">2</span>][<span class="number">0</span>])); <span class="comment">//向上取整</span></span><br><span class="line">    <span class="type">int</span> y_max = std::<span class="built_in">ceil</span>(std::<span class="built_in">max</span>(std::<span class="built_in">max</span>(t.v[<span class="number">0</span>][<span class="number">1</span>], t.v[<span class="number">1</span>][<span class="number">1</span>]), t.v[<span class="number">2</span>][<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> MSAA = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (MSAA) &#123;</span><br><span class="line">        std::vector&lt;std::vector&lt;<span class="type">float</span>&gt;&gt; pos&#123;&#123;<span class="number">0.25</span>, <span class="number">0.25</span>&#125;, &#123;<span class="number">0.25</span>, <span class="number">0.75</span>&#125;, &#123;<span class="number">0.75</span>, <span class="number">0.25</span>&#125;, &#123;<span class="number">0.75</span>, <span class="number">0.75</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = x_min; x &lt;= x_max; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = y_min; y &lt;= y_max; ++y) &#123;</span><br><span class="line">                <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//记录有几个像素采样点在三角形内</span></span><br><span class="line">                <span class="function">std::vector&lt;<span class="type">float</span>&gt; <span class="title">list</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">insideTriangle</span>(x+pos[k][<span class="number">0</span>], y+pos[k][<span class="number">1</span>], t.v)) &#123;</span><br><span class="line">                        <span class="keyword">auto</span>[alpha, beta, gamma] = <span class="built_in">computeBarycentric2D</span>(x+pos[k][<span class="number">0</span>], y+pos[k][<span class="number">1</span>], t.v);</span><br><span class="line">                        <span class="type">float</span> w_reciprocal = <span class="number">1.0f</span>/(alpha / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma / v[<span class="number">2</span>].<span class="built_in">w</span>());</span><br><span class="line">                        <span class="type">float</span> z_interpolated = alpha * v[<span class="number">0</span>].<span class="built_in">z</span>() / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta * v[<span class="number">1</span>].<span class="built_in">z</span>() / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma * v[<span class="number">2</span>].<span class="built_in">z</span>() / v[<span class="number">2</span>].<span class="built_in">w</span>();</span><br><span class="line">                        z_interpolated *= w_reciprocal;</span><br><span class="line">                        list[k] = z_interpolated;</span><br><span class="line">                        ++count;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">//记录有几个像素采样点在上层</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list[k] &lt; <span class="built_in">get_depth</span>(x, y, k)) &#123;</span><br><span class="line">                        <span class="built_in">set_depth</span>(x, y, k, list[k]);</span><br><span class="line">                        ++num;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">auto</span>[alpha, beta, gamma] = <span class="built_in">computeBarycentric2D</span>((<span class="type">float</span>)x+<span class="number">0.5f</span>, (<span class="type">float</span>)y+<span class="number">0.5f</span>, t.v);</span><br><span class="line">                    Eigen::Vector3f interpolated_color = <span class="built_in">interpolate</span>(alpha, beta, gamma, t.color[<span class="number">0</span>], t.color[<span class="number">1</span>], t.color[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                    Eigen::Vector3f interpolated_normal = <span class="built_in">interpolate</span>(alpha, beta, gamma, t.normal[<span class="number">0</span>], t.normal[<span class="number">1</span>], t.normal[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                    Eigen::Vector2f interpolated_texcoords = <span class="built_in">interpolate</span>(alpha, beta, gamma, t.tex_coords[<span class="number">0</span>], t.tex_coords[<span class="number">1</span>], t.tex_coords[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                    Eigen::Vector3f interpolated_shadingcoords = <span class="built_in">interpolate</span>(alpha, beta, gamma, view_pos[<span class="number">0</span>], view_pos[<span class="number">1</span>], view_pos[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="function">fragment_shader_payload <span class="title">payload</span><span class="params">(interpolated_color, interpolated_normal.normalized(), interpolated_texcoords, texture ? &amp;*texture : <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">                    payload.view_pos = interpolated_shadingcoords;</span><br><span class="line">                    Eigen::Vector3f pixel_color = <span class="built_in">fragment_shader</span>(payload);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">set_pixel</span>(x, y, pixel_color * count / <span class="number">4.0f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = x_min; x &lt;= x_max; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = y_min; y &lt;= y_max; ++y) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">insideTriangle</span>(x + <span class="number">0.5</span>, y + <span class="number">0.5</span>, t.v)) &#123;</span><br><span class="line">                    <span class="comment">//计算插值深度</span></span><br><span class="line">                    <span class="keyword">auto</span>[alpha, beta, gamma] = <span class="built_in">computeBarycentric2D</span>((<span class="type">float</span>)x+<span class="number">0.5f</span>, (<span class="type">float</span>)y+<span class="number">0.5f</span>, t.v);</span><br><span class="line">                    <span class="type">float</span> w_reciprocal = <span class="number">1.0f</span>/(alpha / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma / v[<span class="number">2</span>].<span class="built_in">w</span>());</span><br><span class="line">                    <span class="type">float</span> z_interpolated = alpha * v[<span class="number">0</span>].<span class="built_in">z</span>() / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta * v[<span class="number">1</span>].<span class="built_in">z</span>() / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma * v[<span class="number">2</span>].<span class="built_in">z</span>() / v[<span class="number">2</span>].<span class="built_in">w</span>();</span><br><span class="line">                    z_interpolated *= w_reciprocal;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//越小越近</span></span><br><span class="line">                    <span class="keyword">if</span> (z_interpolated &lt; <span class="built_in">get_depth</span>(x, y, <span class="number">0</span>)) &#123;</span><br><span class="line">                        Eigen::Vector3f interpolated_color = <span class="built_in">interpolate</span>(alpha, beta, gamma, t.color[<span class="number">0</span>], t.color[<span class="number">1</span>], t.color[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                        Eigen::Vector3f interpolated_normal = <span class="built_in">interpolate</span>(alpha, beta, gamma, t.normal[<span class="number">0</span>], t.normal[<span class="number">1</span>], t.normal[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                        Eigen::Vector2f interpolated_texcoords = <span class="built_in">interpolate</span>(alpha, beta, gamma, t.tex_coords[<span class="number">0</span>], t.tex_coords[<span class="number">1</span>], t.tex_coords[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                        Eigen::Vector3f interpolated_shadingcoords = <span class="built_in">interpolate</span>(alpha, beta, gamma, view_pos[<span class="number">0</span>], view_pos[<span class="number">1</span>], view_pos[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">                        </span><br><span class="line">                        <span class="function">fragment_shader_payload <span class="title">payload</span><span class="params">(interpolated_color, interpolated_normal.normalized(), interpolated_texcoords, texture ? &amp;*texture : <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">                        payload.view_pos = interpolated_shadingcoords;</span><br><span class="line">                        Eigen::Vector3f pixel_color = <span class="built_in">fragment_shader</span>(payload);</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">set_pixel</span>(x, y, pixel_color);</span><br><span class="line">                        <span class="built_in">set_depth</span>(x, y, <span class="number">0</span>, z_interpolated);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、get_projection_matrix() in main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_projection_matrix</span><span class="params">(<span class="type">float</span> eye_fov, <span class="type">float</span> aspect_ratio, <span class="type">float</span> zNear, <span class="type">float</span> zFar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//看向-z方向</span></span><br><span class="line">    zNear = -zNear;</span><br><span class="line">    zFar = -zFar;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f projection = Eigen::Matrix4f::<span class="built_in">Identity</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f persp; <span class="comment">//透视变换</span></span><br><span class="line">    persp &lt;&lt; zNear, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, zNear, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, zNear+zFar, -zNear*zFar,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> t = <span class="built_in">tanf</span>(eye_fov / <span class="number">2</span> / <span class="number">180.0f</span> * MY_PI) * <span class="built_in">abs</span>(zNear);</span><br><span class="line">    <span class="type">float</span> r = t * aspect_ratio; </span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f scale, trans; <span class="comment">//正交变换</span></span><br><span class="line">    scale &lt;&lt; <span class="number">1</span>/r, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">1</span>/t, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>/(zNear-zFar), <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    trans &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -(zNear+zFar) / <span class="number">2</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//z取反</span></span><br><span class="line">    Eigen::Matrix4f z;</span><br><span class="line">    z &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    projection = z * scale * trans * persp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> projection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法线着色模型：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work3_normal.png"></p><p>3、phong_fragment_shader() in main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3f <span class="title">phong_fragment_shader</span><span class="params">(<span class="type">const</span> fragment_shader_payload&amp; payload)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Vector3f ka = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.005</span>, <span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">    Eigen::Vector3f kd = payload.color;</span><br><span class="line">    Eigen::Vector3f ks = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.7937</span>, <span class="number">0.7937</span>, <span class="number">0.7937</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> l1 = light&#123;&#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> l2 = light&#123;&#123;<span class="number">-20</span>, <span class="number">20</span>, <span class="number">0</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;light&gt; lights = &#123;l1, l2&#125;;</span><br><span class="line">    Eigen::Vector3f amb_light_intensity&#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    Eigen::Vector3f eye_pos&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> p = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f color = payload.color;</span><br><span class="line">    Eigen::Vector3f point = payload.view_pos;</span><br><span class="line">    Eigen::Vector3f normal = payload.normal;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f result_color = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; light : lights)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* </span></span><br><span class="line">        <span class="comment">// components are. Then, accumulate that result on the *result_color* object.</span></span><br><span class="line">        <span class="type">float</span> r2 = (light.position - point).<span class="built_in">squaredNorm</span>();</span><br><span class="line">        Eigen::Vector3f l = (light.position - point).<span class="built_in">normalized</span>();</span><br><span class="line">        Eigen::Vector3f v = (eye_pos - point).<span class="built_in">normalized</span>();</span><br><span class="line">        Eigen::Vector3f h = (l + v).<span class="built_in">normalized</span>();</span><br><span class="line"></span><br><span class="line">        Eigen::Vector3f Ld = kd.<span class="built_in">cwiseProduct</span>(light.intensity / r2 * std::<span class="built_in">max</span>(<span class="number">0.0f</span>, normal.<span class="built_in">dot</span>(l)));</span><br><span class="line">        Eigen::Vector3f Ls = ks.<span class="built_in">cwiseProduct</span>(light.intensity / r2 * std::<span class="built_in">pow</span>(std::<span class="built_in">max</span>(<span class="number">0.0f</span>, normal.<span class="built_in">dot</span>(h)), p));</span><br><span class="line"></span><br><span class="line">        result_color = result_color + Ld + Ls;</span><br><span class="line">    &#125;</span><br><span class="line">    Eigen::Vector3f La = ka.<span class="built_in">cwiseProduct</span>(amb_light_intensity);</span><br><span class="line">    result_color += La;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_color * <span class="number">255.f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Blinn-Phong 模型：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work3_phong.png"></p><p>4、texture_fragment_shader() in main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3f <span class="title">texture_fragment_shader</span><span class="params">(<span class="type">const</span> fragment_shader_payload&amp; payload)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Vector3f return_color = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (payload.texture)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Get the texture value at the texture coordinates of the current fragment</span></span><br><span class="line">        <span class="type">float</span> u = payload.tex_coords[<span class="number">0</span>];</span><br><span class="line">        <span class="type">float</span> v = payload.tex_coords[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// return_color = payload.texture-&gt;getColor(u, v);</span></span><br><span class="line">        return_color = payload.texture-&gt;<span class="built_in">getColorBilinear</span>(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    Eigen::Vector3f texture_color;</span><br><span class="line">    texture_color &lt;&lt; return_color.<span class="built_in">x</span>(), return_color.<span class="built_in">y</span>(), return_color.<span class="built_in">z</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f ka = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.005</span>, <span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">    Eigen::Vector3f kd = texture_color / <span class="number">255.f</span>;</span><br><span class="line">    Eigen::Vector3f ks = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.7937</span>, <span class="number">0.7937</span>, <span class="number">0.7937</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> l1 = light&#123;&#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> l2 = light&#123;&#123;<span class="number">-20</span>, <span class="number">20</span>, <span class="number">0</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;light&gt; lights = &#123;l1, l2&#125;;</span><br><span class="line">    Eigen::Vector3f amb_light_intensity&#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    Eigen::Vector3f eye_pos&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> p = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f color = texture_color;</span><br><span class="line">    Eigen::Vector3f point = payload.view_pos;</span><br><span class="line">    Eigen::Vector3f normal = payload.normal;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f result_color = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; light : lights)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* </span></span><br><span class="line">        <span class="comment">// components are. Then, accumulate that result on the *result_color* object.</span></span><br><span class="line">        <span class="type">float</span> r2 = (light.position - point).<span class="built_in">squaredNorm</span>();</span><br><span class="line">        Eigen::Vector3f l = (light.position - point).<span class="built_in">normalized</span>();</span><br><span class="line">        Eigen::Vector3f v = (eye_pos - point).<span class="built_in">normalized</span>();</span><br><span class="line">        Eigen::Vector3f h = (l + v).<span class="built_in">normalized</span>();</span><br><span class="line"></span><br><span class="line">        Eigen::Vector3f Ld = kd.<span class="built_in">cwiseProduct</span>(light.intensity / r2 * std::<span class="built_in">max</span>(<span class="number">0.0f</span>, normal.<span class="built_in">dot</span>(l)));</span><br><span class="line">        Eigen::Vector3f Ls = ks.<span class="built_in">cwiseProduct</span>(light.intensity / r2 * std::<span class="built_in">pow</span>(std::<span class="built_in">max</span>(<span class="number">0.0f</span>, normal.<span class="built_in">dot</span>(h)), p));</span><br><span class="line"></span><br><span class="line">        result_color = result_color + Ld + Ls;</span><br><span class="line">    &#125;</span><br><span class="line">    Eigen::Vector3f La = ka.<span class="built_in">cwiseProduct</span>(amb_light_intensity);</span><br><span class="line">    result_color += La;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_color * <span class="number">255.f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getColorBilinear() in Texture.hpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3f <span class="title">getColor</span><span class="params">(<span class="type">float</span> u, <span class="type">float</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt; <span class="number">0</span>) u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; <span class="number">1</span>) u = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">1</span>) v = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 取</span></span><br><span class="line">    <span class="keyword">auto</span> u_img = u * width;</span><br><span class="line">    <span class="keyword">auto</span> v_img = (<span class="number">1</span> - v) * height;</span><br><span class="line">    <span class="keyword">auto</span> color = image_data.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(v_img, u_img);</span><br><span class="line">    <span class="keyword">return</span> Eigen::<span class="built_in">Vector3f</span>(color[<span class="number">0</span>], color[<span class="number">1</span>], color[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双线性插值</span></span><br><span class="line"><span class="function">Eigen::Vector3f <span class="title">getColorBilinear</span><span class="params">(<span class="type">float</span> u, <span class="type">float</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt; <span class="number">0</span>) u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; <span class="number">1</span>) u = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">1</span>) v = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> u_img = u * width;</span><br><span class="line">    <span class="type">float</span> v_img = (<span class="number">1</span> - v) * height;</span><br><span class="line">    <span class="type">int</span> u_u = <span class="built_in">ceil</span>(u_img), u_d = <span class="built_in">floor</span>(u_img);</span><br><span class="line">    <span class="type">int</span> v_u = <span class="built_in">ceil</span>(v_img), v_d = <span class="built_in">floor</span>(v_img);</span><br><span class="line">    <span class="type">float</span> s = u_img - u_d;</span><br><span class="line">    <span class="type">float</span> t = v_u - v_img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> u0 = (<span class="number">1</span>-s)*image_data.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(v_u, u_d) + s*image_data.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(v_u, u_u);</span><br><span class="line">    <span class="keyword">auto</span> u1 = (<span class="number">1</span>-s)*image_data.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(v_d, u_d) + s*image_data.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(v_d, u_u);</span><br><span class="line">    <span class="keyword">auto</span> color = (<span class="number">1</span>-t)*u0 + t*u1;</span><br><span class="line">    <span class="keyword">return</span> Eigen::<span class="built_in">Vector3f</span>(color[<span class="number">0</span>], color[<span class="number">1</span>], color[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纹理模型：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work3_texture.png"></p><p>5、bump_fragment_shader() in main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3f <span class="title">bump_fragment_shader</span><span class="params">(<span class="type">const</span> fragment_shader_payload&amp; payload)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Vector3f ka = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.005</span>, <span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">    Eigen::Vector3f kd = payload.color;</span><br><span class="line">    Eigen::Vector3f ks = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.7937</span>, <span class="number">0.7937</span>, <span class="number">0.7937</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> l1 = light&#123;&#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> l2 = light&#123;&#123;<span class="number">-20</span>, <span class="number">20</span>, <span class="number">0</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;light&gt; lights = &#123;l1, l2&#125;;</span><br><span class="line">    Eigen::Vector3f amb_light_intensity&#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    Eigen::Vector3f eye_pos&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> p = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f color = payload.color; </span><br><span class="line">    Eigen::Vector3f point = payload.view_pos;</span><br><span class="line">    Eigen::Vector3f normal = payload.normal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement bump mapping here</span></span><br><span class="line">    <span class="comment">// Let n = normal = (x, y, z)</span></span><br><span class="line">    <span class="comment">// Vector t = (x*y/sqrt(x*x+z*z),sqrt(x*x+z*z),z*y/sqrt(x*x+z*z))</span></span><br><span class="line">    <span class="comment">// Vector b = n cross product t</span></span><br><span class="line">    <span class="comment">// Matrix TBN = [t b n]</span></span><br><span class="line">    <span class="comment">// dU = kh * kn * (h(u+1/w,v)-h(u,v))</span></span><br><span class="line">    <span class="comment">// dV = kh * kn * (h(u,v+1/h)-h(u,v))</span></span><br><span class="line">    <span class="comment">// Vector ln = (-dU, -dV, 1)</span></span><br><span class="line">    <span class="comment">// Normal n = normalize(TBN * ln)</span></span><br><span class="line">    <span class="type">float</span> kh = <span class="number">0.2</span>, kn = <span class="number">0.1</span>;</span><br><span class="line">    <span class="type">float</span> x = normal.<span class="built_in">x</span>(), y = normal.<span class="built_in">y</span>(), z = normal.<span class="built_in">z</span>();</span><br><span class="line">    Eigen::Vector3f t&#123; x * y / <span class="built_in">sqrt</span>(x * x + z * z), <span class="built_in">sqrt</span>(x * x + z * z), z * y / <span class="built_in">sqrt</span>(x * x + z * z)&#125;;</span><br><span class="line">    Eigen::Vector3f b = normal.<span class="built_in">cross</span>(t);</span><br><span class="line">    Eigen::Matrix3f TBN;</span><br><span class="line">    TBN &lt;&lt; t.<span class="built_in">x</span>(), b.<span class="built_in">x</span>(), normal.<span class="built_in">x</span>(),</span><br><span class="line">           t.<span class="built_in">y</span>(), b.<span class="built_in">y</span>(), normal.<span class="built_in">y</span>(),</span><br><span class="line">           t.<span class="built_in">z</span>(), b.<span class="built_in">z</span>(), normal.<span class="built_in">z</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> u, v, w, h, dU, dV;</span><br><span class="line">    <span class="keyword">if</span> (payload.texture) &#123;</span><br><span class="line">        u = payload.tex_coords[<span class="number">0</span>];</span><br><span class="line">        v = payload.tex_coords[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    w = payload.texture-&gt;width;</span><br><span class="line">    h = payload.texture-&gt;height;</span><br><span class="line">    <span class="type">float</span> uv = payload.texture-&gt;<span class="built_in">getColor</span>(u, v).<span class="built_in">norm</span>();</span><br><span class="line">    <span class="type">float</span> u1v = payload.texture-&gt;<span class="built_in">getColor</span>(u+<span class="number">1.0f</span>/w, v).<span class="built_in">norm</span>();</span><br><span class="line">    <span class="type">float</span> uv1 = payload.texture-&gt;<span class="built_in">getColor</span>(u, v+<span class="number">1.0f</span>/h).<span class="built_in">norm</span>();</span><br><span class="line">    dU = kh * kn * (u1v - uv);</span><br><span class="line">    dV = kh * kn * (uv1 - uv);</span><br><span class="line">    Eigen::Vector3f ln&#123;-dU, -dV, <span class="number">1</span>&#125;;</span><br><span class="line">    Eigen::Vector3f n = (TBN * ln).<span class="built_in">normalized</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f result_color = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    result_color = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_color * <span class="number">255.f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>凹凸贴图：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work3_bump.png"></p><p>6、displacement_fragment_shader() in main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Vector3f <span class="title">displacement_fragment_shader</span><span class="params">(<span class="type">const</span> fragment_shader_payload&amp; payload)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    Eigen::Vector3f ka = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.005</span>, <span class="number">0.005</span>, <span class="number">0.005</span>);</span><br><span class="line">    Eigen::Vector3f kd = payload.color;</span><br><span class="line">    Eigen::Vector3f ks = Eigen::<span class="built_in">Vector3f</span>(<span class="number">0.7937</span>, <span class="number">0.7937</span>, <span class="number">0.7937</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> l1 = light&#123;&#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> l2 = light&#123;&#123;<span class="number">-20</span>, <span class="number">20</span>, <span class="number">0</span>&#125;, &#123;<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;light&gt; lights = &#123;l1, l2&#125;;</span><br><span class="line">    Eigen::Vector3f amb_light_intensity&#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    Eigen::Vector3f eye_pos&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> p = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f color = payload.color; </span><br><span class="line">    Eigen::Vector3f point = payload.view_pos;</span><br><span class="line">    Eigen::Vector3f normal = payload.normal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement displacement mapping here</span></span><br><span class="line">    <span class="comment">// Let n = normal = (x, y, z)</span></span><br><span class="line">    <span class="comment">// Vector t = (x*y/sqrt(x*x+z*z),sqrt(x*x+z*z),z*y/sqrt(x*x+z*z))</span></span><br><span class="line">    <span class="comment">// Vector b = n cross product t</span></span><br><span class="line">    <span class="comment">// Matrix TBN = [t b n]</span></span><br><span class="line">    <span class="comment">// dU = kh * kn * (h(u+1/w,v)-h(u,v))</span></span><br><span class="line">    <span class="comment">// dV = kh * kn * (h(u,v+1/h)-h(u,v))</span></span><br><span class="line">    <span class="comment">// Vector ln = (-dU, -dV, 1)</span></span><br><span class="line">    <span class="comment">// Position p = p + kn * n * h(u,v)</span></span><br><span class="line">    <span class="comment">// Normal n = normalize(TBN * ln)</span></span><br><span class="line">    <span class="type">float</span> kh = <span class="number">0.2</span>, kn = <span class="number">0.1</span>;</span><br><span class="line">    <span class="type">float</span> x = normal.<span class="built_in">x</span>(), y = normal.<span class="built_in">y</span>(), z = normal.<span class="built_in">z</span>();</span><br><span class="line">    Eigen::Vector3f t&#123; x * y / <span class="built_in">sqrt</span>(x * x + z * z), <span class="built_in">sqrt</span>(x * x + z * z), z * y / <span class="built_in">sqrt</span>(x * x + z * z)&#125;;</span><br><span class="line">    Eigen::Vector3f b = normal.<span class="built_in">cross</span>(t);</span><br><span class="line">    Eigen::Matrix3f TBN;</span><br><span class="line">    TBN &lt;&lt; t.<span class="built_in">x</span>(), b.<span class="built_in">x</span>(), normal.<span class="built_in">x</span>(),</span><br><span class="line">           t.<span class="built_in">y</span>(), b.<span class="built_in">y</span>(), normal.<span class="built_in">y</span>(),</span><br><span class="line">           t.<span class="built_in">z</span>(), b.<span class="built_in">z</span>(), normal.<span class="built_in">z</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> u, v, w, h, dU, dV;</span><br><span class="line">    <span class="keyword">if</span> (payload.texture) &#123;</span><br><span class="line">        u = payload.tex_coords[<span class="number">0</span>];</span><br><span class="line">        v = payload.tex_coords[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    w = payload.texture-&gt;width;</span><br><span class="line">    h = payload.texture-&gt;height;</span><br><span class="line">    <span class="type">float</span> uv = payload.texture-&gt;<span class="built_in">getColor</span>(u, v).<span class="built_in">norm</span>();</span><br><span class="line">    <span class="type">float</span> u1v = payload.texture-&gt;<span class="built_in">getColor</span>(u+<span class="number">1.0f</span>/w, v).<span class="built_in">norm</span>();</span><br><span class="line">    <span class="type">float</span> uv1 = payload.texture-&gt;<span class="built_in">getColor</span>(u, v+<span class="number">1.0f</span>/h).<span class="built_in">norm</span>();</span><br><span class="line">    dU = kh * kn * (u1v - uv);</span><br><span class="line">    dV = kh * kn * (uv1 - uv);</span><br><span class="line">    Eigen::Vector3f ln&#123;-dU, -dV, <span class="number">1</span>&#125;;</span><br><span class="line">    Eigen::Vector3f n = (TBN * ln).<span class="built_in">normalized</span>();</span><br><span class="line">    <span class="comment">//沿着原法线方向改变点的位置</span></span><br><span class="line">    point += kn * normal * payload.texture-&gt;<span class="built_in">getColor</span>(u, v).<span class="built_in">norm</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f result_color = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; light : lights)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* </span></span><br><span class="line">        <span class="comment">// components are. Then, accumulate that result on the *result_color* object.</span></span><br><span class="line">        <span class="type">float</span> r2 = (light.position - point).<span class="built_in">squaredNorm</span>();</span><br><span class="line">        Eigen::Vector3f l = (light.position - point).<span class="built_in">normalized</span>();</span><br><span class="line">        Eigen::Vector3f v = (eye_pos - point).<span class="built_in">normalized</span>();</span><br><span class="line">        Eigen::Vector3f h = (l + v).<span class="built_in">normalized</span>();</span><br><span class="line"></span><br><span class="line">        Eigen::Vector3f Ld = kd.<span class="built_in">cwiseProduct</span>(light.intensity / r2 * std::<span class="built_in">max</span>(<span class="number">0.0f</span>, n.<span class="built_in">dot</span>(l)));</span><br><span class="line">        Eigen::Vector3f Ls = ks.<span class="built_in">cwiseProduct</span>(light.intensity / r2 * std::<span class="built_in">pow</span>(std::<span class="built_in">max</span>(<span class="number">0.0f</span>, n.<span class="built_in">dot</span>(h)), p));</span><br><span class="line"></span><br><span class="line">        result_color = result_color + Ld + Ls;</span><br><span class="line">    &#125;</span><br><span class="line">    Eigen::Vector3f La = ka.<span class="built_in">cwiseProduct</span>(amb_light_intensity);</span><br><span class="line">    result_color += La;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_color * <span class="number">255.f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位移贴图：</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work3_displacement.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业2</title>
      <link href="/2022/10/19/GAMES101-%E4%BD%9C%E4%B8%9A2/"/>
      <url>/2022/10/19/GAMES101-%E4%BD%9C%E4%B8%9A2/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>在屏幕上画出一个实心三角形，换言之，栅格化一个三角形。上一次作业中，在视口变化之后，我们调用了函数  rasterize_wireframe(const Triangle&amp; t)。但这一次，你需要自己填写并调用函数 rasterize_triangle(const Triangle&amp; t)。</p><p>该函数的内部工作流程如下：</p><ol><li>创建三角形的二维 bounding box；</li><li>遍历此 bounding box 内的所有像素（使用其整数索引）。然后，使用像素中心的屏幕空间坐标来检查中心点是否在三角形内；</li><li>如果在内部，则将其位置处的插值深度值（interpolated depth value）与深度缓冲区（depth buffer）中的相应值进行比较。</li><li>如果当前点更靠近相机，请设置像素颜色并更新深度缓冲区（depth buffer）。</li></ol><p>我们需要修改的函数如下：</p><ol><li>rasterize_triangle()：执行三角形栅格化算法；</li><li>static bool insideTriangle()：测试点是否在三角形内。你可以修改此函数的定义，这意味着，你可以按照自己的方式更新返回类型或函数参数。</li></ol><p>因为我们只知道三角形三个顶点处的深度值，所以对于三角形内部的像素， 我们需要用插值的方法得到其深度值。我们已经为你处理好了这一部分，因为有关这方面的内容尚未在课程中涉及。插值的深度值被储存在变量 z_interpolated 中。</p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>判断点是否在三角形内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">insideTriangle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">const</span> Vector3f* _v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">float</span> a = (_v[<span class="number">1</span>][<span class="number">0</span>] - _v[<span class="number">0</span>][<span class="number">0</span>]) * (y - _v[<span class="number">0</span>][<span class="number">1</span>]) - (x - _v[<span class="number">0</span>][<span class="number">0</span>]) * (_v[<span class="number">1</span>][<span class="number">1</span>] - _v[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">// AB*AP</span></span><br><span class="line">    <span class="type">float</span> b = (_v[<span class="number">2</span>][<span class="number">0</span>] - _v[<span class="number">1</span>][<span class="number">0</span>]) * (y - _v[<span class="number">1</span>][<span class="number">1</span>]) - (x - _v[<span class="number">1</span>][<span class="number">0</span>]) * (_v[<span class="number">2</span>][<span class="number">1</span>] - _v[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">// BC*BP</span></span><br><span class="line">    <span class="type">float</span> c = (_v[<span class="number">0</span>][<span class="number">0</span>] - _v[<span class="number">2</span>][<span class="number">0</span>]) * (y - _v[<span class="number">2</span>][<span class="number">1</span>]) - (x - _v[<span class="number">2</span>][<span class="number">0</span>]) * (_v[<span class="number">0</span>][<span class="number">1</span>] - _v[<span class="number">2</span>][<span class="number">1</span>]); <span class="comment">// CA*CP</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> &amp;&amp; c &gt; <span class="number">0</span>) || (a &lt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span> &amp;&amp; c &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三角形光栅化函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> rst::rasterizer::<span class="built_in">rasterize_triangle</span>(<span class="type">const</span> Triangle&amp; t) &#123;</span><br><span class="line">    <span class="keyword">auto</span> v = t.<span class="built_in">toVector4</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建三角形的二维bounding box</span></span><br><span class="line">    <span class="type">int</span> x_min = std::<span class="built_in">floor</span>(std::<span class="built_in">min</span>(std::<span class="built_in">min</span>(t.v[<span class="number">0</span>][<span class="number">0</span>], t.v[<span class="number">1</span>][<span class="number">0</span>]), t.v[<span class="number">2</span>][<span class="number">0</span>])); <span class="comment">//向下取整</span></span><br><span class="line">    <span class="type">int</span> y_min = std::<span class="built_in">floor</span>(std::<span class="built_in">min</span>(std::<span class="built_in">min</span>(t.v[<span class="number">0</span>][<span class="number">1</span>], t.v[<span class="number">1</span>][<span class="number">1</span>]), t.v[<span class="number">2</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="type">int</span> x_max = std::<span class="built_in">ceil</span>(std::<span class="built_in">max</span>(std::<span class="built_in">max</span>(t.v[<span class="number">0</span>][<span class="number">0</span>], t.v[<span class="number">1</span>][<span class="number">0</span>]), t.v[<span class="number">2</span>][<span class="number">0</span>])); <span class="comment">//向上取整</span></span><br><span class="line">    <span class="type">int</span> y_max = std::<span class="built_in">ceil</span>(std::<span class="built_in">max</span>(std::<span class="built_in">max</span>(t.v[<span class="number">0</span>][<span class="number">1</span>], t.v[<span class="number">1</span>][<span class="number">1</span>]), t.v[<span class="number">2</span>][<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> MSAA = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (MSAA) &#123;</span><br><span class="line">        std::vector&lt;std::vector&lt;<span class="type">float</span>&gt;&gt; pos&#123;&#123;<span class="number">0.25</span>, <span class="number">0.25</span>&#125;, &#123;<span class="number">0.25</span>, <span class="number">0.75</span>&#125;, &#123;<span class="number">0.75</span>, <span class="number">0.25</span>&#125;, &#123;<span class="number">0.75</span>, <span class="number">0.75</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = x_min; x &lt;= x_max; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = y_min; y &lt;= y_max; ++y) &#123;</span><br><span class="line">                <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//记录有几个像素采样点在三角形内</span></span><br><span class="line">                <span class="function">std::vector&lt;<span class="type">float</span>&gt; <span class="title">list</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">insideTriangle</span>(x+pos[k][<span class="number">0</span>], y+pos[k][<span class="number">1</span>], t.v)) &#123;</span><br><span class="line">                        <span class="keyword">auto</span>[alpha, beta, gamma] = <span class="built_in">computeBarycentric2D</span>(x+pos[k][<span class="number">0</span>], y+pos[k][<span class="number">1</span>], t.v);</span><br><span class="line">                        <span class="type">float</span> w_reciprocal = <span class="number">1.0f</span>/(alpha / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma / v[<span class="number">2</span>].<span class="built_in">w</span>());</span><br><span class="line">                        <span class="type">float</span> z_interpolated = alpha * v[<span class="number">0</span>].<span class="built_in">z</span>() / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta * v[<span class="number">1</span>].<span class="built_in">z</span>() / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma * v[<span class="number">2</span>].<span class="built_in">z</span>() / v[<span class="number">2</span>].<span class="built_in">w</span>();</span><br><span class="line">                        z_interpolated *= w_reciprocal;</span><br><span class="line">                        list[k] = z_interpolated;</span><br><span class="line">                        ++count;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">//记录有几个像素采样点在上层</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list[k] &lt; <span class="built_in">get_depth</span>(x, y, k)) &#123;</span><br><span class="line">                        <span class="built_in">set_depth</span>(x, y, k, list[k]);</span><br><span class="line">                        ++num;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">set_pixel</span>(x, y, t.<span class="built_in">getColor</span>() * count / <span class="number">4.0f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = x_min; x &lt;= x_max; ++x) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = y_min; y &lt;= y_max; ++y) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">insideTriangle</span>(x + <span class="number">0.5</span>, y + <span class="number">0.5</span>, t.v)) &#123;</span><br><span class="line">                    <span class="comment">//计算插值深度</span></span><br><span class="line">                    <span class="keyword">auto</span>[alpha, beta, gamma] = <span class="built_in">computeBarycentric2D</span>((<span class="type">float</span>)x+<span class="number">0.5f</span>, (<span class="type">float</span>)y+<span class="number">0.5f</span>, t.v);</span><br><span class="line">                    <span class="type">float</span> w_reciprocal = <span class="number">1.0f</span>/(alpha / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma / v[<span class="number">2</span>].<span class="built_in">w</span>());</span><br><span class="line">                    <span class="type">float</span> z_interpolated = alpha * v[<span class="number">0</span>].<span class="built_in">z</span>() / v[<span class="number">0</span>].<span class="built_in">w</span>() + beta * v[<span class="number">1</span>].<span class="built_in">z</span>() / v[<span class="number">1</span>].<span class="built_in">w</span>() + gamma * v[<span class="number">2</span>].<span class="built_in">z</span>() / v[<span class="number">2</span>].<span class="built_in">w</span>();</span><br><span class="line">                    z_interpolated *= w_reciprocal;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//越小越近</span></span><br><span class="line">                    <span class="keyword">if</span> (z_interpolated &lt; <span class="built_in">get_depth</span>(x, y, <span class="number">0</span>)) &#123;</span><br><span class="line">                        <span class="built_in">set_pixel</span>(x, y, t.<span class="built_in">getColor</span>());</span><br><span class="line">                        <span class="built_in">set_depth</span>(x, y, <span class="number">0</span>, z_interpolated);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AA 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类初始化</span></span><br><span class="line">rst::rasterizer::<span class="built_in">rasterizer</span>(<span class="type">int</span> w, <span class="type">int</span> h) : <span class="built_in">width</span>(w), <span class="built_in">height</span>(h)</span><br><span class="line">&#123;</span><br><span class="line">    frame_buf.<span class="built_in">resize</span>(w * h);</span><br><span class="line">    depth_buf.<span class="built_in">resize</span>(w * h * AA * AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取点的深度缓存</span></span><br><span class="line"><span class="type">float</span> rst::rasterizer::<span class="built_in">get_depth</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> num) &#123;</span><br><span class="line">    <span class="type">int</span> ind = y * height * AA * AA + x * AA * AA + num;</span><br><span class="line">    <span class="keyword">return</span> depth_buf[ind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置点的深度缓存</span></span><br><span class="line"><span class="type">void</span> rst::rasterizer::<span class="built_in">set_depth</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> num, <span class="type">float</span> depth) &#123;</span><br><span class="line">    <span class="type">int</span> ind = y * height * AA * AA + x * AA * AA + num;</span><br><span class="line">    depth_buf[ind] = depth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置点的颜色缓存</span></span><br><span class="line"><span class="type">void</span> rst::rasterizer::<span class="built_in">set_pixel</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">const</span> Eigen::Vector3f&amp; color)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> ind = (height<span class="number">-1</span>-y)*width + x;</span><br><span class="line">    frame_buf[ind] = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业1</title>
      <link href="/2022/10/16/GAMES101-%E4%BD%9C%E4%B8%9A1/"/>
      <url>/2022/10/16/GAMES101-%E4%BD%9C%E4%B8%9A1/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>作业任务是填写一个旋转矩阵和一个透视投影矩阵。给定三维下三个点v0(2.0, 0.0, −2.0)， v1(0.0, 2.0, −2.0)，v2(−2.0, 0.0, −2.0)，需要将这三个点的坐标变换为屏幕坐标并在屏幕上绘制出对应的线框三角形（在代码框架中，已经提供了 draw_triangle 函数，所以你只需要去构建变换矩阵即可）。简而言之，需要进行模型、视图、投影、视口等变换来将三角形显示在屏幕上。在提供的代码框架中，我们留下了模型变换和投影变换的部分给你去完成。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>参考 <a href="https://blog.csdn.net/qq_42257666/article/details/125673177">Ubuntu安装OpenCV3.4.5</a> </p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>模型变换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绕z轴旋转</span></span><br><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_model_matrix</span><span class="params">(<span class="type">float</span> rotation_angle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix4f translate;</span><br><span class="line">    <span class="type">float</span> theta = rotation_angle / <span class="number">180.0f</span> * MY_PI;</span><br><span class="line">    <span class="type">float</span> c = <span class="built_in">cosf</span>(theta), s = <span class="built_in">sinf</span>(theta);</span><br><span class="line">    translate &lt;&lt; c, -s, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                 s, c, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                 <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                 <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> translate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绕任意过原点轴旋转</span></span><br><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_model_matrix</span><span class="params">(<span class="type">float</span> rotation_angle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Vector3f axis&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f translate = Eigen::Matrix4f::<span class="built_in">Zero</span>();</span><br><span class="line">    <span class="type">float</span> theta = rotation_angle / <span class="number">180.0f</span> * MY_PI;</span><br><span class="line">    Eigen::Matrix3f I = Eigen::Matrix3f::<span class="built_in">Identity</span>();</span><br><span class="line">    Eigen::Matrix3f K;</span><br><span class="line">    K &lt;&lt; <span class="number">0</span>, -axis.<span class="built_in">z</span>(), axis.<span class="built_in">y</span>(),</span><br><span class="line">         axis.<span class="built_in">z</span>(), <span class="number">0</span>, -axis.<span class="built_in">x</span>(),</span><br><span class="line">         -axis.<span class="built_in">y</span>(), -axis.<span class="built_in">x</span>(), <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> cosa = <span class="built_in">cosf</span>(theta), sina = <span class="built_in">sinf</span>(theta);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//罗德里格旋转公式</span></span><br><span class="line">    Eigen::Matrix3f temp = cosa * I + (<span class="number">1</span> - cosa) * axis * axis.<span class="built_in">transpose</span>() + sina * K;</span><br><span class="line">    <span class="comment">//转换为齐次坐标形式</span></span><br><span class="line">    translate.<span class="built_in">block</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>) = temp.<span class="built_in">block</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">translate</span>(<span class="number">3</span>, <span class="number">3</span>) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> translate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图变换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_view_matrix</span><span class="params">(Eigen::Vector3f eye_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix4f view = Eigen::Matrix4f::<span class="built_in">Identity</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f translate;</span><br><span class="line">    translate &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -eye_pos[<span class="number">0</span>], </span><br><span class="line">                 <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -eye_pos[<span class="number">1</span>], </span><br><span class="line">                 <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -eye_pos[<span class="number">2</span>], </span><br><span class="line">                 <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    view = translate * view;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>投影变换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Eigen::Matrix4f <span class="title">get_projection_matrix</span><span class="params">(<span class="type">float</span> eye_fov, <span class="type">float</span> aspect_ratio,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">float</span> zNear, <span class="type">float</span> zFar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Eigen::Matrix4f projection = Eigen::Matrix4f::<span class="built_in">Identity</span>();</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f persp; <span class="comment">//透视变换</span></span><br><span class="line">    persp &lt;&lt; zNear, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, zNear, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, zNear+zFar, -zNear*zFar,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> t = <span class="built_in">tanf</span>(eye_fov / <span class="number">2</span> / <span class="number">180.0f</span> * MY_PI) * <span class="built_in">abs</span>(zNear);</span><br><span class="line">    <span class="type">float</span> r = t * aspect_ratio; </span><br><span class="line"></span><br><span class="line">    Eigen::Matrix4f scale, trans; <span class="comment">//正交变换</span></span><br><span class="line">    scale &lt;&lt; <span class="number">1</span>/r, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">1</span>/t, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>/(zNear-zFar), <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    trans &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -(zNear+zFar) / <span class="number">2</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    projection = scale * trans * persp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> projection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://lunanhua.gitee.io/images/blog/graphics/games101/work1_z_20.png"></p><center>绕z轴旋转20°</center>![](https://lunanhua.gitee.io/images/blog/graphics/games101/work1_random_60.png)<center>绕 [1, 1, 1] 旋转60°</center>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101 作业0</title>
      <link href="/2022/10/13/GAMES101-%E4%BD%9C%E4%B8%9A0/"/>
      <url>/2022/10/13/GAMES101-%E4%BD%9C%E4%B8%9A0/</url>
      
        <content type="html"><![CDATA[<h1 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h1><p>给定一个点 P&#x3D;(2, 1)，将该点绕原点先逆时针旋转45°，再平移(1, 2)，计算出变换后点的坐标（要求用齐次坐标进行计算）。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>参考：<a href="/2022/06/13/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/">虚拟机Ubuntu安装及远程连接</a>，<a href="/2022/06/14/C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">C++开发环境配置</a> </p><h2 id="Eigen-库的安装与使用"><a href="#Eigen-库的安装与使用" class="headerlink" title="Eigen 库的安装与使用"></a>Eigen 库的安装与使用</h2><p>参考 <a href="/2022/11/21/Eigen%E5%BA%93%E5%AD%A6%E4%B9%A0/">Eigen库学习</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>编译运行提供的测试文件 main.cpp，可正确执行。</p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* agrv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">p</span><span class="params">(<span class="number">2.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>)</span></span>; <span class="comment">//P点的齐次坐标</span></span><br><span class="line">    <span class="type">double</span> theta = <span class="number">45.0</span> / <span class="number">180.0</span> * M_PI; <span class="comment">//转换为弧度</span></span><br><span class="line">    Eigen::Matrix3f rotate; <span class="comment">//旋转矩阵</span></span><br><span class="line">    rotate &lt;&lt; <span class="built_in">cos</span>(theta), -<span class="built_in">sin</span>(theta), <span class="number">0</span>,</span><br><span class="line">              <span class="built_in">sin</span>(theta), <span class="built_in">cos</span>(theta), <span class="number">0</span>,</span><br><span class="line">              <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    Eigen::Matrix3f trans; <span class="comment">//平移矩阵</span></span><br><span class="line">    trans &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">             <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    p = trans * rotate * p; <span class="comment">//先旋转后平移</span></span><br><span class="line">    std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(work0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TPYE <span class="string">&quot;Debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(EIGEN3_INCLUDE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(work0 main.cpp)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.70711</span><br><span class="line">4.12132</span><br><span class="line">      1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/2022/09/17/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/17/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>访问者模式，表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_visitor.png"></p><p>优点：增加新的操作很容易。因为增加新的操作就意味增加一个新的访问者。访问者模式将有关的行为集中到一个访问者对象中。</p><p>缺点：系统增加新的数据结构比较困难。</p><p>应用：系统有比较稳定的数据结构，和易于变化的算法，适合使用访问者模式；反之，如果系统的数据结构对象易于变化，经常有新的数据对象增加进来，就不适合使用访问者模式。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本例中，Person 只有“男人”和“女人”两类，Action 类可以明确的定义两个接口，因此可以使用访问者模式。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_visitor_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Action</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Action* visitor)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象状态类</span></span><br><span class="line"><span class="comment">//根据具体元素，定义抽象接口，方法个数通常是稳定的，不容易发生变化</span></span><br><span class="line"><span class="comment">//这里有“男人反应”和“女人反应”两个方法接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Action</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getManConclusion</span><span class="params">(Man* concreteElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getWomanConclusion</span><span class="params">(Woman* concreteElement)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//男人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span>: <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//这里 accept 是一个双分派操作，它得到执行的操作不仅决定于 Action 类的具体状态，还决定于它访问的 Person 类别</span></span><br><span class="line">    <span class="comment">//首先将具体状态作为参数传递给 Man 类，完成一次分派；然后 Man 类调用 accept，将自己（this）作为参数传递出去，完成第二次分派</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Action* visitor)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visitor-&gt;<span class="built_in">getManConclusion</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_type; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_type = <span class="string">&quot;男人&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//女人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span>: <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Action* visitor)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visitor-&gt;<span class="built_in">getWomanConclusion</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_type; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_type = <span class="string">&quot;女人&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Success</span>: <span class="keyword">public</span> Action</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getManConclusion</span><span class="params">(Man* concreteElement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; concreteElement-&gt;<span class="built_in">getType</span>() &lt;&lt; <span class="keyword">this</span>-&gt;m_action &lt;&lt; <span class="string">&quot;时，背后多半有一个伟大的女人。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getWomanConclusion</span><span class="params">(Woman* concreteElement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; concreteElement-&gt;<span class="built_in">getType</span>() &lt;&lt; <span class="keyword">this</span>-&gt;m_action &lt;&lt; <span class="string">&quot;时，背后大多有一个不成功的男人。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_action = <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//失败</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Failing</span>: <span class="keyword">public</span> Action</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getManConclusion</span><span class="params">(Man* concreteElement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; concreteElement-&gt;<span class="built_in">getType</span>() &lt;&lt; <span class="keyword">this</span>-&gt;m_action &lt;&lt; <span class="string">&quot;时，坚持不懈。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getWomanConclusion</span><span class="params">(Woman* concreteElement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; concreteElement-&gt;<span class="built_in">getType</span>() &lt;&lt; <span class="keyword">this</span>-&gt;m_action &lt;&lt; <span class="string">&quot;时，痛定思痛。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_action = <span class="string">&quot;失败&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展恋爱状态</span></span><br><span class="line"><span class="comment">//增加新的操作很容易</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Amativeness</span>: <span class="keyword">public</span> Action</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getManConclusion</span><span class="params">(Man* concreteElement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; concreteElement-&gt;<span class="built_in">getType</span>() &lt;&lt; <span class="keyword">this</span>-&gt;m_action &lt;&lt; <span class="string">&quot;时，执子之手。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getWomanConclusion</span><span class="params">(Woman* concreteElement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; concreteElement-&gt;<span class="built_in">getType</span>() &lt;&lt; <span class="keyword">this</span>-&gt;m_action &lt;&lt; <span class="string">&quot;时，与子偕老。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_action = <span class="string">&quot;恋爱&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象结构类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectStructure</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">ObjectStructure</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(list&lt;Person*&gt;::iterator it = m_elements.<span class="built_in">begin</span>(); it != m_elements.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> *it;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attach</span><span class="params">(Person* element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_elements.<span class="built_in">push_back</span>(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Detach</span><span class="params">(Person* element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_elements.<span class="built_in">remove</span>(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据具体状态遍历具体元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Action* visitor)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(list&lt;Person*&gt;::iterator it = m_elements.<span class="built_in">begin</span>(); it != m_elements.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            (*it)-&gt;<span class="built_in">accept</span>(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//保存所有的具体元素</span></span><br><span class="line">    list&lt;Person*&gt; m_elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ObjectStructure os;</span><br><span class="line">    os.<span class="built_in">attach</span>(<span class="keyword">new</span> <span class="built_in">Man</span>());</span><br><span class="line">    os.<span class="built_in">attach</span>(<span class="keyword">new</span> <span class="built_in">Woman</span>());</span><br><span class="line">    Action* v1 = <span class="keyword">new</span> <span class="built_in">Success</span>();</span><br><span class="line">    Action* v2 = <span class="keyword">new</span> <span class="built_in">Failing</span>();</span><br><span class="line">    Action* v3 = <span class="keyword">new</span> <span class="built_in">Amativeness</span>();</span><br><span class="line">    os.<span class="built_in">display</span>(v1);</span><br><span class="line">    os.<span class="built_in">display</span>(v2);</span><br><span class="line">    os.<span class="built_in">display</span>(v3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">男人成功时，背后多半有一个伟大的女人。</span><br><span class="line">女人成功时，背后大多有一个不成功的男人。</span><br><span class="line">男人失败时，坚持不懈。</span><br><span class="line">女人失败时，痛定思痛。</span><br><span class="line">男人恋爱时，执子之手。</span><br><span class="line">女人恋爱时，与子偕老。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解释器模式</title>
      <link href="/2022/09/17/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/17/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>解释器模式，给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_interpreter.png"></p><p>应用场景：当有一个语言需要解释执行，并且可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。</p><p>优点：解释器模式可以很容易地改变和扩展文法，因为该模式使用类来表示文法规则，可使用继承来改变或扩展该文法。</p><p>缺点：解释器模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法可能难以管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例实现了音乐解释器。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_interpreter_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演奏内容</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayContext</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">PlayContext</span>(string text): <span class="built_in">m_text</span>(text) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setContext</span><span class="params">(string text)</span> </span>&#123; m_text = text; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getContext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_text; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_text;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象表达式类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expression</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">excute</span><span class="params">(string key, string value)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">interpreter</span><span class="params">(PlayContext* context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context-&gt;<span class="built_in">getContext</span>().<span class="built_in">length</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;string&gt; vec;</span><br><span class="line">            <span class="function">stringstream <span class="title">ss</span><span class="params">(context-&gt;getContext())</span></span>; <span class="comment">//使用字符串构造一个stringstream数据</span></span><br><span class="line">            <span class="comment">//按空格分割字符串</span></span><br><span class="line">            string buf;</span><br><span class="line">            <span class="keyword">while</span>(ss &gt;&gt; buf)</span><br><span class="line">                vec.<span class="built_in">push_back</span>(buf);</span><br><span class="line">            <span class="comment">//解释前两个字符串</span></span><br><span class="line">            <span class="built_in">excute</span>(vec[<span class="number">0</span>], vec[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//拼接剩下的字符串</span></span><br><span class="line">            string temp;</span><br><span class="line">            vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">begin</span>() + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (vector&lt;string&gt;::iterator it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                temp += *it;</span><br><span class="line">                <span class="keyword">if</span> (it &lt; vec.<span class="built_in">end</span>() - <span class="number">1</span>)</span><br><span class="line">                    temp += <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            context-&gt;<span class="built_in">setContext</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//音符类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Note</span>: <span class="keyword">public</span> Expression</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">excute</span><span class="params">(string key, string value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string note = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//switch不能使用string，此处使用char</span></span><br><span class="line">        <span class="keyword">switch</span> (key[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: note = <span class="string">&quot;1&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: note = <span class="string">&quot;2&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>: note = <span class="string">&quot;3&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>: note = <span class="string">&quot;4&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>: note = <span class="string">&quot;5&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: note = <span class="string">&quot;6&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: note = <span class="string">&quot;7&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; note &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//音阶类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scale</span>: <span class="keyword">public</span> Expression</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">excute</span><span class="params">(string key, string value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string scale = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (value[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: scale = <span class="string">&quot;低音&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: scale = <span class="string">&quot;中音&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: scale = <span class="string">&quot;高音&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; scale &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//音速类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speed</span>: <span class="keyword">public</span> Expression</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">excute</span><span class="params">(string key, string value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> v = <span class="built_in">stoi</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">500</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;快速 &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; <span class="number">1000</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;慢速 &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;中速 &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">PlayContext <span class="title">context</span><span class="params">(<span class="string">&quot;T 500 O 2 E 0.5 G 0.5 A 3 E 0.5 G 0.5 D 3 E 0.5 G 0.5 A 0.5 O 3 C 1&quot;</span>)</span></span>;</span><br><span class="line">    Expression* exp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(context.<span class="built_in">getContext</span>().<span class="built_in">length</span>() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> str = context.<span class="built_in">getContext</span>()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">switch</span> (str)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">            exp = <span class="keyword">new</span> Scale;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">            exp = <span class="keyword">new</span> Speed;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            exp = <span class="keyword">new</span> Note;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exp-&gt;<span class="built_in">interpreter</span>(&amp;context);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中速 中音 3 5 6 3 5 2 3 5 6 高音 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/2022/09/15/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/15/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>享元模式，运用共享技术有效地支持大量细粒度的对象。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_flyweight.png"></p><p>享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量细粒度的类实例来表示数据。如果能发现这些实例除了几个参数外基本上都是相同的，就能够大幅度地减少需要实例化的类的数量。如果能把那些参数移到类实例的外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例实现了网站资源的共享。WebsiteFactory，网站工厂类利用 map&lt;string, Website*&gt; 保存了当前存在的所有网站对象，当添加新的网站对象时，首先判断该对象是否存在，若存在则返回该对象，否则新建对象并返回；同时，将用户的数据（网站对象间不能共享的数据）在方法调用时传递进来。实现通过共享来减少实例对象的目的。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_flyweight_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">User</span>(string name): <span class="built_in">m_name</span>(name) &#123;&#125;</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象网站类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Website</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Website</span>() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">(User* user)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体网站类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteWebsite</span>: <span class="keyword">public</span> Website</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteWebsite</span>(string name): <span class="built_in">m_name</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">(User* user)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;网站名：&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; 用户：&quot;</span> &lt;&lt; user-&gt;m_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网站工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebsiteFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">WebsiteFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(map&lt;string, Website*&gt;::iterator it = m_flyweights.<span class="built_in">begin</span>(); it != m_flyweights.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Website* <span class="title">getWebsite</span><span class="params">(string key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(map&lt;string, Website*&gt;::iterator it = m_flyweights.<span class="built_in">begin</span>(); it != m_flyweights.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;first == key)</span><br><span class="line">                <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">        Website* website = <span class="keyword">new</span> <span class="built_in">ConcreteWebsite</span>(key);</span><br><span class="line">        m_flyweights.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, Website*&gt;(key, website));</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getWebsiteCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_flyweights.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string, Website*&gt; m_flyweights;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WebsiteFactory websiteFac;</span><br><span class="line">    Website* w1 = websiteFac.<span class="built_in">getWebsite</span>(<span class="string">&quot;B站&quot;</span>);</span><br><span class="line">    w1-&gt;<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">User</span>(<span class="string">&quot;小菜&quot;</span>));</span><br><span class="line">    Website* w2 = websiteFac.<span class="built_in">getWebsite</span>(<span class="string">&quot;B站&quot;</span>);</span><br><span class="line">    w2-&gt;<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">User</span>(<span class="string">&quot;大鸟&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Website* w3 = websiteFac.<span class="built_in">getWebsite</span>(<span class="string">&quot;斗鱼&quot;</span>);</span><br><span class="line">    w3-&gt;<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">User</span>(<span class="string">&quot;小菜&quot;</span>));</span><br><span class="line">    Website* w4 = websiteFac.<span class="built_in">getWebsite</span>(<span class="string">&quot;斗鱼&quot;</span>);</span><br><span class="line">    w4-&gt;<span class="built_in">use</span>(<span class="keyword">new</span> <span class="built_in">User</span>(<span class="string">&quot;大鸟&quot;</span>));</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;网站数量：&quot;</span> &lt;&lt; websiteFac.<span class="built_in">getWebsiteCount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">网站名：B站 用户：小菜</span><br><span class="line">网站名：B站 用户：大鸟</span><br><span class="line">网站名：斗鱼 用户：小菜</span><br><span class="line">网站名：斗鱼 用户：大鸟</span><br><span class="line">网站数量：2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2022/09/15/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/15/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>中介者模式，用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。 </p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_mediator.png"></p><p>中介者模式将原本网状的对象交互结构，转换为以中介者为中心的星形结构，减小了对象间的耦合度，但同时也将交互的复杂性转换为中介者的复杂性，使得中介者的设计较为复杂。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例实现了同事间通过中介交互的场景。每个具体同事只知道自己的行为，而不了解其他同事类的情况，但它们都认识中介者对象，并通过中介者发送消息；中介者需要知道所有具体同时类，并从具体同事接收消息，向具体同事对象发出命令。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colleague</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象中介者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">send</span><span class="params">(string msg, Colleague* colleague)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象同事类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Colleague</span>(Mediator* mediator): <span class="built_in">m_mediator</span>(mediator) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">send</span><span class="params">(string msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_mediator-&gt;<span class="built_in">send</span>(msg, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">notify</span><span class="params">(string msg)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Mediator* m_mediator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体同事类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteColleague1</span>: <span class="keyword">public</span> Colleague</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteColleague1</span>(Mediator* mediator): <span class="built_in">Colleague</span>(mediator) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(string msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;同事1得到消息：&quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteColleague2</span>: <span class="keyword">public</span> Colleague</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteColleague2</span>(Mediator* mediator): <span class="built_in">Colleague</span>(mediator) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(string msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;同事2得到消息：&quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体中介类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteMediator</span>: <span class="keyword">public</span> Mediator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setConcreteColleague1</span><span class="params">(Colleague* colleague)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_colleague1 = colleague;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setConcreteColleague2</span><span class="params">(Colleague* colleague)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_colleague2 = colleague;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">send</span><span class="params">(string msg, Colleague* colleague)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleague == m_colleague1)</span><br><span class="line">        &#123;</span><br><span class="line">            m_colleague2-&gt;<span class="built_in">notify</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_colleague1-&gt;<span class="built_in">notify</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Colleague* m_colleague1;</span><br><span class="line">    Colleague* m_colleague2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteMediator* mediator = <span class="keyword">new</span> ConcreteMediator;</span><br><span class="line">    Colleague* colleague1 = <span class="keyword">new</span> <span class="built_in">ConcreteColleague1</span>(mediator);</span><br><span class="line">    Colleague* colleague2 = <span class="keyword">new</span> <span class="built_in">ConcreteColleague2</span>(mediator);</span><br><span class="line">    mediator-&gt;<span class="built_in">setConcreteColleague1</span>(colleague1);</span><br><span class="line">    mediator-&gt;<span class="built_in">setConcreteColleague2</span>(colleague2);</span><br><span class="line"></span><br><span class="line">    colleague1-&gt;<span class="built_in">send</span>(<span class="string">&quot;吃过饭了么？&quot;</span>);</span><br><span class="line">    colleague2-&gt;<span class="built_in">send</span>(<span class="string">&quot;没有呢，你打算请客？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同事2得到消息：吃过饭了么？</span><br><span class="line">同事1得到消息：没有呢，你打算请客？</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2022/09/14/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/14/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>责任链模式，使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_chain.png"></p><p>优点：</p><ul><li>当用户提交一个请求时，请求会沿着链传递直到一个对象负责处理它；</li><li>接收者和发送者都没有对方的明确信息，且链中对象都不知道这个链的结构。因此，职责链简化了对象的相关连接。他们仅仅保持一个指向后继者的引用，而不用指向它所有接收者的引用。</li></ul><p>注意：</p><ul><li>存在一个请求走到链的末端都得不到处理的情况，或者因为没有正确的配置而得不到处理，所以在使用职责链模式时，需要考虑到各种情况所对应的处理对象。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例使用责任链模式解决员工请求的处理问题。本实例将 CommonManager、Majordomo、GeneralManager 三个级别依次增加的人员绑定为一条责任链，员工的请求会首先交给 CommonManager 处理，若 CommonManager 权限不够，则交给上级，直到交给 GeneralManager。同时，GeneralManager 要能够处理接收到的所有请求。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_chain_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Request</span></span><br><span class="line">&#123;</span><br><span class="line">    string requestType; <span class="comment">//请求类型</span></span><br><span class="line">    <span class="type">int</span> number; <span class="comment">//请求数量</span></span><br><span class="line">    string requestContent; <span class="comment">//请求描述</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象经理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Manager</span>(<span class="type">const</span> string&amp; name): <span class="built_in">m_name</span>(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setSuperior</span><span class="params">(Manager* superior)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_superior = superior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">requestApply</span><span class="params">(<span class="type">const</span> Request&amp; request)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">    Manager* m_superior; <span class="comment">//上级</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//经理，可批准两天内的假期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommonManager</span> : <span class="keyword">public</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CommonManager</span>(<span class="type">const</span> string&amp; name) : <span class="built_in">Manager</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">requestApply</span><span class="params">(<span class="type">const</span> Request&amp; request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.requestType == <span class="string">&quot;请假&quot;</span> &amp;&amp; request.number &lt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; request.requestContent &lt;&lt; <span class="string">&quot; 数量 &quot;</span> &lt;&lt; request.number &lt;&lt; <span class="string">&quot; 批准&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_superior != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_superior-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//总监，可批准一周内的假期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Majordomo</span> : <span class="keyword">public</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Majordomo</span>(<span class="type">const</span> string&amp; name) : <span class="built_in">Manager</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">requestApply</span><span class="params">(<span class="type">const</span> Request&amp; request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.requestType == <span class="string">&quot;请假&quot;</span> &amp;&amp; request.number &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; request.requestContent &lt;&lt; <span class="string">&quot; 数量 &quot;</span> &lt;&lt; request.number &lt;&lt; <span class="string">&quot; 批准&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span> (m_superior != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_superior-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//总经理类，最高权限，处理剩余的事务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralManager</span> : <span class="keyword">public</span> Manager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GeneralManager</span>(<span class="type">const</span> string&amp; name) : <span class="built_in">Manager</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">requestApply</span><span class="params">(<span class="type">const</span> Request&amp; request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.requestType == <span class="string">&quot;请假&quot;</span> || (request.requestType == <span class="string">&quot;加薪&quot;</span> &amp;&amp; request.number &lt;= <span class="number">500</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; request.requestContent &lt;&lt; <span class="string">&quot; 数量 &quot;</span> &lt;&lt; request.number &lt;&lt; <span class="string">&quot; 批准&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (request.requestType == <span class="string">&quot;加薪&quot;</span> &amp;&amp; request.number &gt; <span class="number">500</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; request.requestContent &lt;&lt; <span class="string">&quot; 数量 &quot;</span> &lt;&lt; request.number &lt;&lt; <span class="string">&quot; 考虑考虑&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//确保处理到所有请求</span></span><br><span class="line">            cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; request.requestContent &lt;&lt; <span class="string">&quot; 数量 &quot;</span> &lt;&lt; request.number &lt;&lt; <span class="string">&quot; 无法处理&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Manager* manager = <span class="keyword">new</span> <span class="built_in">CommonManager</span>(<span class="string">&quot;经理&quot;</span>);</span><br><span class="line">    Manager* major = <span class="keyword">new</span> <span class="built_in">Majordomo</span>(<span class="string">&quot;总监&quot;</span>);</span><br><span class="line">    Manager* generalManager = <span class="keyword">new</span> <span class="built_in">GeneralManager</span>(<span class="string">&quot;总经理&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置责任链关系</span></span><br><span class="line">    manager-&gt;<span class="built_in">setSuperior</span>(major);</span><br><span class="line">    major-&gt;<span class="built_in">setSuperior</span>(generalManager);</span><br><span class="line"></span><br><span class="line">    Request request;</span><br><span class="line">    request.requestType = <span class="string">&quot;请假&quot;</span>;</span><br><span class="line">    request.number = <span class="number">1</span>;</span><br><span class="line">    request.requestContent = <span class="string">&quot;小菜申请请假1天&quot;</span>;</span><br><span class="line">    manager-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line"></span><br><span class="line">    request.number = <span class="number">4</span>;</span><br><span class="line">    request.requestContent = <span class="string">&quot;小菜申请请假4天&quot;</span>;</span><br><span class="line">    manager-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line"></span><br><span class="line">    request.requestType = <span class="string">&quot;加薪&quot;</span>;</span><br><span class="line">    request.number = <span class="number">200</span>;</span><br><span class="line">    request.requestContent = <span class="string">&quot;小菜申请加薪200&quot;</span>;</span><br><span class="line">    manager-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line"></span><br><span class="line">    request.number = <span class="number">1000</span>;</span><br><span class="line">    request.requestContent = <span class="string">&quot;小菜申请加薪1000&quot;</span>;</span><br><span class="line">    manager-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line"></span><br><span class="line">    request.requestType = <span class="string">&quot;介绍对象&quot;</span>;</span><br><span class="line">    request.number = <span class="number">1</span>;</span><br><span class="line">    request.requestContent = <span class="string">&quot;小菜申请介绍对象&quot;</span>;</span><br><span class="line">    manager-&gt;<span class="built_in">requestApply</span>(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">经理:小菜申请请假1天 数量 1 批准</span><br><span class="line">总监:小菜申请请假4天 数量 4 批准</span><br><span class="line">总经理:小菜申请加薪200 数量 200 批准</span><br><span class="line">总经理:小菜申请加薪1000 数量 1000 考虑考虑</span><br><span class="line">总经理:小菜申请介绍对象 数量 1 无法处理</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2022/09/13/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/13/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>命令模式，将一个请求封装为一个对象，从而使得你可用不同的请求对客户进行参数化。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_command.png"></p><p>优点：</p><ol><li>可以较为容易地设计一个命令队列；</li><li>可以较为容易地将命令记入日志；</li><li>允许接收请求的一方决定是否否决请求；</li><li>可以容易地实现对请求的撤销和重做；</li><li>增加新的命令类不影响其他类，扩展性较好；</li><li>命令模式将请求一个操作的对象与知道怎么执行一个操作的对象分割开。</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求执行者，实现请求相关的操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Receiver</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">action1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请求1执行&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">action2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请求2执行&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象命令类，只需确定请求执行者（receiver）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Command</span>(Receiver* receiver): <span class="built_in">m_receiver</span>(receiver)&#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Command</span>() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Receiver* m_receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体命令类，执行命令时，执行具体的行为</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCommand1</span>: <span class="keyword">public</span> Command </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">ConcreteCommand1</span>(Receiver* receiver): <span class="built_in">Command</span>(receiver) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_receiver-&gt;<span class="built_in">action1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCommand2</span>: <span class="keyword">public</span> Command </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">ConcreteCommand2</span>(Receiver* receiver): <span class="built_in">Command</span>(receiver) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_receiver-&gt;<span class="built_in">action2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用者类，管理命令的接收与执行</span></span><br><span class="line"><span class="comment">//只记录了一个命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Invoker</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setCommand</span><span class="params">(Command* command)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">executeCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_command-&gt;<span class="built_in">execute</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Command* m_command;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//维护一个命令队列，实现命令的添加、撤销、执行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InvokerList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addCommand</span><span class="params">(Command* command)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_command.<span class="built_in">push_back</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cancelCommand</span><span class="params">(Command* command)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_command.<span class="built_in">remove</span>(command);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">executeCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command* cmd : m_command)</span><br><span class="line">        &#123;</span><br><span class="line">            cmd-&gt;<span class="built_in">execute</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;Command*&gt; m_command;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Receiver* r = <span class="keyword">new</span> <span class="built_in">Receiver</span>();</span><br><span class="line">    Command* c1 = <span class="keyword">new</span> <span class="built_in">ConcreteCommand1</span>(r);</span><br><span class="line">    Command* c2 = <span class="keyword">new</span> <span class="built_in">ConcreteCommand2</span>(r);</span><br><span class="line">    Invoker* invoker = <span class="keyword">new</span> <span class="built_in">Invoker</span>();</span><br><span class="line">    InvokerList* invokerList = <span class="keyword">new</span> <span class="built_in">InvokerList</span>();</span><br><span class="line"></span><br><span class="line">    invoker-&gt;<span class="built_in">setCommand</span>(c1);</span><br><span class="line">    invoker-&gt;<span class="built_in">executeCommand</span>();</span><br><span class="line"></span><br><span class="line">    invokerList-&gt;<span class="built_in">addCommand</span>(c1);</span><br><span class="line">    invokerList-&gt;<span class="built_in">addCommand</span>(c2);</span><br><span class="line">    invokerList-&gt;<span class="built_in">cancelCommand</span>(c1);</span><br><span class="line">    invokerList-&gt;<span class="built_in">executeCommand</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> r; r = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> c1; c1 = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> c2; c2 = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> invoker; invoker = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> invokerList; invokerList = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求1执行</span><br><span class="line">请求2执行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/2022/09/13/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/13/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>桥接模式，将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_bridge.png"></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例基于桥接模式，实现手机的分类。手机既可以按品牌分类，也可以按软件分类，但为了使程序具有较好的扩展性，需要将“品牌”、“软件”这些抽象元素分离出来，单独实现，减轻程序的耦合度。此时，增添新的手机品牌或软件，只需要在各自的部分添加新的子类。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_bridge_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机软件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandsetSoft</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">HandsetSoft</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机游戏</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandsetGame</span>: <span class="keyword">public</span> HandsetSoft</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;运行手机游戏&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//手机通讯录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandsetAddressList</span>: <span class="keyword">public</span> HandsetSoft</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;运行手机通讯录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机品牌</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandsetBrand</span> <span class="comment">// 手机品牌类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">HandsetBrand</span>() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setHandsetSoft</span><span class="params">(HandsetSoft* soft)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_soft = soft;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    HandsetSoft* m_soft;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机品牌N</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandsetBrandN</span>: <span class="keyword">public</span> HandsetBrand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_soft-&gt;<span class="built_in">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//手机品牌M</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandsetBrandM</span>: <span class="keyword">public</span> HandsetBrand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_soft-&gt;<span class="built_in">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;手机品牌N&quot;</span> &lt;&lt; endl;</span><br><span class="line">    HandsetBrand* brand1 = <span class="keyword">new</span> <span class="built_in">HandsetBrandN</span>();</span><br><span class="line">    brand1-&gt;<span class="built_in">setHandsetSoft</span>(<span class="keyword">new</span> <span class="built_in">HandsetGame</span>());</span><br><span class="line">    brand1-&gt;<span class="built_in">run</span>();</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;手机品牌M&quot;</span> &lt;&lt; endl;</span><br><span class="line">    HandsetBrand* brand2 = <span class="keyword">new</span> <span class="built_in">HandsetBrandM</span>();</span><br><span class="line">    brand2-&gt;<span class="built_in">setHandsetSoft</span>(<span class="keyword">new</span> <span class="built_in">HandsetAddressList</span>());</span><br><span class="line">    brand2-&gt;<span class="built_in">run</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">手机品牌N</span><br><span class="line">运行手机游戏</span><br><span class="line">手机品牌M</span><br><span class="line">运行手机通讯录</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2022/09/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>单例模式，保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_singleton.png"></p><p>在C++中，是将构造函数、拷贝构造函数以及赋值操作符声明为 private 权限，来阻止用户实例化一个类。通过类提供一个 public 权限下的 static 方法，获得这个类唯一的实例化对象。 </p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式，指类加载的时候就创建好实例化对象，是一种空间换时间的方式。 类加载的方式是按需加载，且只加载一次 。因此，线程只能拿到这个唯一的对象，饿汉式单例天生就是线程安全的。</p><p>1、单例对象为非指针类型时，会在程序运行的最后自动进行析构。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类内定义</span></span><br><span class="line">    <span class="type">static</span> Singleton myInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外初始化，不加static关键字</span></span><br><span class="line">Singleton Singleton::myInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Singleton* ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">懒汉式 单例对象创建</span><br><span class="line">start</span><br><span class="line">end</span><br><span class="line">懒汉式 单例对象销毁</span><br></pre></td></tr></table></figure><p>2、单例对象为指针类型时，在堆中申请内存，无法自动释放，导致内存泄漏。</p><p>（1）定义内存释放函数，由程序员手动释放。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针类型</span></span><br><span class="line">    <span class="type">static</span> Singleton* myInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">releaseInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> myInstance;</span><br><span class="line">        myInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，在堆中申请内存</span></span><br><span class="line">Singleton* Singleton::myInstance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Singleton* ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    ct1-&gt;<span class="built_in">releaseInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">懒汉式 单例对象创建</span><br><span class="line">start</span><br><span class="line">懒汉式 单例对象销毁</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>（2）利用GC机制（Garbage Collection），在类中定义一个内部类和它的静态对象，当该对象销毁时，会顺带释放单例对象所在的堆区空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针类型</span></span><br><span class="line">    <span class="type">static</span> Singleton* myInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GC</span> </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">GC</span>() &#123; cout &lt;&lt; <span class="string">&quot;内部类构造&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">        ~<span class="built_in">GC</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;内部类析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span> (myInstance != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> myInstance;</span><br><span class="line">                myInstance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//内部类的静态对象</span></span><br><span class="line">    <span class="type">static</span> GC m_gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::myInstance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">Singleton::GC Singleton::m_gc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Singleton* ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">懒汉式 单例对象创建</span><br><span class="line">内部类构造</span><br><span class="line">start</span><br><span class="line">end</span><br><span class="line">内部类析构</span><br><span class="line">懒汉式 单例对象销毁</span><br></pre></td></tr></table></figure><p>（3）使用智能指针来管理内存，当 shared_ptr 内部的引用计数为零时，会自动调用所指对象的析构函数来释放内存。可以将析构函数变为 public，但存在被用户显示调用的风险。还可以在 shared_ptr 定义时指定删除器，用于对象的释放。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;懒汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//智能指针</span></span><br><span class="line">    <span class="type">static</span> shared_ptr&lt;Singleton&gt; myInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> shared_ptr&lt;Singleton&gt; <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">shared_ptr&lt;Singleton&gt; <span class="title">Singleton::myInstance</span><span class="params">(<span class="keyword">new</span> Singleton(), [](Singleton* myInstance)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">delete</span> myInstance;</span></span></span><br><span class="line"><span class="params"><span class="function">    myInstance = <span class="literal">nullptr</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;Singleton&gt; ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    shared_ptr&lt;Singleton&gt; ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    shared_ptr&lt;Singleton&gt; ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">懒汉式 单例对象创建</span><br><span class="line">start</span><br><span class="line">end</span><br><span class="line">懒汉式 单例对象销毁</span><br></pre></td></tr></table></figure><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒汉式，在需要的时候才创建对象，是一种时间换空间的方式。由于懒汉式在调用 getInstance 时才创建单例对象，所以多线程情况下，同时调用该函数，有可能会创建多个实例，需要考虑线程同步问题。</p><p>1、（单线程）单例对象为非指针类型时，会在第一次调用 getInstance 函数时创建，程序运行的最后析构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;饿汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;饿汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton myInstance;</span><br><span class="line">        <span class="keyword">return</span> &amp;myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Singleton* ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">饿汉式 单例对象创建</span><br><span class="line">end</span><br><span class="line">饿汉式 单例对象销毁</span><br></pre></td></tr></table></figure><p>2、（单线程）单例对象为指针类型时，利用GC机制释放堆区内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;饿汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;饿汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> Singleton* myInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GC</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">GC</span>() &#123; cout &lt;&lt; <span class="string">&quot;内部类构造&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">        ~<span class="built_in">GC</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;内部类析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span> (myInstance != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> myInstance;</span><br><span class="line">                myInstance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//内部类的静态对象</span></span><br><span class="line">    <span class="type">static</span> GC m_gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (myInstance == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myInstance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::myInstance = <span class="literal">nullptr</span>;</span><br><span class="line">Singleton::GC Singleton::m_gc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Singleton* ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内部类构造</span><br><span class="line">start</span><br><span class="line">饿汉式 单例对象创建</span><br><span class="line">end</span><br><span class="line">内部类析构</span><br><span class="line">饿汉式 单例对象销毁</span><br></pre></td></tr></table></figure><p>3、（多线程）GC机制和 lock_guard 解决线程同步问题。lock_guard 是一个模板类，它在自身作用域（生命周期）中具有构造时加锁，析构时解锁的功能。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;饿汉式 单例对象创建&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; cout &lt;&lt; <span class="string">&quot;饿汉式 单例对象销毁&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> Singleton* myInstance;</span><br><span class="line">    <span class="type">static</span> mutex m_mutex; <span class="comment">//互斥体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GC</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">GC</span>() &#123; cout &lt;&lt; <span class="string">&quot;内部类构造&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">        ~<span class="built_in">GC</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;内部类析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span> (myInstance != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> myInstance;</span><br><span class="line">                myInstance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//内部类的静态对象</span></span><br><span class="line">    <span class="type">static</span> GC m_gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (myInstance == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第一次判断让没有初始化的线程进入</span></span><br><span class="line">            <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>; <span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">if</span> (myInstance == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//第二次判断保证单例对象只被初始化一次</span></span><br><span class="line">                myInstance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::myInstance = <span class="literal">nullptr</span>;</span><br><span class="line">Singleton::GC Singleton::m_gc;</span><br><span class="line">mutex Singleton::m_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;start&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Singleton* ct1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton* ct3 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内部类构造</span><br><span class="line">start</span><br><span class="line">饿汉式 单例对象创建</span><br><span class="line">end</span><br><span class="line">内部类析构</span><br><span class="line">饿汉式 单例对象销毁</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2022/09/06/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/06/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>迭代器模式，提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_iterator.png"></p><p>当需要对聚集有多种方式遍历时，可以考虑使用迭代器模式。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>Iterator，迭代器抽象类，定义迭代器的统一接口；Aggregate，聚集抽象类，定义聚集操作的统一接口；ConcreteIterator&#x2F;ConcreteIteratorDesc，分别实现了聚集的正向和反向迭代；ConcreteAggregate，用于存放和管理聚集对象。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">first</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">next</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">isDone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">currentItem</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聚集抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aggregate</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getCount</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">pop</span><span class="params">(<span class="type">int</span> n)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正向迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteIterator</span>: <span class="keyword">public</span> Iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteIterator</span>(Aggregate* aggregate)</span><br><span class="line">    &#123;</span><br><span class="line">        m_aggregate = aggregate;</span><br><span class="line">        m_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">first</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_aggregate-&gt;<span class="built_in">pop</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string tmp;</span><br><span class="line">        m_count++;</span><br><span class="line">        <span class="keyword">if</span>(m_count &lt; m_aggregate-&gt;<span class="built_in">getCount</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = m_aggregate-&gt;<span class="built_in">pop</span>(m_count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">isDone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_count &gt;= m_aggregate-&gt;<span class="built_in">getCount</span>() ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">currentItem</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_aggregate-&gt;<span class="built_in">pop</span>(m_count);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Aggregate* m_aggregate;</span><br><span class="line">    <span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//反向迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteIteratorDesc</span>: <span class="keyword">public</span> Iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteIteratorDesc</span>(Aggregate* aggregate)</span><br><span class="line">    &#123;</span><br><span class="line">        m_aggregate = aggregate;</span><br><span class="line">        m_count = m_aggregate-&gt;<span class="built_in">getCount</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">first</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_aggregate-&gt;<span class="built_in">pop</span>(m_aggregate-&gt;<span class="built_in">getCount</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string tmp;</span><br><span class="line">        m_count--;</span><br><span class="line">        <span class="keyword">if</span>(m_count &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = m_aggregate-&gt;<span class="built_in">pop</span>(m_count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">isDone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_count &lt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">currentItem</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_aggregate-&gt;<span class="built_in">pop</span>(m_count);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Aggregate* m_aggregate;</span><br><span class="line">    <span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体聚集类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteAggregate</span>: <span class="keyword">public</span> Aggregate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteAggregate</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_iterator = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_vector.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> string&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_vector.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">pop</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m_vector.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            s = m_vector.<span class="built_in">at</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; m_vector;</span><br><span class="line">    Iterator* m_iterator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Aggregate* aggregate = <span class="keyword">new</span> <span class="built_in">ConcreteAggregate</span>();</span><br><span class="line">    aggregate-&gt;<span class="built_in">push</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">    aggregate-&gt;<span class="built_in">push</span>(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">    aggregate-&gt;<span class="built_in">push</span>(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Iterator* iter1 = <span class="keyword">new</span> <span class="built_in">ConcreteIterator</span>(aggregate);</span><br><span class="line">    <span class="keyword">while</span>(!iter1-&gt;<span class="built_in">isDone</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; iter1-&gt;<span class="built_in">currentItem</span>() &lt;&lt; endl;</span><br><span class="line">        iter1-&gt;<span class="built_in">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Iterator* iter2 = <span class="keyword">new</span> <span class="built_in">ConcreteIteratorDesc</span>(aggregate);</span><br><span class="line">    <span class="keyword">while</span>(!iter2-&gt;<span class="built_in">isDone</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; iter2-&gt;<span class="built_in">currentItem</span>() &lt;&lt; endl;</span><br><span class="line">        iter2-&gt;<span class="built_in">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">pear</span><br><span class="line">pear</span><br><span class="line">banana</span><br><span class="line">apple</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合模式</title>
      <link href="/2022/09/05/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/05/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_composite.png"></p><p>优点：组合模式让客户可以一致地使用组合结构和单个对象。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例基于组合模式思想，解决了公司管理问题。Company，抽象公司类，提供了统一的接口；ConcreteCompany，具体公司类，为树枝节点，该类通过 list 存储子节点，并实现节点的增加和删除方法，并通过访问所有子节点实现 display 和 lineOfDuty；HRDepartment&#x2F;FinanceDepartment，为叶子节点，不需要管理子节点。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_composite_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公司类，提供统一接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Company</span>(string name): <span class="built_in">m_name</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add</span><span class="params">(Company* c)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">remove</span><span class="params">(Company* c)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">int</span> depth)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">lineOfDuty</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树枝节点 具体公司类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCompany</span>: <span class="keyword">public</span> Company</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteCompany</span>(string name): <span class="built_in">Company</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Company* c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_children-&gt;<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Company* c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_children-&gt;<span class="built_in">remove</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">string <span class="title">s</span><span class="params">(depth, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (list&lt;Company*&gt;::iterator it = m_children-&gt;<span class="built_in">begin</span>(); it != m_children-&gt;<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            (*it)-&gt;<span class="built_in">display</span>(depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lineOfDuty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (list&lt;Company*&gt;::iterator it = m_children-&gt;<span class="built_in">begin</span>(); it != m_children-&gt;<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            (*it)-&gt;<span class="built_in">lineOfDuty</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;Company*&gt;* m_children = <span class="keyword">new</span> list&lt;Company*&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叶子节点 人力资源部</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HRDepartment</span>: <span class="keyword">public</span> Company</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HRDepartment</span>(string name): <span class="built_in">Company</span>(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Company* c)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Company* c)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">int</span> depth)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">string <span class="title">s</span><span class="params">(depth, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lineOfDuty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot; 员工招聘培训管理&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叶子节点 财务部</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FinanceDepartment</span>: <span class="keyword">public</span> Company </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FinanceDepartment</span>(string name): <span class="built_in">Company</span>(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Company* c)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Company* c)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="function">string <span class="title">s</span><span class="params">(depth, <span class="string">&#x27;-&#x27;</span>)</span></span>;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">lineOfDuty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_name &lt;&lt; <span class="string">&quot; 公司财务收支管理&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Company* root = <span class="keyword">new</span> <span class="built_in">ConcreteCompany</span>(<span class="string">&quot;上海总公司&quot;</span>);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;上海总公司人力资源部&quot;</span>));</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;上海总公司财务部&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Company* hangzhou = <span class="keyword">new</span> <span class="built_in">ConcreteCompany</span>(<span class="string">&quot;杭州分公司&quot;</span>);</span><br><span class="line">    hangzhou-&gt;<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;杭州分公司人力资源部&quot;</span>));</span><br><span class="line">    hangzhou-&gt;<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;杭州分公司财务部&quot;</span>));</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(hangzhou);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;结构图：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    root-&gt;<span class="built_in">display</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;职责图：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    root-&gt;<span class="built_in">lineOfDuty</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">结构图：</span><br><span class="line">-上海总公司</span><br><span class="line">--上海总公司人力资源部</span><br><span class="line">--上海总公司财务部</span><br><span class="line">--杭州分公司</span><br><span class="line">---杭州分公司人力资源部</span><br><span class="line">---杭州分公司财务部</span><br><span class="line">职责图：</span><br><span class="line">上海总公司人力资源部 员工招聘培训管理</span><br><span class="line">上海总公司财务部 公司财务收支管理</span><br><span class="line">杭州分公司人力资源部 员工招聘培训管理</span><br><span class="line">杭州分公司财务部 公司财务收支管理</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2022/09/04/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/04/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>备忘录模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_memento.png"></p><p>使用场景：</p><ul><li>功能复杂时，需要记录属性历史的类（不一定记录所有属性）；</li><li>在某个系统中使用命令模式，需要实现命令的撤销功能；</li><li>当类状态改变时，有可能这个状态无效，可以使用暂时存储的备忘录将状态复原。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例基于备忘录模式思想，解决了游戏状态恢复问题。GameRole，游戏角色类，用于管理游戏属性信息，并提供保存和恢复游戏状态的方法；RoleStateMemento，用于存储需要暂存的状态信息；RoleStateCaretaker，角色状态管理者，用于暂存游戏状态，辅助 GameRole 完成游戏状态的保存和恢复，保证了 GameRole 的封装性。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_memento_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//角色状态存储</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoleStateMemento</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RoleStateMemento</span>(<span class="type">int</span> vit, <span class="type">int</span> atk, <span class="type">int</span> def): <span class="built_in">m_vit</span>(vit), <span class="built_in">m_atk</span>(atk), <span class="built_in">m_def</span>(def) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_vit; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVit</span><span class="params">(<span class="type">int</span> vit)</span> </span>&#123; m_vit = vit; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAtk</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_atk; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> </span>&#123; m_atk = atk; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_def; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDef</span><span class="params">(<span class="type">int</span> def)</span> </span>&#123; m_def = def; &#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_vit;</span><br><span class="line">    <span class="type">int</span> m_atk;</span><br><span class="line">    <span class="type">int</span> m_def;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//角色状态管理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoleStateCaretaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">RoleStateMemento* <span class="title">getMemento</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_memento; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setMemento</span><span class="params">(RoleStateMemento* memento)</span> </span>&#123; m_memento = memento; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    RoleStateMemento* m_memento;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏角色类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameRole</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GameRole</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_vit = <span class="number">100</span>;</span><br><span class="line">        m_atk = <span class="number">100</span>;</span><br><span class="line">        m_def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">RoleStateMemento* <span class="title">saveRoleState</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RoleStateMemento</span>(m_vit, m_atk, m_def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoveryRoleState</span><span class="params">(RoleStateMemento* memento)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_vit = memento-&gt;<span class="built_in">getVit</span>();</span><br><span class="line">        m_atk = memento-&gt;<span class="built_in">getAtk</span>();</span><br><span class="line">        m_def = memento-&gt;<span class="built_in">getDef</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_vit = <span class="number">10</span>;</span><br><span class="line">        m_atk = <span class="number">10</span>;</span><br><span class="line">        m_def = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;角色当前状态：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;体力：&quot;</span> &lt;&lt; m_vit &lt;&lt; <span class="string">&quot; 攻击力：&quot;</span> &lt;&lt; m_atk &lt;&lt; <span class="string">&quot; 防御力：&quot;</span> &lt;&lt; m_def &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_vit;</span><br><span class="line">    <span class="type">int</span> m_atk;</span><br><span class="line">    <span class="type">int</span> m_def;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GameRole role;</span><br><span class="line">    role.<span class="built_in">display</span>(); <span class="comment">//显示初始状态</span></span><br><span class="line">    RoleStateCaretaker caretaker;</span><br><span class="line">    caretaker.<span class="built_in">setMemento</span>(role.<span class="built_in">saveRoleState</span>()); <span class="comment">//存储当前状态</span></span><br><span class="line">    role.<span class="built_in">fight</span>(); <span class="comment">//战斗</span></span><br><span class="line">    role.<span class="built_in">display</span>();</span><br><span class="line">    role.<span class="built_in">recoveryRoleState</span>(caretaker.<span class="built_in">getMemento</span>()); <span class="comment">//恢复原始状态</span></span><br><span class="line">    role.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">角色当前状态：</span><br><span class="line">体力：100 攻击力：100 防御力：100</span><br><span class="line">角色当前状态：</span><br><span class="line">体力：10 攻击力：10 防御力：10</span><br><span class="line">角色当前状态：</span><br><span class="line">体力：100 攻击力：100 防御力：100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2022/09/04/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/04/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>适配器模式，将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_adapter.png"></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>在本例中，Translator 作为适配器类，将 ForeignCenter 的特殊接口转换为 Player 的统一接口，使得程序更简单，更直接，更紧凑。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_adapter_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//球员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Player</span>(string name)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">attack</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">defense</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Player</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前锋</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Forwards</span> : <span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Forwards</span>(string name): <span class="built_in">Player</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;前锋&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;进攻&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">defense</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;前锋&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;防守&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中锋</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Center</span> : <span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Center</span>(string name): <span class="built_in">Player</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;中锋&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;进攻&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">defense</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;中锋&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;防守&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后卫</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Guards</span> : <span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Guards</span>(string name) :<span class="built_in">Player</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;后卫&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;进攻&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">defense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;后卫&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;防守&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外籍中锋</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForeignCenter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ForeignCenter</span>(string name)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foreignAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;外籍中锋&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;攻击&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foreignDefense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;外籍中锋&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;防守&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类 翻译者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Translator</span>: <span class="keyword">public</span> Player &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Translator</span>(string name): <span class="built_in">Player</span>(name) &#123;</span><br><span class="line">        m_foreignCenter = <span class="keyword">new</span> <span class="built_in">ForeignCenter</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Translator</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_foreignCenter != <span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">delete</span> m_foreignCenter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_foreignCenter-&gt;foreignAttack();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">defense</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_foreignCenter-&gt;foreignDefense();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ForeignCenter* m_foreignCenter; <span class="comment">//外籍中锋</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Player* b = <span class="keyword">new</span> <span class="built_in">Forwards</span>(<span class="string">&quot;巴蒂尔&quot;</span>);</span><br><span class="line">    b-&gt;<span class="built_in">attack</span>();</span><br><span class="line">    Player* c = <span class="keyword">new</span> <span class="built_in">Guards</span>(<span class="string">&quot;麦克格雷迪&quot;</span>);</span><br><span class="line">    c-&gt;<span class="built_in">attack</span>();</span><br><span class="line">    Player* ym  = <span class="keyword">new</span> <span class="built_in">Translator</span>(<span class="string">&quot;姚明&quot;</span>);</span><br><span class="line">    ym-&gt;<span class="built_in">attack</span>();</span><br><span class="line">    ym-&gt;<span class="built_in">defense</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前锋巴蒂尔进攻</span><br><span class="line">后卫麦克格雷迪进攻</span><br><span class="line">外籍中锋姚明攻击</span><br><span class="line">外籍中锋姚明防守</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态模式</title>
      <link href="/2022/09/03/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/03/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p> 状态模式，当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_state.png"></p><p>状态模式主要解决的是当一个对象状态装换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。 </p><p>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式了。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例基于状态模式思想，解决了工作状态问题。State，抽象状态类，定义了与状态相关的行为接口，并在每一个具体状态类中得到实现。状态模式将各种状态的转移逻辑转移到 State 的子类中，减少了相互间的依赖，便于程序的扩展。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_state_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Work</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Work</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHour</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_hour; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setHour</span><span class="params">(<span class="type">int</span> hour)</span> </span>&#123; m_hour = hour; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setState</span><span class="params">(State* s)</span> </span>&#123; m_current = s; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setFinish</span><span class="params">(<span class="type">bool</span> finish)</span> </span>&#123; m_finish = finish; &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">getFinish</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_finish; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    State* m_current;</span><br><span class="line">    <span class="type">int</span> m_hour;</span><br><span class="line">    <span class="type">bool</span> m_finish = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上午工作状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForenoonState</span>: <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//中午工作状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoonState</span>: <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//下午工作状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AfternoonState</span>: <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//傍晚工作状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EveningState</span>: <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//睡眠工作状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SleepingState</span>: <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前时间：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;点 睡觉了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//下班工作状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestState</span> :<span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeProgram</span><span class="params">(Work* w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Work::<span class="built_in">Work</span>()</span><br><span class="line">&#123;</span><br><span class="line">    m_current = <span class="keyword">new</span> <span class="built_in">ForenoonState</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Work::writeProgram</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_current-&gt;<span class="built_in">writeProgram</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForenoonState::writeProgram</span><span class="params">(Work* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() &lt; <span class="number">12</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前时间：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;点 上午工作，精神百倍&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        w-&gt;<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">NoonState</span>());</span><br><span class="line">        w-&gt;<span class="built_in">writeProgram</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NoonState::writeProgram</span><span class="params">(Work* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() &lt; <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前时间：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;点 吃午饭，睡午觉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        w-&gt;<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">AfternoonState</span>());</span><br><span class="line">        w-&gt;<span class="built_in">writeProgram</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AfternoonState::writeProgram</span><span class="params">(Work* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() &lt; <span class="number">17</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前时间：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;点 下午状态还不错&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        w-&gt;<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">EveningState</span>());</span><br><span class="line">        w-&gt;<span class="built_in">writeProgram</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EveningState::writeProgram</span><span class="params">(Work* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">getFinish</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        w-&gt;<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">RestState</span>());</span><br><span class="line">        w-&gt;<span class="built_in">writeProgram</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() &lt; <span class="number">21</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;当前时间：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;点 加班哦，疲惫至极&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w-&gt;<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">SleepingState</span>());</span><br><span class="line">            w-&gt;<span class="built_in">writeProgram</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RestState::writeProgram</span><span class="params">(Work* w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() &lt; <span class="number">21</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前时间：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;点 下班回家了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        w-&gt;<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">SleepingState</span>());</span><br><span class="line">        w-&gt;<span class="built_in">writeProgram</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Work w;</span><br><span class="line">    w.<span class="built_in">setHour</span>(<span class="number">10</span>);</span><br><span class="line">    w.<span class="built_in">writeProgram</span>();</span><br><span class="line">    w.<span class="built_in">setHour</span>(<span class="number">12</span>);</span><br><span class="line">    w.<span class="built_in">writeProgram</span>();</span><br><span class="line">    w.<span class="built_in">setHour</span>(<span class="number">13</span>);</span><br><span class="line">    w.<span class="built_in">writeProgram</span>();</span><br><span class="line">    w.<span class="built_in">setHour</span>(<span class="number">17</span>);</span><br><span class="line">    w.<span class="built_in">writeProgram</span>();</span><br><span class="line">    w.<span class="built_in">setFinish</span>(<span class="literal">true</span>);</span><br><span class="line">    w.<span class="built_in">setHour</span>(<span class="number">19</span>);</span><br><span class="line">    w.<span class="built_in">writeProgram</span>();</span><br><span class="line">    w.<span class="built_in">setHour</span>(<span class="number">22</span>);</span><br><span class="line">    w.<span class="built_in">writeProgram</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前时间：10点 上午工作，精神百倍</span><br><span class="line">当前时间：12点 吃午饭，睡午觉</span><br><span class="line">当前时间：13点 下午状态还不错</span><br><span class="line">当前时间：17点 加班哦，疲惫至极</span><br><span class="line">当前时间：19点 下班回家了</span><br><span class="line">当前时间：22点 睡觉了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2022/09/02/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/02/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>抽象工厂模式，提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_abstract_factory.png"></p><p>优点：</p><ul><li>使用了抽象工厂接口，具体工厂只需要在初始化时使用一次，使得具体工厂的切换变得很容易；</li><li>让具体的创建实例过程与客户端分离，客户端通过抽象接口操纵实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中。</li></ul><p>缺点：</p><ul><li>增加功能时，需要改动很多类。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>AbstractProductA 和 AbstractProductB 是两个抽象产品，ProductA、ProductB 就是它们的具体类实现。AbstractFactory 是一个抽象工厂接口，里面应该包含所有的产品创建的抽象方法，这些方法将在具体工厂中得到实现。客户端可以使用不同的具体工厂，创建不同的产品对象。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractProductA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA1</span>: <span class="keyword">public</span> AbstractProductA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am ProductA1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA2</span>: <span class="keyword">public</span> AbstractProductA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am ProductA2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractProductB</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB1</span>: <span class="keyword">public</span> AbstractProductB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am ProductB1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB2</span>: <span class="keyword">public</span> AbstractProductB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am ProductB2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractProductA* <span class="title">creatProductA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractProductB* <span class="title">creatProductB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span>: <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractProductA* <span class="title">creatProductA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">AbstractProductB* <span class="title">creatProductB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span>: <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractProductA* <span class="title">creatProductA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">AbstractProductB* <span class="title">creatProductB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractFactory* factory1 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory1</span>();</span><br><span class="line">    AbstractProductA* productA1 = factory1-&gt;<span class="built_in">creatProductA</span>();</span><br><span class="line">    AbstractProductB* productB1 = factory1-&gt;<span class="built_in">creatProductB</span>();</span><br><span class="line">    productA1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    productB1-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    AbstractFactory* factory2 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory2</span>();</span><br><span class="line">    AbstractProductA* productA2 = factory2-&gt;<span class="built_in">creatProductA</span>();</span><br><span class="line">    AbstractProductB* productB2 = factory2-&gt;<span class="built_in">creatProductB</span>();</span><br><span class="line">    productA2-&gt;<span class="built_in">show</span>();</span><br><span class="line">    productB2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I am ProductA1</span><br><span class="line">I am ProductB1</span><br><span class="line">I am ProductA2</span><br><span class="line">I am ProductB2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2022/08/29/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/29/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>观察者模式，又叫发布-订阅模式，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_observer.png"></p><p>观察者模式所做的工作其实就是在解除耦合。让耦合的双方都依赖于抽象，而不依赖于具体，从而使得各自的变化都不会影响到另外一边的变化，使用场景如下：</p><ul><li>当一个对象的改变需要同时改变其他对象，或者不知道具体有多少对象有待改变时，应该考虑使用观察者模式；</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面，这时使用观察者模式可以将这二者封装在独立的对象中，使它们可以各自独立地改变和复用。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例使用观察者模式解决老板查岗问题。Observer，抽象观察者，为所有的具体观察者定义一个更新接口；Subject，主题&#x2F;抽象通知者，把所有对观察者对象的引用保存在一个聚集里，提供增加和删除观察者对象的方法，并保存了一个指向具体主题对象的引用；StockObserver&#x2F;NBAObserver，具体观察者，实现抽象观察者角色所要求的更新接口；Secretary，具体主题，当主题状态发生改变时，给所有登记过的观察者发出更新通知。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_observer_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向引用说明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Observer</span>(string name, Subject* subject)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">        m_subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">    Subject* m_subject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象通知者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_action;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">attach</span><span class="params">(Observer* observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">detach</span><span class="params">(Observer* observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">notify</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    list&lt;Observer*&gt; m_observers;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StockObserver</span>: <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StockObserver</span>(string name, Subject* subject): <span class="built_in">Observer</span>(name, subject) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_subject-&gt;m_action &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; 关闭股票行情继续工作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NBAObserver</span>: <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NBAObserver</span>(string name, Subject* subject): <span class="built_in">Observer</span>(name, subject) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_subject-&gt;m_action &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; 关闭NBA继续工作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体通知者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Secretary</span>: <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attach</span><span class="params">(Observer* observer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_observers.<span class="built_in">push_back</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">detach</span><span class="params">(Observer* observer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(list&lt;Observer*&gt;::iterator it = m_observers.<span class="built_in">begin</span>(); it != m_observers.<span class="built_in">end</span>(); )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*it) == observer)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//先保存指针，再删除元素，避免指针悬空</span></span><br><span class="line">                list&lt;Observer*&gt;::iterator tmp = it;</span><br><span class="line">                it++;</span><br><span class="line">                m_observers.<span class="built_in">erase</span>(tmp);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                it++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (list&lt;Observer*&gt;::iterator it = m_observers.<span class="built_in">begin</span>(); it != m_observers.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            (*it)-&gt;<span class="built_in">update</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Secretary* secretary = <span class="keyword">new</span> <span class="built_in">Secretary</span>();</span><br><span class="line">    Observer* observer1 = <span class="keyword">new</span> <span class="built_in">StockObserver</span>(<span class="string">&quot;张三&quot;</span>, secretary);</span><br><span class="line">    Observer* observer2 = <span class="keyword">new</span> <span class="built_in">NBAObserver</span>(<span class="string">&quot;李四&quot;</span>, secretary);</span><br><span class="line">    secretary-&gt;<span class="built_in">attach</span>(observer1);</span><br><span class="line">    secretary-&gt;<span class="built_in">attach</span>(observer2);</span><br><span class="line">    secretary-&gt;<span class="built_in">detach</span>(observer1);</span><br><span class="line">    secretary-&gt;m_action = <span class="string">&quot;老板回来了&quot;</span>;</span><br><span class="line">    secretary-&gt;<span class="built_in">notify</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">老板回来了 李四 关闭NBA继续工作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2022/08/28/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/28/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>建造者模式，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_builder.png"></p><p>建造者模式主要用于创建一些复杂的对象，这些对象内部构建的建造顺序通常是稳定的，但对象内部的构建通常面临着复杂的变化。</p><p>建造者的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要再定义一个具体的建造者就可以了。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例使用建造者模式实现产品创建功能。Product 维护了一个 list 成员和两个方法，用于记录产品的创建过程；Builder，抽象建造类，定义了产品创建的基本框架；ConcreteBuilder，具体建造类，实现了建造方法；Director，指挥者类，封装了建造过程，使得产品建造过程对用户透明。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(string part)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_parts-&gt;<span class="built_in">push_back</span>(part);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;产品创建：&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (list&lt;string&gt;::iterator it = m_parts-&gt;<span class="built_in">begin</span>(); it != m_parts-&gt;<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;string&gt;* m_parts = <span class="keyword">new</span> list&lt;string&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象建造类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//建造产品所需物品</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">builderPart1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">builderPart2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//获取成品</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">getResult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体建造类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteBuilder1</span>: <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">builderPart1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_product-&gt;<span class="built_in">add</span>(<span class="string">&quot;部件A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">builderPart2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_product-&gt;<span class="built_in">add</span>(<span class="string">&quot;部件B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Product* m_product = <span class="keyword">new</span> Product;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteBuilder2</span>: <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">builderPart1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_product-&gt;<span class="built_in">add</span>(<span class="string">&quot;部件X&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">builderPart2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_product-&gt;<span class="built_in">add</span>(<span class="string">&quot;部件Y&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Product* m_product = <span class="keyword">new</span> Product;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥者类，指挥建造过程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(Builder* builder)</span> </span>&#123;</span><br><span class="line">builder-&gt;<span class="built_in">builderPart1</span>();</span><br><span class="line">builder-&gt;<span class="built_in">builderPart2</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//指挥者</span></span><br><span class="line">Director* diractor = <span class="keyword">new</span> Director;</span><br><span class="line"><span class="comment">//建造者</span></span><br><span class="line">Builder* b1 = <span class="keyword">new</span> ConcreteBuilder1;  </span><br><span class="line">Builder* b2 = <span class="keyword">new</span> ConcreteBuilder2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥建造者生产</span></span><br><span class="line">diractor-&gt;<span class="built_in">construct</span>(b1);</span><br><span class="line">Product* p1 = b1-&gt;<span class="built_in">getResult</span>();</span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">diractor-&gt;<span class="built_in">construct</span>(b2);</span><br><span class="line">Product* p2 = b2-&gt;<span class="built_in">getResult</span>();</span><br><span class="line">p2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> b2;</span><br><span class="line"><span class="keyword">delete</span> b1;</span><br><span class="line"><span class="keyword">delete</span> diractor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">产品创建：部件A 部件B </span><br><span class="line">产品创建：部件X 部件Y </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2022/08/28/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/28/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>外观模式，为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_facade.png"></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemOne</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">methodOne</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;method1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemTwo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">methodTwo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;method2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemThree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">methodThree</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;method3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemFour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">methodFour</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;method4&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外观类，需要了解所有子系统的方法和属性，进行组合，已备外界调用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Facade</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Facade</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_one = <span class="keyword">new</span> <span class="built_in">SubSystemOne</span>();</span><br><span class="line">        m_two = <span class="keyword">new</span> <span class="built_in">SubSystemTwo</span>();</span><br><span class="line">        m_three = <span class="keyword">new</span> <span class="built_in">SubSystemThree</span>();</span><br><span class="line">        m_four= <span class="keyword">new</span> <span class="built_in">SubSystemFour</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">methodA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MethodGroupA&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_one-&gt;<span class="built_in">methodOne</span>();</span><br><span class="line">        m_two-&gt;<span class="built_in">methodTwo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">methodB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MethodGroupB&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_three-&gt;<span class="built_in">methodThree</span>();</span><br><span class="line">        m_four-&gt;<span class="built_in">methodFour</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SubSystemOne* m_one;</span><br><span class="line">    SubSystemTwo* m_two;</span><br><span class="line">    SubSystemThree* m_three;</span><br><span class="line">    SubSystemFour* m_four;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Facade* facade = <span class="keyword">new</span> <span class="built_in">Facade</span>();</span><br><span class="line">    facade-&gt;<span class="built_in">methodA</span>();</span><br><span class="line">    facade-&gt;<span class="built_in">methodB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MethodGroupA</span><br><span class="line">method1</span><br><span class="line">method2</span><br><span class="line">MethodGroupB</span><br><span class="line">method3</span><br><span class="line">method4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/2022/08/25/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/25/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>模板模式，在父类中定义算法的骨架，而将一些步骤延迟到子类中。模板模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_template.png"></p><p>优点：提供了一个很好的代码复用平台，将不变行为搬移到父类，去除了子类中的重复代码。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>利用模板模式的思想，实现了试卷问题。TestPaper 中给出了试卷问题的实现逻辑，并定义了答案接口，将答案推迟到子类实现；TestPaper1、TestPaper2 继承于 TestPaper，实现了各自答案接口。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_template_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//考题试卷</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPaper</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testQuestion1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;若用数组名作为函数调用时的实参，则实际上传递给形参的是()\n&quot;</span></span><br><span class="line">                <span class="string">&quot;A. 数组首地址 B. 数组的第一个元素值 C. 数组中全部元素的值 D. 数组元素的个数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;答案：&quot;</span> &lt;&lt; <span class="built_in">answer1</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">testQuestion2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;已知int a[3][2]=&#123;3,2,1&#125;; 则表达式“a[0][0]/a[0][1]/a[0][2]”的值是()\n&quot;</span></span><br><span class="line">                <span class="string">&quot;A. 0.166667 B. 1 C. 0 D. 错误的表达式&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;答案：&quot;</span> &lt;&lt; <span class="built_in">answer2</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testQuestion3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;下面函数原型声明中，()声明了fun为纯虚函数\n&quot;</span></span><br><span class="line">                <span class="string">&quot;A. void fun()=0; B. virtual void fun()=0; C. virtual void fun(); D. virtual void fun()&#123;&#125;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;答案：&quot;</span> &lt;&lt; <span class="built_in">answer3</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">answer1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">answer2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">answer3</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">testQuestion1</span>();</span><br><span class="line">        <span class="built_in">testQuestion2</span>();</span><br><span class="line">        <span class="built_in">testQuestion3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//试卷1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPaper1</span>: <span class="keyword">public</span> TestPaper</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">answer1</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>; &#125;</span><br><span class="line">    <span class="function">string <span class="title">answer2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;D&quot;</span>; &#125;</span><br><span class="line">    <span class="function">string <span class="title">answer3</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//试卷2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPaper2</span>: <span class="keyword">public</span> TestPaper</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">answer1</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>; &#125;</span><br><span class="line">    <span class="function">string <span class="title">answer2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>; &#125;</span><br><span class="line">    <span class="function">string <span class="title">answer3</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> agrc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;========== 试卷1 ==========&quot;</span> &lt;&lt; endl;</span><br><span class="line">    TestPaper* paper1 = <span class="keyword">new</span> <span class="built_in">TestPaper1</span>();</span><br><span class="line">    paper1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;========== 试卷2 ==========&quot;</span> &lt;&lt; endl;</span><br><span class="line">    TestPaper* paper2 = <span class="keyword">new</span> <span class="built_in">TestPaper2</span>();</span><br><span class="line">    paper2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> paper1;</span><br><span class="line">    <span class="keyword">delete</span> paper2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">========== 试卷1 ==========</span><br><span class="line">若用数组名作为函数调用时的实参，则实际上传递给形参的是()</span><br><span class="line">A. 数组首地址 B. 数组的第一个元素值 C. 数组中全部元素的值 D. 数组元素的个数</span><br><span class="line">答案：A</span><br><span class="line">已知int a[3][2]=&#123;3,2,1&#125;; 则表达式“a[0][0]/a[0][1]/a[0][2]”的值是()</span><br><span class="line">A. 0.166667 B. 1 C. 0 D. 错误的表达式</span><br><span class="line">答案：D</span><br><span class="line">下面函数原型声明中，()声明了fun为纯虚函数</span><br><span class="line">A. void fun()=0; B. virtual void fun()=0; C. virtual void fun(); D. virtual void fun()&#123;&#125;;</span><br><span class="line">答案：B</span><br><span class="line">========== 试卷2 ==========</span><br><span class="line">若用数组名作为函数调用时的实参，则实际上传递给形参的是()</span><br><span class="line">A. 数组首地址 B. 数组的第一个元素值 C. 数组中全部元素的值 D. 数组元素的个数</span><br><span class="line">答案：C</span><br><span class="line">已知int a[3][2]=&#123;3,2,1&#125;; 则表达式“a[0][0]/a[0][1]/a[0][2]”的值是()</span><br><span class="line">A. 0.166667 B. 1 C. 0 D. 错误的表达式</span><br><span class="line">答案：B</span><br><span class="line">下面函数原型声明中，()声明了fun为纯虚函数</span><br><span class="line">A. void fun()=0; B. virtual void fun()=0; C. virtual void fun(); D. virtual void fun()&#123;&#125;;</span><br><span class="line">答案：B</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2022/08/24/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/24/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>原型模式，其实就是从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_prototype.png"></p><p>优点：原型模式通过克隆隐藏了对象创建的细节，可以动态地获得对象运行时的状态。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例基于原型模式思想，解决简历复印问题。WorkExperience 用于描述工作经历；Prototype 定义了克隆自身的接口；Resume 继承于 Prototype，实现了克隆函数。因此，客户端可以利用现有的对象克隆出新的对象，而不需要了解对象创建的细节。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作经历类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkExperience</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WorkExperience</span>(string company, string date)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_company = company;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    <span class="built_in">WorkExperience</span>(<span class="type">const</span> WorkExperience&amp; work)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_company = work.m_company;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_date = work.m_date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_company &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m_date &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_company;</span><br><span class="line">    string m_date;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型类，声明一个克隆自身的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prototype</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Prototype* <span class="title">clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简历类，具体原型类，实现克隆自身的操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resume</span>: <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Resume</span>(string name, string sex, <span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_sex = sex;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Resume</span>(WorkExperience* work)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_work = <span class="keyword">new</span> <span class="built_in">WorkExperience</span>(*work);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setInfo</span><span class="params">(string name, string sex, <span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_sex = sex;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setWorkExperience</span><span class="params">(string company, string date)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_work = <span class="keyword">new</span> <span class="built_in">WorkExperience</span>(company, date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setWorkExperience</span><span class="params">(WorkExperience* work)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_work = <span class="keyword">new</span> <span class="built_in">WorkExperience</span>(*work);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_sex &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_work-&gt;<span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Prototype* <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Resume* temp = <span class="keyword">new</span> <span class="built_in">Resume</span>(<span class="keyword">this</span>-&gt;m_work);</span><br><span class="line">        temp-&gt;m_name = <span class="keyword">this</span>-&gt;m_name;</span><br><span class="line">        temp-&gt;m_sex = <span class="keyword">this</span>-&gt;m_sex;</span><br><span class="line">        temp-&gt;m_age = <span class="keyword">this</span>-&gt;m_age;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">    string m_sex;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    WorkExperience* m_work;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Resume* a = <span class="keyword">new</span> <span class="built_in">Resume</span>(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    a-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;腾讯&quot;</span>, <span class="string">&quot;2020.01-2020.06&quot;</span>);</span><br><span class="line">    a-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    Resume* b = (Resume*)a-&gt;<span class="built_in">clone</span>();</span><br><span class="line">    b-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;百度&quot;</span>, <span class="string">&quot;2020.06-2020.12&quot;</span>);</span><br><span class="line">    b-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    Resume* c = (Resume*)a-&gt;<span class="built_in">clone</span>();</span><br><span class="line">    c-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;阿里&quot;</span>, <span class="string">&quot;2021.01-2021.12&quot;</span>);</span><br><span class="line">    c-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">小明 20 男</span><br><span class="line">腾讯 2020.01-2020.06</span><br><span class="line">小明 20 男</span><br><span class="line">百度 2020.06-2020.12</span><br><span class="line">小明 20 男</span><br><span class="line">阿里 2021.01-2021.12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2022/08/22/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/22/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>工厂模式，定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_factory.png"></p><p>工厂模式与简单工厂模式对比：</p><ul><li>两者都集中封装了对象的创建，降低了程序的耦合度；</li><li>简单工厂模式的优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，但如果要增加新的需求就需要改动工厂类，违背了开放-封闭原则；</li><li>工厂模式克服了这个缺点，在增加功能时，不需要改动原有工厂类，但需增加新的工厂类，增加了额外的开发量。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例使用工厂模式实现计算器功能。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_factory_example.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Operation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setNumA</span><span class="params">(<span class="type">double</span> a)</span> </span>&#123;</span><br><span class="line">        _numA = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getNumA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _numA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setNumB</span><span class="params">(<span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">        _numB = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getNumB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _numB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _numA = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> _numB = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationAdd</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() + <span class="built_in">getNumB</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationSub</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() - <span class="built_in">getNumB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationMul</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() * <span class="built_in">getNumB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationDiv</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getNumB</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;被除数不能为0&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() / <span class="built_in">getNumB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Operation* <span class="title">createOperation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddFactory</span>: <span class="keyword">public</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Operation* <span class="title">createOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">OperationAdd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubFactory</span>: <span class="keyword">public</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Operation* <span class="title">createOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">OperationSub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulFactory</span>: <span class="keyword">public</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Operation* <span class="title">createOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">OperationMul</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除法工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DivFactory</span>: <span class="keyword">public</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Operation* <span class="title">createOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">OperationDiv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> agrc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IFactory* addFac = <span class="keyword">new</span> <span class="built_in">AddFactory</span>();</span><br><span class="line">    Operation* addOpe = addFac-&gt;<span class="built_in">createOperation</span>();</span><br><span class="line">    addOpe-&gt;<span class="built_in">setNumA</span>(<span class="number">1</span>);</span><br><span class="line">    addOpe-&gt;<span class="built_in">setNumB</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1 + 2 = &quot;</span> &lt;&lt; addOpe-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 2 = 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2022/08/19/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/19/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>代理模式，为其他对象提供一种代理以控制对这个对象的访问。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_proxy.png"></p><p>代理模式的应用场景：</p><ol><li>远程代理，为一个位于不同地址空间的对象提供一个本地代理，对代理的方法调用会导致对远程对象的方法调用。</li><li>虚拟代理，用来存放实例化开销很大的对象。虚拟代理通常延迟对象的创建，直到需要为止。在创建对象之前及创建对象的过程中，虚拟代理也可以作为对象的代理，之后，代理将请求直接委托为真实对象。</li><li>安全代理，根据访问权限控制对资源的访问。</li><li>缓冲代理，为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li><li>智能指针&#x2F;引用，当调用真实的对象时，代理可以提供一些额外的操作。如计算真实对象的引用次数，当对象没有引用时，可以自动释放它；当第一次引用一个持久对象时，将它装入内存。</li></ol><p>优点：</p><ul><li>职责清晰：真实对象实现实际的业务逻辑，代理完成额外的一些操作；</li><li>高扩展性：代理对真实对象的功能进行了扩展，且可以对多个真实对象进行管理、切换。</li></ul><p>缺点：</p><ul><li>代理模式引入了另一个抽象层，这有时可能是一个问题。如果真实对象被某些客户端直接访问，并且其中一些客户端可能访问代理对象，这可能会导致不同的行为。</li><li>由于在客户端和真实对象之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例采用代理模式的思想，实现了追求者通过代理人给小红送礼物。Girl 定义了被追求者，IGiveGift 定义了真实对象与代理的公共接口，这样就在任何使用真实对象的地方都可以使用代理。Pursuit 为追求者（真实对象类），实现了具体的接口方法。Proxy 为代理类，定义了一个真实对象的指针，使得代理可以访问实体，并提供与实体相同的接口，这样代理就可以代替追求者给小红送礼物。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被追求者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Girl</span>(string name)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_name; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; m_name = name; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//追求者与代理人的公共接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IGiveGift</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">giveDolls</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">giveChocolate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//追求者，实现接口方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pursuit</span>: <span class="keyword">public</span> IGiveGift</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Pursuit</span>(Girl* girl)</span><br><span class="line">    &#123;</span><br><span class="line">        m_girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">giveDolls</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_girl-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 送你洋娃娃&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">giveFlowers</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_girl-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 送你鲜花&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">giveChocolate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_girl-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 送你巧克力&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Girl* m_girl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理人，间接调用追求者的接口方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span>: <span class="keyword">public</span> IGiveGift</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Proxy</span>(Girl* girl)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pursuit = <span class="keyword">new</span> <span class="built_in">Pursuit</span>(girl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">giveDolls</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pursuit-&gt;<span class="built_in">giveDolls</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">giveFlowers</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pursuit-&gt;<span class="built_in">giveFlowers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">giveChocolate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_pursuit-&gt;<span class="built_in">giveChocolate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Pursuit* m_pursuit;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> agrc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Girl* girl = <span class="keyword">new</span> <span class="built_in">Girl</span>(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">    <span class="function">Proxy <span class="title">proxy</span><span class="params">(girl)</span></span>;</span><br><span class="line">    proxy.<span class="built_in">giveDolls</span>();</span><br><span class="line">    proxy.<span class="built_in">giveFlowers</span>();</span><br><span class="line">    proxy.<span class="built_in">giveChocolate</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小红 送你洋娃娃</span><br><span class="line">小红 送你鲜花</span><br><span class="line">小红 送你巧克力</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>临时环境变量解决VS项目冲突</title>
      <link href="/2022/08/17/%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%A7%A3%E5%86%B3VS%E9%A1%B9%E7%9B%AE%E5%86%B2%E7%AA%81/"/>
      <url>/2022/08/17/%E4%B8%B4%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%A7%A3%E5%86%B3VS%E9%A1%B9%E7%9B%AE%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>两个VS项目依赖的环境变量有冲突，虽然根据 <a href="/2022/08/08/Windows%E4%B8%8D%E9%87%8D%E5%90%AF%E5%88%B7%E6%96%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/">Windows不重启刷新环境变量</a> 可以实现两个项目同时打开运行（先打开当前环境变量的项目，调整环境变量顺序，刷新生效，再打开另一个项目），但每次都需要调整环境变量顺序，且重启项目后，仍然会有冲突。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>删除系统环境变量中的冲突项；</p></li><li><p>新建批处理文件（.bat），用于配置项目临时环境变量，并管理项目的启动，示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">::打开命令回显，输出使用的命令</span><br><span class="line">echo on</span><br><span class="line"></span><br><span class="line">::依赖环境变量</span><br><span class="line">set XSCOPE_OSG_DIR=E:\VSWorkPlace\x-scope\osg360_oe2.10_x64_vs15_qt591\osg3.6.0_vs2015_x64</span><br><span class="line">set XSCOPE_OE_DIR=E:\VSWorkPlace\x-scope\osg360_oe2.10_x64_vs15_qt591\oe2.10.0_vs2015_x64</span><br><span class="line"></span><br><span class="line">::配置临时环境变量</span><br><span class="line">path=%path%;%XSCOPE_OSG_DIR%\bin</span><br><span class="line">path=%path%;%XSCOPE_OE_DIR%\bin</span><br><span class="line"></span><br><span class="line">::启动项目</span><br><span class="line">start &quot;D:\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe&quot; &quot;./build/X-Scope.sln&quot;</span><br></pre></td></tr></table></figure></li><li><p>运行 .bat 文件，启动VS项目，解决多项目间的冲突。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式</title>
      <link href="/2022/08/17/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/17/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p> 装饰模式，指动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。 </p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_decorator.png"></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>本实例基于装饰模式思想，解决食物搭配问题。Food 定义了对象接口；Rice、Noodle 定义了具体的对象，用于确定主食；Decorator 继承于 Food，并负责维护 Food 对象；TomatoDecorator、EggDecorator 为具体的装饰对象，用于给 Food 对象添加菜品。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义对象接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Food</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Food</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">double</span> price)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPrice</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> m_price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义具体的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rice</span>: <span class="keyword">public</span> Food</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rice</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setPrice</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;米饭&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Noodle</span>: <span class="keyword">public</span> Food</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Noodle</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setPrice</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;面条&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span>: <span class="keyword">public</span> Food</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Decorator</span>(Food* food)</span><br><span class="line">    &#123;</span><br><span class="line">        m_food = food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Decorator</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setFood</span><span class="params">(Food* food)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_food = food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Food* <span class="title">getFood</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_food-&gt;<span class="built_in">operation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Food* m_food = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体装饰器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TomatoDecorator</span>: <span class="keyword">public</span> Decorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TomatoDecorator</span>(Food* food): <span class="built_in">Decorator</span>(food) </span><br><span class="line">    &#123;</span><br><span class="line">        m_tPrice = <span class="number">3.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_food-&gt;<span class="built_in">operation</span>(); <span class="comment">//调用被装饰对象的接口</span></span><br><span class="line">        <span class="built_in">myOperation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;+番茄&quot;</span>;</span><br><span class="line">        <span class="built_in">setPrice</span>(m_food-&gt;<span class="built_in">getPrice</span>() + m_tPrice); <span class="comment">//当前总价格=被装饰对象的价格+装饰价格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> m_tPrice;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EggDecorator</span>: <span class="keyword">public</span> Decorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">EggDecorator</span>(Food* food): <span class="built_in">Decorator</span>(food) </span><br><span class="line">    &#123;</span><br><span class="line">        m_ePrice = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_food-&gt;<span class="built_in">operation</span>();</span><br><span class="line">        <span class="built_in">myOperation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myOperation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;+鸡蛋&quot;</span>;</span><br><span class="line">        <span class="built_in">setPrice</span>(m_food-&gt;<span class="built_in">getPrice</span>() + m_ePrice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> m_ePrice;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;搭配1：&quot;</span>;</span><br><span class="line">    Food* rice = <span class="keyword">new</span> <span class="built_in">Rice</span>();</span><br><span class="line">    Food* <span class="type">rice_t</span> = <span class="keyword">new</span> <span class="built_in">TomatoDecorator</span>(rice);</span><br><span class="line">    Food* rice_t_e = <span class="keyword">new</span> <span class="built_in">EggDecorator</span>(<span class="type">rice_t</span>);</span><br><span class="line">    rice_t_e-&gt;<span class="built_in">operation</span>(); <span class="comment">//链式调用</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; rice_t_e-&gt;<span class="built_in">getPrice</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;搭配2：&quot;</span>;</span><br><span class="line">    Food* noodle = <span class="keyword">new</span> <span class="built_in">Noodle</span>();</span><br><span class="line">    Food* <span class="type">noodle_t</span> = <span class="keyword">new</span> <span class="built_in">TomatoDecorator</span>(noodle);</span><br><span class="line">    Food* noodle_t_e = <span class="keyword">new</span> <span class="built_in">EggDecorator</span>(<span class="type">noodle_t</span>);</span><br><span class="line">    noodle_t_e-&gt;<span class="built_in">operation</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; noodle_t_e-&gt;<span class="built_in">getPrice</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">搭配1：米饭+番茄+鸡蛋=10.5</span><br><span class="line">搭配2：面条+番茄+鸡蛋=11.5</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2022/08/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>策略模式封装了一系列算法，并使它们可以在运行时动态替换，减少了各种算法类与使用算法类之间的耦合。</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_strategy.png"></p><p>缺点：每一种算法的实现都会产生新的策略类。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>定义抽象类Strategy作为算法公共接口类，具体算法继承于 Strategy，并对算法方法进行实现。定义Context类用来动态管理算法间的替换。Context类中定义了两种构造函数，其中基本策略模式是根据客户端传入的策略对象动态执行对应的算法，这样用户需要认识Context类及所有的策略类。策略模式与简单工厂结合的方法，将策略对象的实现也放在了Context类中，用户只需认识一个Context类，使得程序的耦合度更低。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象算法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Strategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">AlgorithmInterface</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体算法A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyA</span>: <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;算法A实现&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体算法B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyB</span>: <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;算法B实现&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体算法C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyC</span>: <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;算法C实现&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//初始化时，传入具体的策略对象：基本策略模式</span></span><br><span class="line">    <span class="built_in">Context</span>(Strategy* s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化时，实例化具体的策略对象：策略模式与简单工厂结合</span></span><br><span class="line">    <span class="built_in">Context</span>(<span class="type">char</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                <span class="keyword">this</span>-&gt;strategy = <span class="keyword">new</span> <span class="built_in">ConcreteStrategyA</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                <span class="keyword">this</span>-&gt;strategy = <span class="keyword">new</span> <span class="built_in">ConcreteStrategyB</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">this</span>-&gt;strategy = <span class="keyword">new</span> <span class="built_in">ConcreteStrategyC</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;ERROR&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据具体的策略对象，调用其算法方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ContextInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        strategy-&gt;<span class="built_in">AlgorithmInterface</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Strategy* strategy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Context <span class="title">context1</span><span class="params">(<span class="keyword">new</span> ConcreteStrategyA())</span></span>;</span><br><span class="line">    context1.<span class="built_in">ContextInterface</span>();</span><br><span class="line">    <span class="function">Context <span class="title">context2</span><span class="params">(<span class="string">&#x27;B&#x27;</span>)</span></span>;</span><br><span class="line">    context2.<span class="built_in">ContextInterface</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">算法A实现</span><br><span class="line">算法B实现</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2022/08/10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>通过封装、继承和多态把程序的耦合度降低，使得程序更加灵活，容易修改，并且易于复用。 考虑用一个单独的类来创造实例的过程，就是工厂。 </p><p>缺点：每次维护或扩展方法时，都需要修改或添加类，并改动工厂分支。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>利用简单工厂模式的思想，实现了计算器功能。Operation类对计算器的数据与方法进行了封装，加减乘除类继承于Operation类，实现了不同的计算方法，并构建工厂类利用多态来管理实例的创建。后续添加其他计算方法，只需添加子类和修改工厂类，无需修改其他部分代码，使得代码具有很好的可维护性和扩展性。</p><p>UML结构图：</p><p><img src="https://lunanhua.gitee.io/images/blog/design_pattern/uml_simple_factory.png"></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Operation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setNumA</span><span class="params">(<span class="type">double</span> a)</span> </span>&#123;</span><br><span class="line">        _numA = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getNumA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _numA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setNumB</span><span class="params">(<span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">        _numB = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getNumB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _numB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _numA = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> _numB = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationAdd</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() + <span class="built_in">getNumB</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationSub</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() - <span class="built_in">getNumB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationMul</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() * <span class="built_in">getNumB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除法类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationDiv</span>: <span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getNumB</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;被除数不能为0&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNumA</span>() / <span class="built_in">getNumB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算对象生成工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Operation* <span class="title">creatOperation</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">        Operation *op = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                op = <span class="keyword">new</span> <span class="built_in">OperationAdd</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                op = <span class="keyword">new</span> <span class="built_in">OperationSub</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                op = <span class="keyword">new</span> <span class="built_in">OperationMul</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                op = <span class="keyword">new</span> <span class="built_in">OperationDiv</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">&quot;操作符输入错误&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> op;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> agrc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OperationFactory opf;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入第1个操作数：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入操作符：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入第2个操作数：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; b;</span><br><span class="line">        Operation* op = opf.<span class="built_in">creatOperation</span>(c);</span><br><span class="line">        op-&gt;<span class="built_in">setNumA</span>(a);</span><br><span class="line">        op-&gt;<span class="built_in">setNumB</span>(b);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;计算结果：&quot;</span> &lt;&lt; op-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* err) &#123;</span><br><span class="line">        cout &lt;&lt; err &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入第1个操作数：6</span><br><span class="line">输入操作符：*</span><br><span class="line">输入第2个操作数：6</span><br><span class="line">计算结果：36</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2022/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h1><p>设计模式（Design pattern）是由众多软件开发人员经过长期实践，总结出的在软件开发过程种面临一般问题的解决方案，这些解决方案可以提高代码的可读性，增加代码的可重用性，保证代码的可扩展性。</p><p>设计模式是一种抽象的编程思想，并不局限于某一特定的编程语言，例如C++、C#、Java语言都可以使用设计模式。但设计模式也有它的边界，它的适用范围是面向对象的编程语言。对于面向过程语言、函数式编程语言，谈论设计模式是没有意义的。</p><h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><p>根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（设计模式 - 可复用的面向对象软件元素）中所提到的，总共有 23 种设计模式，这些模式可以分为三大类：</p><ol><li><p>创建型模式（Creational Patterns）：提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象，它的主要特点是将对象的创建与使用分离。具体包括以下设计模式：</p><ul><li><p><a href="/2022/08/22/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">工厂模式（Factory Pattern）</a></p></li><li><p><a href="/2022/09/02/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">抽象工厂模式（Abstract Factory Pattern）</a></p></li><li><p><a href="/2022/09/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例模式（Singleton Pattern）</a></p></li><li><p><a href="/2022/08/28/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">建造者模式（Builder Pattern）</a></p></li><li><p><a href="/2022/08/24/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">原型模式（Prototype Pattern）</a></p></li></ul></li><li><p>结构型模式（Structural Patterns）：关注类和对象的组合，即如何将类或对象按某种布局组成更大的结构。具体包括以下设计模式：</p><ul><li><a href="/2022/09/04/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">适配器模式（Adapter Pattern）</a></li><li><a href="/2022/09/13/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/">桥接模式（Bridge Pattern）</a></li><li><a href="/2022/09/05/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">组合模式（Composite Pattern）</a></li><li><a href="/2022/08/17/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">装饰模式（Decorator Pattern）</a></li><li><a href="/2022/08/28/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">外观模式（Facade Pattern）</a></li><li><a href="/2022/09/15/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/">享元模式（Flyweight Pattern）</a></li><li><a href="/2022/08/19/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">代理模式（Proxy Pattern）</a></li></ul></li><li><p>行为型模式（Behavioral Patterns）：用于描述类或对象之间怎样通信、协作共同完成任务，以及怎样分配职责。具体包括以下设计模式：</p><ul><li><a href="/2022/09/14/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/">责任链模式（Chain of Responsibility Pattern）</a></li><li><a href="/2022/09/13/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">命令模式（Command Pattern）</a></li><li><a href="/2022/09/17/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/">解释器模式（Interpreter Pattern）</a></li><li><a href="/2022/09/06/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">迭代器模式（Iterator Pattern）</a></li><li><a href="/2022/09/15/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/">中介者模式（Mediator Pattern）</a></li><li><a href="/2022/09/04/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/">备忘录模式（Memento Pattern）</a></li><li><a href="/2022/08/29/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">观察者模式（Observer Pattern）</a></li><li><a href="/2022/09/03/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">状态模式（State Pattern）</a></li><li><a href="/2022/08/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">策略模式（Strategy Pattern）</a></li><li><a href="/2022/08/25/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/">模板模式（Template Pattern）</a></li><li><a href="/2022/09/17/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/">访问者模式（Visitor Pattern）</a></li></ul></li></ol><h1 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h1><ol><li>开闭原则（Open Close Principle）：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。</li><li>里氏代换原则（Liskov Substitution Principle）：是面向对象设计的基本原则之一。 里氏代换原则指出，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</li><li>依赖倒转原则（Dependence Inversion Principle）：这个原则是开闭原则的基础，具体内容为：针对接口编程，依赖于抽象而不依赖于具体。</li><li>接口隔离原则（Interface Segregation Principle）：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</li><li>迪米特法则，又称最少知道原则（Demeter Principle）：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</li><li>合成复用原则（Composite Reuse Principle）：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</li></ol><h1 id="专栏介绍"><a href="#专栏介绍" class="headerlink" title="专栏介绍"></a>专栏介绍</h1><p>本专栏为《大话设计模式》学习笔记，使用C++语言实现书中的典型设计模式案例。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows不重启刷新环境变量</title>
      <link href="/2022/08/08/Windows%E4%B8%8D%E9%87%8D%E5%90%AF%E5%88%B7%E6%96%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2022/08/08/Windows%E4%B8%8D%E9%87%8D%E5%90%AF%E5%88%B7%E6%96%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>Windows不重启刷新环境变量的方法如下：</p><ol><li>修改环境变量</li><li>打开cmd，执行 echo %path% 查看当前系统的环境变量，为修改前的值</li><li>执行 set path&#x3D;x，x 可以为任意值，无实际意义，此时查看path会显示为x</li><li>重启cmd，执行 echo %path%，显示为修改后的环境变量，刷新成功</li></ol><p>原因：DOS窗口的环境变量为Windows环境变量的一个副本，对副本的修改不会改变Windows环境变量，但会引起Windows环境变量的刷新。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>远程仓库文件夹无法打开</title>
      <link href="/2022/07/30/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
      <url>/2022/07/30/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<p>上传本地文件到远程后，发现仓库中的子文件夹无法打开</p><p><img src="https://lunanhua.gitee.io/images/blog/git/remote_nview/001.png"></p><p>原因是，子文件夹中包含 .git</p><p><img src="https://lunanhua.gitee.io/images/blog/git/remote_nview/002.png"></p><p>删除 .git，并在该文件夹下执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . # 清除缓存</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;rm .git&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>此时，远程仓库的文件夹可以正常访问</p><p><img src="https://lunanhua.gitee.io/images/blog/git/remote_nview/003.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++内存模型</title>
      <link href="/2022/07/28/C++%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/07/28/C++%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="内存分布图"><a href="#内存分布图" class="headerlink" title="内存分布图"></a>内存分布图</h1><p><img src="https://lunanhua.gitee.io/images/blog/c++/memory_model/001.jpg"></p><h1 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h1><h2 id="栈区（stack）"><a href="#栈区（stack）" class="headerlink" title="栈区（stack）"></a>栈区（stack）</h2><p>由编译器自动分配和释放，存放局部变量、局部常量、函数参数、函数返回值等。</p><p>在内存中向着内存地址减小的方向生长。</p><h2 id="堆区（heap）"><a href="#堆区（heap）" class="headerlink" title="堆区（heap）"></a>堆区（heap）</h2><p>由程序员分配与释放，如果程序员没有释放，程序结束后由OS回收。</p><p>在内存中向着内存地址增加的方向生长。</p><h2 id="全局区-x2F-静态区（static）"><a href="#全局区-x2F-静态区（static）" class="headerlink" title="全局区&#x2F;静态区（static）"></a>全局区&#x2F;静态区（static）</h2><p>存放全局变量、全局静态变量、局部静态变量、虚函数表。程序结束后由OS释放。</p><h2 id="常量区"><a href="#常量区" class="headerlink" title="常量区"></a>常量区</h2><p>存放全局常量、函数指针、常量字符串，程序结束后由OS释放。</p><h2 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h2><p>存放代码的一块只读区域，程序结束后由OS释放。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_stack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;===== stack =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; endl; <span class="comment">//局部变量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; endl; <span class="comment">//局部常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;===== heap =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> * a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    <span class="type">int</span> * b = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="comment">//new</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; b &lt;&lt; endl; <span class="comment">//malloc</span></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_static</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> c = <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;===== static =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; endl; <span class="comment">//全局变量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; endl; <span class="comment">//全局静态变量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;c = &quot;</span> &lt;&lt; &amp;c &lt;&lt; endl; <span class="comment">//局部静态变量</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    生成类对象时，编译器会自动的将类对象的前4/8个字节设置为虚函数表的地址。</span></span><br><span class="line"><span class="comment">    虚表可以看做一个函数指针数组，这4/8字节就可以看作指向虚表的指针。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    A a1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;vptr = &quot;</span> &lt;&lt; (<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;a1 &lt;&lt; endl; <span class="comment">//虚函数表</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &amp;a1         对象的起始地址</span></span><br><span class="line"><span class="comment">    (long*)&amp;a1  强转为long*类型，为了后面取对象的前八个字节</span></span><br><span class="line"><span class="comment">    *(long*)&amp;a1 取前八个字节，即虚表指针，其值为虚表地址</span></span><br><span class="line"><span class="comment">    *(long*)*(long*)&amp;a1     第一个虚函数地址</span></span><br><span class="line"><span class="comment">    *((long*)*(long*)&amp;a1+1) 第二个虚函数地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_constant</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;==== constant ====&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;c = &quot;</span> &lt;&lt; &amp;c &lt;&lt; endl; <span class="comment">//全局常量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;f1() = &quot;</span> &lt;&lt; (<span class="type">void</span>*)f1 &lt;&lt; endl; <span class="comment">//函数指针本质就是常量指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func_stack</span>();</span><br><span class="line">    <span class="built_in">func_heap</span>();</span><br><span class="line">    <span class="built_in">func_static</span>();</span><br><span class="line">    <span class="built_in">func_constant</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">===== stack =====</span></span><br><span class="line"><span class="comment">&amp;a = 0x7ffd7c883d90</span></span><br><span class="line"><span class="comment">&amp;b = 0x7ffd7c883d94</span></span><br><span class="line"><span class="comment">===== heap =====</span></span><br><span class="line"><span class="comment">&amp;a = 0x5591bda832c0</span></span><br><span class="line"><span class="comment">&amp;b = 0x5591bda832e0</span></span><br><span class="line"><span class="comment">===== static =====</span></span><br><span class="line"><span class="comment">&amp;a = 0x5591bd277154</span></span><br><span class="line"><span class="comment">&amp;b = 0x5591bd277010</span></span><br><span class="line"><span class="comment">&amp;c = 0x5591bd277014</span></span><br><span class="line"><span class="comment">vptr = 0x5591bd276d40</span></span><br><span class="line"><span class="comment">==== constant ====</span></span><br><span class="line"><span class="comment">&amp;c = 0x5591bd275058</span></span><br><span class="line"><span class="comment">&amp;f1() = 0x5591bd274575</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>参考 <a href="https://blog.csdn.net/Return_nellen/article/details/79999960">浅谈C++内存模型</a> </p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>char*和char[]</title>
      <link href="/2022/07/17/char-%E5%92%8Cchar/"/>
      <url>/2022/07/17/char-%E5%92%8Cchar/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>如上变量a和b，char*和char[]都可以表示字符串，但实现的本质不同：前者是在内存的静态存储区开辟一个空间存储字符串常量“hello”，并将该区域的地址赋值给一个char类型的指针变量；后者是在内存的栈区开辟了char类型的数组，将字符串的每个字符赋值给数组的每一个元素，数组名为首元素地址；下面对两者进行测试分析。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;a length: &quot;</span> &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; <span class="string">&quot; size: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b length: &quot;</span> &lt;&lt; <span class="built_in">strlen</span>(b) &lt;&lt; <span class="string">&quot; size: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a length: 5 size: 8</span></span><br><span class="line"><span class="comment">b length: 5 size: 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>两者都是以’\0’结尾，strlen不计算’\0’的长度，sizeof计算’\0’，由于a是指针类型，所以sizeof计算的是8（win64为8，win32为4）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">(<span class="type">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">char</span> * a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">func1</span>(a);</span><br><span class="line"><span class="built_in">func2</span>(b);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>作为函数参数时，可以相互转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;world&quot;</span>; <span class="comment">//编译出错</span></span><br></pre></td></tr></table></figure><p>char*的指向可以发生变化；char[]数组名为常量，表示数组首元素的地址，其值不可改变（相当于指针常量）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>; <span class="comment">//执行出错</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p>不能通过char*指针修改静态区的字符串常量，规范写法为 const char * a &#x3D; “hello”;</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode添加右键菜单</title>
      <link href="/2022/07/06/VSCode%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
      <url>/2022/07/06/VSCode%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>VSCode在安装时没有勾选添加右键菜单，安装后需要修改注册表来添加</p><p>新建vscode.reg，编辑如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode]</span><br><span class="line">@=&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">@=&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">@=&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;D:\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure><p>文件中的”D:\\Microsoft VS Code\\Code.exe”需要修改为本机VSCode的安装目录，注意为双斜杠</p><p>双击vscode.reg运行，点击是</p><p><img src="https://lunanhua.gitee.io/images/blog/windows/vscode_right_menu/001.jpg"></p><p>在桌面空白处右键，添加成功</p><p><img src="https://lunanhua.gitee.io/images/blog/windows/vscode_right_menu/002.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git手册</title>
      <link href="/2022/07/03/Git%E6%89%8B%E5%86%8C/"/>
      <url>/2022/07/03/Git%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><img src="https://lunanhua.gitee.io/images/blog/git/manual/common_cmd.png"></p><h1 id="gitignore使用"><a href="#gitignore使用" class="headerlink" title=".gitignore使用"></a>.gitignore使用</h1><p>.gitignore文件用来忽略不需要进行版本管理的目录文件，只会对untracked状态的文件起作用（新建没有被add过的文件）。对于已经被跟踪的文件，需要先清空本地暂存区，再使.gitignore生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h1 id="拉取远程覆盖本地"><a href="#拉取远程覆盖本地" class="headerlink" title="拉取远程覆盖本地"></a>拉取远程覆盖本地</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="推送本地覆盖远程"><a href="#推送本地覆盖远程" class="headerlink" title="推送本地覆盖远程"></a>推送本地覆盖远程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><ol><li><p>工作区回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;文件名&gt; # 回退指定文件修改</span><br><span class="line">git checkout . # 回退当前工作区所有修改</span><br></pre></td></tr></table></figure></li><li><p>add后暂存区回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure></li><li><p>commit后本地仓库回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log # 查看提交日志，commit后的字符串为版本号</span><br><span class="line">git reset --hard &lt;版本号&gt; # 回退指定版本</span><br><span class="line">git reset --hard HEAD^ # 回退上一版本</span><br><span class="line">git reset --hard HEAD^^ # 回退两个版本</span><br><span class="line">git reset --hard HEAD~10 # 回退多个版本</span><br></pre></td></tr></table></figure></li><li><p>远程仓库回退</p><p>先在本地回退，然后push到远程</p></li></ol><h1 id="远程仓库地址管理"><a href="#远程仓库地址管理" class="headerlink" title="远程仓库地址管理"></a>远程仓库地址管理</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看远程仓库地址</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加远程仓库地址</span></span><br><span class="line">git remote add origin &lt;url&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程仓库地址</span></span><br><span class="line">git remote rm origin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改远程仓库地址</span></span><br><span class="line">git remote set-url origin &lt;url&gt;</span><br></pre></td></tr></table></figure><h1 id="保留本地修改，并提交到远程"><a href="#保留本地修改，并提交到远程" class="headerlink" title="保留本地修改，并提交到远程"></a>保留本地修改，并提交到远程</h1><p>修改本地代码前忘记先 pull，若修改的文件已被其他人先修改提交到远程仓库，此时 pull 会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: Your local changes to the following files would be overwritten by merge:</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br></pre></td></tr></table></figure><p>保留本地修改，并提交到远程的操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让工作区恢复到上次提交的状态，并将当前的工作区内容保存到Git栈中</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取远程</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从Git栈中读取最近一次保存的内容，恢复工作区内容</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后再提交到远程</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h1 id="区分文件名大小写"><a href="#区分文件名大小写" class="headerlink" title="区分文件名大小写"></a>区分文件名大小写</h1><p>Git 默认不区分文件名大小写，例如将 README.md 文件名修改为 readme.md，内容不做修改，Git 是识别不到改动的，执行以下命令来配置 Git 对文件名大小写敏感。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.ignorecase false</span><br></pre></td></tr></table></figure><p>存在的问题是，将 readme.md 推送到远程，远程仓库会同时存在 README.md 和 readme.md。我采用的解决办法是：先删除远程仓库的 README.md，再将本地 readme.md 强制推送。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++开发环境配置</title>
      <link href="/2022/06/14/C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/06/14/C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>今天开始在Linux环境下学习C++，本文将对Linux中常用的编译器、调试器以及开发环境搭建做简要介绍</p><p>参考 <a href="https://www.bilibili.com/video/BV1fy4y1b7TC?p=1&vd_source=c05f476cdfe2129563c81bd13a6b501a">教程</a> </p><h1 id="常用编译器"><a href="#常用编译器" class="headerlink" title="常用编译器"></a>常用编译器</h1><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>C编译器（后来也集成了其他语言），它不会自动链接C++标准库，编译C++文件时，需要添加 lstdc++ 参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.cpp -lstdc++ -o hello</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><h2 id="g"><a href="#g" class="headerlink" title="g++"></a>g++</h2><p>gcc的C++编译器，可以自动链接C++库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hello.cpp -o hello</span><br></pre></td></tr></table></figure><h2 id="clang"><a href="#clang" class="headerlink" title="clang"></a>clang</h2><p>mac上的C&#x2F;C++&#x2F;Objective-C&#x2F;Objective-C++轻量级编译器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang++ hello.cpp -o hello</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">clang hello.cpp -lstdc++ -o hello</span><br></pre></td></tr></table></figure><h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><p>以g++编译器为例，介绍C++文件编译的全过程</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -E hello.cpp -o hello.i</span><br></pre></td></tr></table></figure><p>功能：</p><ol><li>删除 #define 并展开所定义的宏</li><li>处理预编译指令，如 #if、#ifdef、#endif 等</li><li>插入头文件到 #include 处，可以递归方式进行处理</li><li>删除所有的注释 &#x2F;&#x2F; 和 &#x2F;**&#x2F; </li><li>添加行号和文件名标识，以便编译时编译器产生调试用的行号信息</li><li>保留所有 #pragma 编译指令（编译器需要用）</li></ol><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -S hello.i -o hello.s</span><br></pre></td></tr></table></figure><p>功能：</p><p>将预处理后得到的预处理文件进行词法分析、语法分析、语义分析、优化后，生成汇编代码文件（由汇编指令组成）</p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -c hello.s -o hello.o</span><br></pre></td></tr></table></figure><p>功能：</p><p>汇编用来将汇编语言源程序转换为机器指令序列</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hello.o -o hello</span><br></pre></td></tr></table></figure><p>功能：</p><p>将多个可重定位目标文件（.o文件）合并，以生成可执行目标文件 </p><h1 id="调试器gdb"><a href="#调试器gdb" class="headerlink" title="调试器gdb"></a>调试器gdb</h1><p>linux系统开发C&#x2F;C++最常用的调试器，VSCode也是通过调用gdb实现C&#x2F;C++调试工作的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g++ -g sum.cpp -o sum_yes_g # -g 输出带调试信息的可执行文件</span><br><span class="line">gdb sum_yes_g # 启用gdb调试</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行gdb命令进行调试，例如</span></span><br><span class="line">(gdb) run # 执行</span><br><span class="line">(gdb) break n # 在第n行加断点</span><br><span class="line">(gdb) list # 查看附近源码</span><br><span class="line">(gdb) print v # 查看变量v</span><br><span class="line">(gdb) display v # 监控变量v</span><br><span class="line">(gdb) continue # 继续执行</span><br><span class="line">(gdb) quit # 退出调试</span><br></pre></td></tr></table></figure><h1 id="编译工具CMake"><a href="#编译工具CMake" class="headerlink" title="编译工具CMake"></a>编译工具CMake</h1><p>跨平台的安装编译工具，多文件项目编译可使用cmake</p><p>cmake：构建项目编译规则，即根据CMakeLists.txt文件生成makefile</p><p>make：文件编译的批处理工具，根据生成的makefile，告诉编译器各种编译规则，先做什么后做什么，本身没有编译功能</p><p>项目目录结构如下</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/001.png"></p><p>CMakeLists.txt编辑如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(hello) // 项目名</span><br><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello hello.cpp) //可执行文件及编译文件</span><br></pre></td></tr></table></figure><p>执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./hello$ cmake .</span><br><span class="line">./hello$ make</span><br><span class="line">./hello$ ./hello</span><br></pre></td></tr></table></figure><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>Ubuntu 20.04.1 + VScode（远程连接） + cmake 3.16.3 + gcc&#x2F;g++ 9.4.0 + gdb 9.2</p><h2 id="VScode插件安装"><a href="#VScode插件安装" class="headerlink" title="VScode插件安装"></a>VScode插件安装</h2><p>安装以下三个插件</p><ol><li>C&#x2F;C++：提供C&#x2F;C++程序调试、提示、跳转等功能</li><li>CMake：提供CMake智能提示功能</li><li>CMake Tools：提供CMake扩展支持</li></ol><p>我这里是远程连接虚拟机，因此安装插件选择的是 Install in SSH: ubuntu，完成安装后如下所示</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/002.png"></p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="编写源码"><a href="#编写源码" class="headerlink" title="编写源码"></a>编写源码</h3><p>创建项目主目录，cd到目录下使用code命令打开VScode，创建include目录存放头文件，src目录存放源文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir solider_fire</span><br><span class="line">cd solider_fire</span><br><span class="line">code .</span><br><span class="line">mkdir include</span><br><span class="line">mkdir src</span><br></pre></td></tr></table></figure><p>include&#x2F;gun.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gun</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Gun</span>(std::string type);</span><br><span class="line">    ~<span class="built_in">Gun</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addBullet</span><span class="params">(<span class="type">int</span> num)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">shoot</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _num;</span><br><span class="line">    std::string _type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>src&#x2F;gun.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gun.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Gun::<span class="built_in">Gun</span>(std::string type)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_type = type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Gun::~<span class="built_in">Gun</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Gun::addBullet</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_num += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Gun::shoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_num &lt;= <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_num -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include&#x2F;solider.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gun.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solider</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Solider</span>(std::string name);</span><br><span class="line">    ~<span class="built_in">Solider</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addGun</span><span class="params">(Gun *ptr_gun)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addBulletToGun</span><span class="params">(<span class="type">int</span> num)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fire</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string _name;</span><br><span class="line">    Gun *_ptr_gun;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>src&#x2F;solider.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;solider.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">Solider::<span class="built_in">Solider</span>(std::string name)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_ptr_gun = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Solider::~<span class="built_in">Solider</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;_ptr_gun == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;_ptr_gun;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_ptr_gun = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solider::addGun</span><span class="params">(Gun *ptr_gun)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_ptr_gun = ptr_gun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solider::addBulletToGun</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_ptr_gun-&gt;<span class="built_in">addBullet</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solider::fire</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;_ptr_gun-&gt;<span class="built_in">shoot</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Fire successfully!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Fire failed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gun.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;solider.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Solider <span class="title">solider</span><span class="params">(<span class="string">&quot;张三&quot;</span>)</span></span>;</span><br><span class="line">    solider.<span class="built_in">addGun</span>(<span class="keyword">new</span> <span class="built_in">Gun</span>(<span class="string">&quot;AK&quot;</span>));</span><br><span class="line">    solider.<span class="built_in">addBulletToGun</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        solider.<span class="built_in">fire</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用g"><a href="#使用g" class="headerlink" title="使用g++"></a>使用g++</h3><ol><li><p>手动编译调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">g++ main.cpp src/*.cpp -Iinclude -g -o main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">./main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调试</span></span><br><span class="line">gdb main</span><br></pre></td></tr></table></figure></li><li><p>配置json文件实现自动编译调试</p><p>主要配置两个文件，launch.json（负责gdb调试）和 tasks.json（负责g++编译）</p><p>首先生成launch.json：</p><p>点击运行-添加配置，在命令面板随便选择一个调试器</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/003.png"></p><p>会在项目的.vscode目录下生成launch.json文件，删除原来的configurations，再次点击运行-添加配置，选择C&#x2F;C++: (gdb) 启动，生成gdb调试配置模板</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/004.png"></p><p>再生成tasks.json：</p><p>鼠标点击到源码部分，点击终端-配置任务</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/005.png"></p><p>命令面板选择g++调试器，会在.vscode目录下生成tasks.json文件</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/tasks_g++.png"></p><p>放一张json文件中的预定义变量列表，详细查看 <a href="https://code.visualstudio.com/docs/editor/variables-reference">官方文档</a> </p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/variables_pre.png"></p><p>修改两个json文件如下：</p><p>launch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/main&quot;</span><span class="punctuation">,</span> <span class="comment">//调试程序</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//命令行参数（main函数的形参），没有可不填</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">//调试器类型</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++ 生成活动文件&quot;</span><span class="punctuation">,</span> <span class="comment">//绑定tasks.json中的任务名称，在调试前执行</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span> <span class="comment">//编译器路径，可省略</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>tasks.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++ 生成活动文件&quot;</span><span class="punctuation">,</span> <span class="comment">//任务名称</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/g++&quot;</span><span class="punctuation">,</span> <span class="comment">//g++命令</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="comment">//命令参数</span></span><br><span class="line"><span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/main.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/src/*.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-I$&#123;workspaceFolder&#125;/include&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/main&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;$gcc&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;编译器: /usr/bin/g++&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>即在调用launch.json进行程序调试前先通过preLaunchTask执行g++编译（相当于执行了g++ main.cpp src&#x2F;*.cpp -Iinclude -g -o main）。</p><p>配置完成后，在程序中设定断点，点击运行-启动调试&#x2F;按F5，程序停止在断点处，点击F5（继续执行），F10（单步跳过），F11（单步调试）等进行程序调试，在界面左部可以查看变量、函数等调试结果。</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/006.png"></p><p>项目结构如下：</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/struct_g++.png"></p></li></ol><h3 id="使用CMake"><a href="#使用CMake" class="headerlink" title="使用CMake"></a>使用CMake</h3><p>相比于g++编译，CMake可以更方便高效地编译大型、多文件工程项目，当重新编译整个工程时，若没有删除或添加文件不需要重新生成Makefile文件，且make只会编译被修改的文件，极大提高了工作效率。</p><ol><li><p>编写CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>) <span class="comment"># CMake最低版本要求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(solider_fire) <span class="comment"># 项目名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置编译器</span></span><br><span class="line"><span class="comment"># set(CMAKE_C_COMPILER &quot;/usr/bin/gcc&quot;)</span></span><br><span class="line"><span class="comment"># set(CMAKE_CXX_COMPILER &quot;/usr/bin/g++&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Debug&quot;</span>) <span class="comment"># 调试模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>) <span class="comment"># 头文件目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(solider_fire main.cpp src/gun.cpp src/solider.cpp) <span class="comment"># 生成可执行文件</span></span><br></pre></td></tr></table></figure><p>创建build文件夹作为外部构建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br></pre></td></tr></table></figure></li><li><p>手动编译调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake .. # 生成Makefile文件</span><br><span class="line">make # 编译</span><br><span class="line">./solider_fire # 运行</span><br><span class="line">gdb solider_fire # 调试</span><br></pre></td></tr></table></figure></li><li><p>配置json文件实现自动编译调试</p><p>如上一节所述，创建两个json文件，修改如下</p><p>launch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/solider_fire&quot;</span><span class="punctuation">,</span> <span class="comment">//调试程序</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//命令行参数（main函数的形参），没有可不填</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span> <span class="comment">//调试器类型</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span><span class="punctuation">,</span> <span class="comment">//绑定tasks.json中的任务名称，在调试前执行</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span> <span class="comment">//编译器路径，可省略</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>tasks.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span> <span class="comment">//在build目录下进行cmake操作</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;..&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//该任务依次执行cmake和make两条命令</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependsOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;make&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>即在调用launch.json进行程序调试前先通过preLaunchTask执行cmake编译，与手动编译原理相同。</p><p>配置vscode底部的 build variant、active kit，设置断点调试同上节。</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/bottom_config.png"></p><p>项目结构如下：</p><p><img src="https://lunanhua.gitee.io/images/blog/c++/environment/007.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> gcc </tag>
            
            <tag> g++ </tag>
            
            <tag> clang </tag>
            
            <tag> cmake </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机Ubuntu安装及远程连接</title>
      <link href="/2022/06/13/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/06/13/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h1><p>注册登陆 <a href="https://customerconnect.vmware.com/cn/dashboard">VMware官网</a>，在产品列表中找到 <a href="https://customerconnect.vmware.com/cn/downloads/details?downloadGroup=WKST-1622-WIN&productId=643">VMware Workstation for windows</a>，选择需要的版本进行下载，我下载的是16.2.2</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/001.png"></p><p>安装步骤很简单，一路next即可</p><h1 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p> <a href="https://cn.ubuntu.com/download/desktop">官网</a> 下载的速度很慢，我们可以在 <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">清华镜像站</a> 下载需要的ubuntu映像文件，我下载的是20.04.4的桌面版</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/002.png"></p><p>启动VMware Workstation，点击文件-新建虚拟机，选择典型</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/003.png"></p><p>选择稍后安装操作系统</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/004.png"></p><p>客户机操作系统选择Linux，版本选择Ubuntu</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/005.png"></p><p>修改安装目录</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/006.png"></p><p>指定磁盘容量，可以先设为50G，后续可以扩容</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/007.png"></p><p>自定义硬件中，内存根据需要设定，不要超过最大建议内存</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/008.png"></p><p>处理器设为与本机相同即可，比如我的电脑有一个8核处理器</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/009.png"></p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/010.png"></p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/011.png"></p><p>DVD选择下载好的iso映像文件</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/012.png"></p><p>配置完成后，开启此虚拟机，正式进行Ubuntu的安装，此过程较为简单，按照提示操作即可</p><h2 id="VMware-Tools安装"><a href="#VMware-Tools安装" class="headerlink" title="VMware Tools安装"></a>VMware Tools安装</h2><p>VMware Tools可以实现ubuntu的窗口自适应调整，鼠标移出等，一般虚拟机安装ubuntu后会自动安装，如果没有安装，可以点击下图位置进行安装</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/013.png"></p><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>ubuntu使用apt安装软件，换源可以提高安装速度。主要修改&#x2F;etc&#x2F;apt&#x2F;sources.list文件，步骤如下</p><p>备份原文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>复制ubuntu相应版本的 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华镜像站</a> &#x2F; <a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.5e911b11fbkHKu">阿里镜像站</a>，使用vi新建sources.list并写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>更新源和软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>测试安装vim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><h1 id="远程ssh连接"><a href="#远程ssh连接" class="headerlink" title="远程ssh连接"></a>远程ssh连接</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装openssh-server</span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"># 启动ssh服务</span><br><span class="line">sudo service ssh start</span><br><span class="line"></span><br><span class="line"># 查看ssh服务是否启动</span><br><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure><p>启动成功如图</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/014.png"></p><p>查看虚拟机ip地址，用于远程连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/015.png"></p><h2 id="Xshell-amp-Xftp"><a href="#Xshell-amp-Xftp" class="headerlink" title="Xshell &amp; Xftp"></a>Xshell &amp; Xftp</h2><p>学生可下载 <a href="https://www.xshell.com/zh/free-for-home-school/">免费版</a>，以Xshell连接为例</p><p>新建会话，输入名称、协议、主机IP、端口号，点击连接，根据提示输入用户名和密码，连接成功</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/016.png"></p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/017.png"></p><p>Xftp同理</p><h2 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h2><p>直接在 <a href="https://code.visualstudio.com/Download">官网</a> 下载安装即可， 一款由微软开发且跨平台的免费源代码编辑器，具有丰富的插件扩展功能。</p><p>首先安装Remote-SSH插件</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/018.png"></p><p>按照以下步骤，添加远程连接信息</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/019.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: [这里填你要命名的主机名]</span><br><span class="line">HostName: [这里填ip地址]</span><br><span class="line">User: [ssh远程登陆时，使用的用户名]</span><br></pre></td></tr></table></figure><p>右键，选择打开方式（本窗口&#x2F;新窗口）</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/020.png"></p><p>在弹出的命令面板选择Linux</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/linux.png"></p><p>若出现以下错误</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/error.png"></p><p>则右键Remote-SSH插件，选择扩展设置，配置ssh的配置路径</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/config.png"></p><p>重新连接，点击右下角的details，根据提示输入密码</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/021.png"></p><p>在命令面板输入两次回车，等待连接成功</p><p>新建终端，测试是否连接成功，点击打开文件夹，可以使用VScode的资源管理器管理ubuntu的目录文件</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/022.png"></p><h1 id="使用快照"><a href="#使用快照" class="headerlink" title="使用快照"></a>使用快照</h1><p>虚拟机提供的快照功能可以对当前系统状态进行保存，以便以后系统崩溃的状态回退，但会占用一定的本地存储空间，因此，只需要在系统的关键节点使用。以下三个按钮分别为拍摄快照、回退上个快照、管理快照</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/023.png"></p><p>拍摄快照，对刚刚安装好的ubuntu拍摄快照</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/024.png"></p><p>管理快照，在这里可以查看所有快照，并转到指定快照</p><p><img src="https://lunanhua.gitee.io/images/blog/linux/vmware_ubuntu/025.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VSCode </tag>
            
            <tag> VMware </tag>
            
            <tag> Xshell </tag>
            
            <tag> Xftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改桌面图标</title>
      <link href="/2022/06/13/%E4%BF%AE%E6%94%B9%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/"/>
      <url>/2022/06/13/%E4%BF%AE%E6%94%B9%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="修改Windows桌面图标"><a href="#修改Windows桌面图标" class="headerlink" title="修改Windows桌面图标"></a>修改Windows桌面图标</h1><p>桌面右键，选择个性化</p><p><img src="https://lunanhua.gitee.io/images/blog/windows/desktop_icon/001.png"></p><p>点击主题下的桌面图标设置</p><p><img src="https://lunanhua.gitee.io/images/blog/windows/desktop_icon/002.png"></p><p>选择桌面图标，点击应用</p><p><img src="https://lunanhua.gitee.io/images/blog/windows/desktop_icon/003.png"></p><p>桌面图标显示</p><p><img src="https://lunanhua.gitee.io/images/blog/windows/desktop_icon/004.png"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题优化</title>
      <link href="/2022/05/25/Butterfly%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
      <url>/2022/05/25/Butterfly%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Butterfly"><a href="#关于Butterfly" class="headerlink" title="关于Butterfly"></a>关于Butterfly</h1><p>选择这个主题的原因就是好看！<a href="https://butterfly.js.org/">官方示例</a> 提供了Butterfly的安装、美化、优化、魔改教程。</p><p>参考的一些优秀博客： <a href="https://bili33.top/">GamerNoTitle</a>、 <a href="https://xiabor.com/">MuJin’s Blog</a> 。</p><h1 id="相关优化"><a href="#相关优化" class="headerlink" title="相关优化"></a>相关优化</h1><h2 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h2><p>修改主题配置文件的 fireworks&#x2F;click_heart&#x2F;ClickShowText: true，分别为火焰特效、爱心特效、文字特效</p><p>选择爱心特效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span><br><span class="line">fireworks:</span><br><span class="line">  enable: false</span><br><span class="line">  zIndex: 9999 # -1 or 9999</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span><br><span class="line">click_heart:</span><br><span class="line">  enable: true</span><br><span class="line">  mobile: true</span><br><span class="line"></span><br><span class="line"># Mouse click effects: words (鼠標點擊效果: 文字)</span><br><span class="line">ClickShowText:</span><br><span class="line">  enable: false</span><br><span class="line">  text:</span><br><span class="line">    # - I</span><br><span class="line">    # - LOVE</span><br><span class="line">    # - YOU</span><br><span class="line">  fontSize: 15px</span><br><span class="line">  random: false</span><br><span class="line">  mobile: false</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://lunanhua.gitee.io/images/blog/hexo/butterfly/click_res.png"></p><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>安装插件，在博客主目录下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在主目录配置文件中添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post # post:文章范围、page:页面范围、all:覆盖所有</span><br><span class="line">  content: true # 内容是否包含每一篇文章的全部内容</span><br></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  preload: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://lunanhua.gitee.io/images/blog/hexo/butterfly/local_search.png"></p><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>安装插件，在博客主目录下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://lunanhua.gitee.io/images/blog/hexo/butterfly/wordcount.png"></p><h2 id="页脚养鱼"><a href="#页脚养鱼" class="headerlink" title="页脚养鱼"></a>页脚养鱼</h2><p>首先下载 <a href="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js">jquery.min.js</a> 和 <a href="https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js">fishes.js</a> ，保存在 MyBlog\themes\butterfly\source\js 目录下；</p><p>在 MyBlog\themes\source\css 目录下新建 fishes.css，用于消除动画与页底的间隙，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#ribbon-canvas</span>), <span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>; <span class="comment">/*页脚高度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在主题配置文件的 inject 中引入js和css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/blog/css/fishes.css&quot;</span>&gt;</span></span><br><span class="line">  bottom:</span><br><span class="line">    # - <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    # - <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    - <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    - <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/js/fishes.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意以下几点：</p><ol><li>jquery.min.js 必须在 fishes.js 之前引用；</li><li>如注释部分，inject可以直接引入在线文件链接，但推荐下载使用。</li><li>若部署于Github，标签的外部文件目录为 public 下的文件目录，如：<code>/css/fishes.css</code>；若部署于Gitee，需要加上仓库名称，如：<code>/blog/css/fishes.css</code>；或直接使用完整链接：<code>https://lunanhua.gitee.io/blog/css/fishes.css</code>。</li></ol><p>效果展示：</p><p><img src="https://lunanhua.gitee.io/images/blog/hexo/butterfly/fishes.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用攻略</title>
      <link href="/2022/05/25/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"/>
      <url>/2022/05/25/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>基于Hexo搭建博客网上有很多成熟的教程，我主要参考了 <a href="https://blog.csdn.net/yushuaigee/article/details/111465155">这个教程</a>，博主提供了本地搭建、Github部署、Gitee部署的详细步骤；</p><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a> 提供了Hexo详细的安装、配置、部署等教程，可以在这里学习Hexo的基本操作；</p><p>Hexo的文章使用的Markdown文件，可以查看 <a href="https://markdown.com.cn/">Markdown语法教程</a> 学习Markdown编写的基本操作，编辑器推荐使用<a href="https://www.typora.net/">Typora</a>（一款免费的轻量级Markdown编辑器）；</p><h1 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h1><h2 id="添加分类页"><a href="#添加分类页" class="headerlink" title="添加分类页"></a>添加分类页</h2><p>在博客主目录下运行执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>在生成的 MyBlog\source\categories\index.md 文件中添加 type: categories</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2022-05-25 16:11:50</span><br><span class="line">type: categories</span><br></pre></td></tr></table></figure><h2 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h2><p>同理，在博客主目录下运行执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在生成的 MyBlog\source\tags\index.md 文件中添加 type: tags</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2022-05-25 16:16:39</span><br><span class="line">type: tags</span><br></pre></td></tr></table></figure><h2 id="添加关于页"><a href="#添加关于页" class="headerlink" title="添加关于页"></a>添加关于页</h2><p>在博客主目录下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>编辑 MyBlog\source\about\index.md 文件内容</p><h2 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h2><p>在博客主目录下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p>在生成的 MyBlog\source\link\index.md 文件中添加 type: link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 友链</span><br><span class="line">date: 2022-07-03 15:10:03</span><br><span class="line">type: link</span><br></pre></td></tr></table></figure><p>在 MyBlog\source 目录下新建 _data 文件夹，在该文件夹中新建 link.yml 文件，编辑如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class1:</span><br><span class="line">  class_name: 优秀博客</span><br><span class="line">  class_desc: 向大佬们学习！</span><br><span class="line">  link_list:</span><br><span class="line">    1:</span><br><span class="line">      name: GamerNoTitle</span><br><span class="line">      link: https://bili33.top/</span><br><span class="line">      avatar: https://cdn.bilicdn.tk/gh/Vikutorika/assets@master/img/AboutMe/logo-mini.png</span><br><span class="line">      descr: 永远相信美好的事情即将发生</span><br><span class="line">    2:</span><br><span class="line">      name: MuJin&#x27;s Blog</span><br><span class="line">      link: https://xiabor.com/</span><br><span class="line">      avatar: https://xiabor.com/img/avatar.png</span><br><span class="line">      descr: 湛蓝色的初一，柠檬色的海。</span><br><span class="line"></span><br><span class="line">class2:</span><br><span class="line">  class_name: 宝藏资源</span><br><span class="line">  class_desc: 五花八门的资源链接</span><br><span class="line">  link_list:</span><br><span class="line">    1:</span><br><span class="line">      name: WALLPAPER ABYSS</span><br><span class="line">      link: https://wall.alphacoders.com/?lang=Chinese</span><br><span class="line">      avatar: https://static.alphacoders.com/icons/wallpaper/favicon-32x32.png</span><br><span class="line">      descr: 精美壁纸的聚集地</span><br><span class="line">    2:</span><br><span class="line">      name: leesoar</span><br><span class="line">      link: https://www.leesoar.com/bilibili#</span><br><span class="line">      avatar: https://cdn.jellow.site/FlAsF0tb4iFfbCMBlfu-lkCYt1FO.png</span><br><span class="line">      descr: 哔哩哔哩在线、免费的视频解析及下载。</span><br><span class="line">    3:</span><br><span class="line">      name: 优品PPT</span><br><span class="line">      link: https://www.ypppt.com/</span><br><span class="line">      avatar: https://www.ypppt.com/favicon.ico</span><br><span class="line">      descr: 一个有情怀的免费PPT模板下载网站！</span><br></pre></td></tr></table></figure><p><img src="https://lunanhua.gitee.io/images/blog/hexo/hexo/friend_link.jpg"></p><p>修改主题配置文件，在导航栏显示分类、标签、关于、友链等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首页: / || fas fa-home</span><br><span class="line">  归档: /archives/ || fas fa-archive</span><br><span class="line">  标签: /tags/ || fas fa-tags</span><br><span class="line">  分类: /categories/ || fas fa-folder-open</span><br><span class="line">  # List||fas fa-list:</span><br><span class="line">  #   Music: /music/ || fas fa-music</span><br><span class="line">  #   Movie: /movies/ || fas fa-video</span><br><span class="line">  友链: /link/ || fas fa-link</span><br><span class="line">  关于: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure><h2 id="修改文章模板"><a href="#修改文章模板" class="headerlink" title="修改文章模板"></a>修改文章模板</h2><p>可以在 MyBlog\scaffolds\post.md 中设置想要添加的属性，新建页面就不需要再手动添加，例如文章名称、创建日期、分类、标签、文章封面图片等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">cover: https://lunanhua.gitee.io/images/blog/cover/default_cover.png</span><br></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>博客主目录下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new test</span><br></pre></td></tr></table></figure><p>会在目录 MyBlog\source\_posts 中生成test.md文件</p><p>给文章设置categories和tags属性，被自动收录到博客主页的分类页面和标签页面中。注意，一篇文章只能属于一个分类，当有多个”- 分类”时，被认为是分类嵌套，即该文章属于分类1下分类2的文章，而一篇文章可以包含多个标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: test</span><br><span class="line">date: 2022-05-25 16:29:46</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">cover: https://lunanhua.gitee.io/images/blog/cover/default_cover.png</span><br></pre></td></tr></table></figure><p>最后在分隔符下方编辑文章内容。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
